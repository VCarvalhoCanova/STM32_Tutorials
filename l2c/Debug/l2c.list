
l2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  0800bd4c  0800bd4c  0000cd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bfb0  0800bfb0  0000cfb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bfb8  0800bfb8  0000cfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bfbc  0800bfbc  0000cfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800bfc0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800c020  0000d060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800c080  0000d0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000840  24000120  0800c0e0  0000d120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000960  0800c0e0  0000d960  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d264  00000000  00000000  0000d14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000314b  00000000  00000000  0002a3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f14  00000000  00000000  0002e850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038677  00000000  00000000  0002f764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c130  00000000  00000000  00067ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00162411  00000000  00000000  00083f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e631c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  001e6360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001ebc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bd34 	.word	0x0800bd34

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800bd34 	.word	0x0800bd34

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f001 f827 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f879 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 fa01 	bl	8000a94 <MX_GPIO_Init>
  MX_ETH_Init();
 8000692:	f000 f8f5 	bl	8000880 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000696:	f000 f97f 	bl	8000998 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069a:	f000 f9c9 	bl	8000a30 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800069e:	f000 f93b 	bl	8000918 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //Mensagem para avisar ao usuário que o programa começou
  char welcomeMsg[] = "Digite um comando:\r\n";
 80006a2:	4b2e      	ldr	r3, [pc, #184]	@ (800075c <main+0xdc>)
 80006a4:	463c      	mov	r4, r7
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006b0:	6020      	str	r0, [r4, #0]
 80006b2:	3404      	adds	r4, #4
 80006b4:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit_IT(&huart3, (uint8_t *)welcomeMsg, strlen(welcomeMsg));
 80006b6:	463b      	mov	r3, r7
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fe11 	bl	80002e0 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	4826      	ldr	r0, [pc, #152]	@ (8000760 <main+0xe0>)
 80006c8:	f007 fd58 	bl	800817c <HAL_UART_Transmit_IT>
  //Receive_IT inicial para permitir que a placa receba um
  HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 80006cc:	220c      	movs	r2, #12
 80006ce:	4925      	ldr	r1, [pc, #148]	@ (8000764 <main+0xe4>)
 80006d0:	4823      	ldr	r0, [pc, #140]	@ (8000760 <main+0xe0>)
 80006d2:	f007 fde7 	bl	80082a4 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006da:	f001 f88f 	bl	80017fc <HAL_Delay>
	  strncpy(stringBuffer, rxBuffer, 12);
 80006de:	220c      	movs	r2, #12
 80006e0:	4920      	ldr	r1, [pc, #128]	@ (8000764 <main+0xe4>)
 80006e2:	4821      	ldr	r0, [pc, #132]	@ (8000768 <main+0xe8>)
 80006e4:	f00a fe9a 	bl	800b41c <strncpy>


	  //Func para checar o valor no sensor de canal 0
	  if(strncmp(stringBuffer,"LDR",3) == 0){
 80006e8:	2203      	movs	r2, #3
 80006ea:	4920      	ldr	r1, [pc, #128]	@ (800076c <main+0xec>)
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <main+0xe8>)
 80006ee:	f00a fe83 	bl	800b3f8 <strncmp>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d104      	bne.n	8000702 <main+0x82>
		  PCF8591_ReadLDR();
 80006f8:	f000 fb84 	bl	8000e04 <PCF8591_ReadLDR>
		  HAL_Delay(100);
 80006fc:	2064      	movs	r0, #100	@ 0x64
 80006fe:	f001 f87d 	bl	80017fc <HAL_Delay>

	  }


	  //Func para checar o valor no sensor de canal 1
	  if(strncmp(stringBuffer,"Temp",4) == 0){
 8000702:	2204      	movs	r2, #4
 8000704:	491a      	ldr	r1, [pc, #104]	@ (8000770 <main+0xf0>)
 8000706:	4818      	ldr	r0, [pc, #96]	@ (8000768 <main+0xe8>)
 8000708:	f00a fe76 	bl	800b3f8 <strncmp>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d104      	bne.n	800071c <main+0x9c>
		  PCF8591_ReadTemp();
 8000712:	f000 fb0d 	bl	8000d30 <PCF8591_ReadTemp>
		  HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f001 f870 	bl	80017fc <HAL_Delay>
	  }

	  //Func para checar o valor no sensor de canal 3
	  if(strncmp(stringBuffer,"Pot",3) == 0){
 800071c:	2203      	movs	r2, #3
 800071e:	4915      	ldr	r1, [pc, #84]	@ (8000774 <main+0xf4>)
 8000720:	4811      	ldr	r0, [pc, #68]	@ (8000768 <main+0xe8>)
 8000722:	f00a fe69 	bl	800b3f8 <strncmp>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <main+0xb6>
		  PCF8591_ReadPot();
 800072c:	f000 fa8e 	bl	8000c4c <PCF8591_ReadPot>
		  HAL_Delay(100);
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f001 f863 	bl	80017fc <HAL_Delay>
	  }

	  if(strncmp(stringBuffer,"Set_DAC_",8)==0){
 8000736:	2208      	movs	r2, #8
 8000738:	490f      	ldr	r1, [pc, #60]	@ (8000778 <main+0xf8>)
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <main+0xe8>)
 800073c:	f00a fe5c 	bl	800b3f8 <strncmp>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1c7      	bne.n	80006d6 <main+0x56>


		  uint8_t value = (uint8_t)atoi((char*)&stringBuffer[8]);
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <main+0xfc>)
 8000748:	f00a fda5 	bl	800b296 <atoi>
 800074c:	4603      	mov	r3, r0
 800074e:	75fb      	strb	r3, [r7, #23]
		  set_dac(value);
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fbc0 	bl	8000ed8 <set_dac>
	  HAL_Delay(1000);
 8000758:	e7bd      	b.n	80006d6 <main+0x56>
 800075a:	bf00      	nop
 800075c:	0800bd68 	.word	0x0800bd68
 8000760:	24000278 	.word	0x24000278
 8000764:	240007f0 	.word	0x240007f0
 8000768:	240007fc 	.word	0x240007fc
 800076c:	0800bd4c 	.word	0x0800bd4c
 8000770:	0800bd50 	.word	0x0800bd50
 8000774:	0800bd58 	.word	0x0800bd58
 8000778:	0800bd5c 	.word	0x0800bd5c
 800077c:	24000804 	.word	0x24000804

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	@ 0x70
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	224c      	movs	r2, #76	@ 0x4c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f00a fe2a 	bl	800b3e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2220      	movs	r2, #32
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f00a fe24 	bl	800b3e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f004 fe3f 	bl	8005424 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b33      	ldr	r3, [pc, #204]	@ (8000878 <SystemClock_Config+0xf8>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ae:	4a32      	ldr	r2, [pc, #200]	@ (8000878 <SystemClock_Config+0xf8>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <SystemClock_Config+0xf8>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <SystemClock_Config+0xfc>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c8:	4a2c      	ldr	r2, [pc, #176]	@ (800087c <SystemClock_Config+0xfc>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b2a      	ldr	r3, [pc, #168]	@ (800087c <SystemClock_Config+0xfc>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007dc:	bf00      	nop
 80007de:	4b27      	ldr	r3, [pc, #156]	@ (800087c <SystemClock_Config+0xfc>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007ea:	d1f8      	bne.n	80007de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007ec:	2303      	movs	r3, #3
 80007ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fa:	2340      	movs	r3, #64	@ 0x40
 80007fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fe:	2302      	movs	r3, #2
 8000800:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000802:	2302      	movs	r3, #2
 8000804:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800080a:	2318      	movs	r3, #24
 800080c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000812:	2304      	movs	r3, #4
 8000814:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800081a:	230c      	movs	r3, #12
 800081c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800081e:	2300      	movs	r3, #0
 8000820:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fe44 	bl	80054b8 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000836:	f000 fbc3 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	233f      	movs	r3, #63	@ 0x3f
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2101      	movs	r1, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f005 fa84 	bl	8005d6c <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800086a:	f000 fba9 	bl	8000fc0 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3770      	adds	r7, #112	@ 0x70
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	58000400 	.word	0x58000400
 800087c:	58024800 	.word	0x58024800

08000880 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <MX_ETH_Init+0x80>)
 8000886:	4a1f      	ldr	r2, [pc, #124]	@ (8000904 <MX_ETH_Init+0x84>)
 8000888:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800088a:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <MX_ETH_Init+0x88>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_ETH_Init+0x88>)
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_ETH_Init+0x88>)
 8000898:	22e1      	movs	r2, #225	@ 0xe1
 800089a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800089c:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_ETH_Init+0x88>)
 800089e:	2200      	movs	r2, #0
 80008a0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_ETH_Init+0x88>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_ETH_Init+0x88>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_ETH_Init+0x80>)
 80008b0:	4a15      	ldr	r2, [pc, #84]	@ (8000908 <MX_ETH_Init+0x88>)
 80008b2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_ETH_Init+0x80>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_ETH_Init+0x80>)
 80008bc:	4a13      	ldr	r2, [pc, #76]	@ (800090c <MX_ETH_Init+0x8c>)
 80008be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_ETH_Init+0x80>)
 80008c2:	4a13      	ldr	r2, [pc, #76]	@ (8000910 <MX_ETH_Init+0x90>)
 80008c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_ETH_Init+0x80>)
 80008c8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <MX_ETH_Init+0x80>)
 80008d0:	f001 fe5a 	bl	8002588 <HAL_ETH_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008da:	f000 fb71 	bl	8000fc0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008de:	2238      	movs	r2, #56	@ 0x38
 80008e0:	2100      	movs	r1, #0
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <MX_ETH_Init+0x94>)
 80008e4:	f00a fd80 	bl	800b3e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000914 <MX_ETH_Init+0x94>)
 80008ea:	2221      	movs	r2, #33	@ 0x21
 80008ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_ETH_Init+0x94>)
 80008f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008f6:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <MX_ETH_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000174 	.word	0x24000174
 8000904:	40028000 	.word	0x40028000
 8000908:	24000808 	.word	0x24000808
 800090c:	240000c0 	.word	0x240000c0
 8000910:	24000060 	.word	0x24000060
 8000914:	2400013c 	.word	0x2400013c

08000918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <MX_I2C1_Init+0x74>)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_I2C1_Init+0x78>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000922:	4b1a      	ldr	r3, [pc, #104]	@ (800098c <MX_I2C1_Init+0x74>)
 8000924:	4a1b      	ldr	r2, [pc, #108]	@ (8000994 <MX_I2C1_Init+0x7c>)
 8000926:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <MX_I2C1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092e:	4b17      	ldr	r3, [pc, #92]	@ (800098c <MX_I2C1_Init+0x74>)
 8000930:	2201      	movs	r2, #1
 8000932:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_I2C1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000952:	480e      	ldr	r0, [pc, #56]	@ (800098c <MX_I2C1_Init+0x74>)
 8000954:	f002 fc16 	bl	8003184 <HAL_I2C_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800095e:	f000 fb2f 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000962:	2100      	movs	r1, #0
 8000964:	4809      	ldr	r0, [pc, #36]	@ (800098c <MX_I2C1_Init+0x74>)
 8000966:	f004 fb95 	bl	8005094 <HAL_I2CEx_ConfigAnalogFilter>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 fb26 	bl	8000fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000974:	2100      	movs	r1, #0
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_I2C1_Init+0x74>)
 8000978:	f004 fbd7 	bl	800512a <HAL_I2CEx_ConfigDigitalFilter>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000982:	f000 fb1d 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	24000224 	.word	0x24000224
 8000990:	40005400 	.word	0x40005400
 8000994:	10707dbc 	.word	0x10707dbc

08000998 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800099c:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 800099e:	4a23      	ldr	r2, [pc, #140]	@ (8000a2c <MX_USART3_UART_Init+0x94>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a2:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e0:	4811      	ldr	r0, [pc, #68]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009e2:	f007 fb7b 	bl	80080dc <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 fae8 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f0:	2100      	movs	r1, #0
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 80009f4:	f00a f87d 	bl	800aaf2 <HAL_UARTEx_SetTxFifoThreshold>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009fe:	f000 fadf 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a06:	f00a f8b2 	bl	800ab6e <HAL_UARTEx_SetRxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a10:	f000 fad6 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a14:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_USART3_UART_Init+0x90>)
 8000a16:	f00a f833 	bl	800aa80 <HAL_UARTEx_DisableFifoMode>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a20:	f000 face 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000278 	.word	0x24000278
 8000a2c:	40004800 	.word	0x40004800

08000a30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a36:	4a16      	ldr	r2, [pc, #88]	@ (8000a90 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a3c:	2209      	movs	r2, #9
 8000a3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a42:	2202      	movs	r2, #2
 8000a44:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a78:	f004 fba3 	bl	80051c2 <HAL_PCD_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a82:	f000 fa9d 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2400030c 	.word	0x2400030c
 8000a90:	40080000 	.word	0x40080000

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	@ 0x30
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b62      	ldr	r3, [pc, #392]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	4a60      	ldr	r2, [pc, #384]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aba:	4b5e      	ldr	r3, [pc, #376]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	4a59      	ldr	r2, [pc, #356]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad8:	4b56      	ldr	r3, [pc, #344]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b53      	ldr	r3, [pc, #332]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	4a51      	ldr	r2, [pc, #324]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b4b      	ldr	r3, [pc, #300]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b14:	4b47      	ldr	r3, [pc, #284]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b44      	ldr	r3, [pc, #272]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	4a42      	ldr	r2, [pc, #264]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b32:	4b40      	ldr	r3, [pc, #256]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b40:	4b3c      	ldr	r3, [pc, #240]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	4a3b      	ldr	r2, [pc, #236]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b50:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5e:	4b35      	ldr	r3, [pc, #212]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	4a33      	ldr	r2, [pc, #204]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <MX_GPIO_Init+0x1a0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b82:	482d      	ldr	r0, [pc, #180]	@ (8000c38 <MX_GPIO_Init+0x1a4>)
 8000b84:	f002 fae4 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b8e:	482b      	ldr	r0, [pc, #172]	@ (8000c3c <MX_GPIO_Init+0x1a8>)
 8000b90:	f002 fade 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2102      	movs	r1, #2
 8000b98:	4829      	ldr	r0, [pc, #164]	@ (8000c40 <MX_GPIO_Init+0x1ac>)
 8000b9a:	f002 fad9 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4824      	ldr	r0, [pc, #144]	@ (8000c44 <MX_GPIO_Init+0x1b0>)
 8000bb4:	f002 f91c 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bb8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4819      	ldr	r0, [pc, #100]	@ (8000c38 <MX_GPIO_Init+0x1a4>)
 8000bd2:	f002 f90d 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <MX_GPIO_Init+0x1a8>)
 8000bf0:	f002 f8fe 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <MX_GPIO_Init+0x1b4>)
 8000c0a:	f002 f8f1 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <MX_GPIO_Init+0x1ac>)
 8000c26:	f002 f8e3 	bl	8002df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	@ 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020400 	.word	0x58020400
 8000c3c:	58020c00 	.word	0x58020c00
 8000c40:	58021000 	.word	0x58021000
 8000c44:	58020800 	.word	0x58020800
 8000c48:	58021800 	.word	0x58021800

08000c4c <PCF8591_ReadPot>:

/* USER CODE BEGIN 4 */
void PCF8591_ReadPot(){
 8000c4c:	b5b0      	push	{r4, r5, r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
		char string[15];
		uint8_t config_byte = 0x40 | (3 & 0x03);
 8000c52:	2343      	movs	r3, #67	@ 0x43
 8000c54:	71fb      	strb	r3, [r7, #7]
		uint8_t analog_data[2];

		//Transmitir comando para o sensor
		HAL_I2C_Master_Transmit_IT(&hi2c1,PCF8591_ADDRESS, &config_byte, 1);
 8000c56:	1dfa      	adds	r2, r7, #7
 8000c58:	2301      	movs	r3, #1
 8000c5a:	2190      	movs	r1, #144	@ 0x90
 8000c5c:	482d      	ldr	r0, [pc, #180]	@ (8000d14 <PCF8591_ReadPot+0xc8>)
 8000c5e:	f002 fb2d 	bl	80032bc <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(100);
 8000c62:	2064      	movs	r0, #100	@ 0x64
 8000c64:	f000 fdca 	bl	80017fc <HAL_Delay>
		//Receber informação sobre o canal escolhido
		HAL_I2C_Master_Receive_IT(&hi2c1,PCF8591_ADDRESS, analog_data, 2);
 8000c68:	1d3a      	adds	r2, r7, #4
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	2190      	movs	r1, #144	@ 0x90
 8000c6e:	4829      	ldr	r0, [pc, #164]	@ (8000d14 <PCF8591_ReadPot+0xc8>)
 8000c70:	f002 fbbc 	bl	80033ec <HAL_I2C_Master_Receive_IT>
		HAL_Delay(100);
 8000c74:	2064      	movs	r0, #100	@ 0x64
 8000c76:	f000 fdc1 	bl	80017fc <HAL_Delay>

		if (analog_data[1] > 170) {
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	2baa      	cmp	r3, #170	@ 0xaa
 8000c7e:	d909      	bls.n	8000c94 <PCF8591_ReadPot+0x48>
		    strcpy(string, "Potencia alta\n");
 8000c80:	4b25      	ldr	r3, [pc, #148]	@ (8000d18 <PCF8591_ReadPot+0xcc>)
 8000c82:	f107 0408 	add.w	r4, r7, #8
 8000c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c88:	c407      	stmia	r4!, {r0, r1, r2}
 8000c8a:	8023      	strh	r3, [r4, #0]
 8000c8c:	3402      	adds	r4, #2
 8000c8e:	0c1b      	lsrs	r3, r3, #16
 8000c90:	7023      	strb	r3, [r4, #0]
 8000c92:	e014      	b.n	8000cbe <PCF8591_ReadPot+0x72>
		} else if (analog_data[1] > 85) {
 8000c94:	797b      	ldrb	r3, [r7, #5]
 8000c96:	2b55      	cmp	r3, #85	@ 0x55
 8000c98:	d909      	bls.n	8000cae <PCF8591_ReadPot+0x62>
		    strcpy(string, "Potencia média\n");
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000d1c <PCF8591_ReadPot+0xd0>)
 8000ca0:	461c      	mov	r4, r3
 8000ca2:	4615      	mov	r5, r2
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	7023      	strb	r3, [r4, #0]
 8000cac:	e007      	b.n	8000cbe <PCF8591_ReadPot+0x72>
		} else {
		    strcpy(string, "Potencia Baixa\n");
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <PCF8591_ReadPot+0xd4>)
 8000cb4:	461c      	mov	r4, r3
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)string, strlen(string));
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fb0c 	bl	80002e0 <strlen>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4814      	ldr	r0, [pc, #80]	@ (8000d24 <PCF8591_ReadPot+0xd8>)
 8000cd4:	f007 fa52 	bl	800817c <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8000cd8:	2064      	movs	r0, #100	@ 0x64
 8000cda:	f000 fd8f 	bl	80017fc <HAL_Delay>

		 // Limpar a memoria do buffer
		 memset(rxBuffer, 0, 12);
 8000cde:	220c      	movs	r2, #12
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <PCF8591_ReadPot+0xdc>)
 8000ce4:	f00a fb80 	bl	800b3e8 <memset>
		 // Resetar o contador e o ponteiro do usart3
		  huart3.pRxBuffPtr = rxBuffer;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <PCF8591_ReadPot+0xd8>)
 8000cea:	4a0f      	ldr	r2, [pc, #60]	@ (8000d28 <PCF8591_ReadPot+0xdc>)
 8000cec:	659a      	str	r2, [r3, #88]	@ 0x58
		  huart3.RxXferCount = 0;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <PCF8591_ReadPot+0xd8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
		  memset(stringBuffer, 0, 12);
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	480c      	ldr	r0, [pc, #48]	@ (8000d2c <PCF8591_ReadPot+0xe0>)
 8000cfc:	f00a fb74 	bl	800b3e8 <memset>
		  HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 8000d00:	220c      	movs	r2, #12
 8000d02:	4909      	ldr	r1, [pc, #36]	@ (8000d28 <PCF8591_ReadPot+0xdc>)
 8000d04:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <PCF8591_ReadPot+0xd8>)
 8000d06:	f007 facd 	bl	80082a4 <HAL_UART_Receive_IT>

}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	24000224 	.word	0x24000224
 8000d18:	0800bd80 	.word	0x0800bd80
 8000d1c:	0800bd90 	.word	0x0800bd90
 8000d20:	0800bda4 	.word	0x0800bda4
 8000d24:	24000278 	.word	0x24000278
 8000d28:	240007f0 	.word	0x240007f0
 8000d2c:	240007fc 	.word	0x240007fc

08000d30 <PCF8591_ReadTemp>:

void PCF8591_ReadTemp(){
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
		char string[15];
		uint8_t config_byte = 0x40 | (1 & 0x03);
 8000d36:	2341      	movs	r3, #65	@ 0x41
 8000d38:	71fb      	strb	r3, [r7, #7]
		uint8_t analog_data[2];

		//Transmitir comando para o sensor
		HAL_I2C_Master_Transmit_IT(&hi2c1,PCF8591_ADDRESS, &config_byte, 1);
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	2190      	movs	r1, #144	@ 0x90
 8000d40:	4829      	ldr	r0, [pc, #164]	@ (8000de8 <PCF8591_ReadTemp+0xb8>)
 8000d42:	f002 fabb 	bl	80032bc <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f000 fd58 	bl	80017fc <HAL_Delay>
		//Receber informação sobre o canal escolhido
		HAL_I2C_Master_Receive_IT(&hi2c1,PCF8591_ADDRESS, analog_data, 2);
 8000d4c:	1d3a      	adds	r2, r7, #4
 8000d4e:	2302      	movs	r3, #2
 8000d50:	2190      	movs	r1, #144	@ 0x90
 8000d52:	4825      	ldr	r0, [pc, #148]	@ (8000de8 <PCF8591_ReadTemp+0xb8>)
 8000d54:	f002 fb4a 	bl	80033ec <HAL_I2C_Master_Receive_IT>
		HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	@ 0x64
 8000d5a:	f000 fd4f 	bl	80017fc <HAL_Delay>

		if(analog_data[1]>170){
 8000d5e:	797b      	ldrb	r3, [r7, #5]
 8000d60:	2baa      	cmp	r3, #170	@ 0xaa
 8000d62:	d906      	bls.n	8000d72 <PCF8591_ReadTemp+0x42>
			//Criar mensagem que será exibida no terminal
			sprintf(string, "Temperatura alta\n");
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4920      	ldr	r1, [pc, #128]	@ (8000dec <PCF8591_ReadTemp+0xbc>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00a fb1c 	bl	800b3a8 <siprintf>
 8000d70:	e00f      	b.n	8000d92 <PCF8591_ReadTemp+0x62>
		}else if(analog_data[1]>85){
 8000d72:	797b      	ldrb	r3, [r7, #5]
 8000d74:	2b55      	cmp	r3, #85	@ 0x55
 8000d76:	d906      	bls.n	8000d86 <PCF8591_ReadTemp+0x56>
			sprintf(string, "Temperatura média\n");
 8000d78:	f107 0308 	add.w	r3, r7, #8
 8000d7c:	491c      	ldr	r1, [pc, #112]	@ (8000df0 <PCF8591_ReadTemp+0xc0>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f00a fb12 	bl	800b3a8 <siprintf>
 8000d84:	e005      	b.n	8000d92 <PCF8591_ReadTemp+0x62>
		}else{
			sprintf(string, "Temperatura Baixa\n");
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	491a      	ldr	r1, [pc, #104]	@ (8000df4 <PCF8591_ReadTemp+0xc4>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f00a fb0b 	bl	800b3a8 <siprintf>
		}

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)string, strlen(string));
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff faa2 	bl	80002e0 <strlen>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <PCF8591_ReadTemp+0xc8>)
 8000da8:	f007 f9e8 	bl	800817c <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8000dac:	2064      	movs	r0, #100	@ 0x64
 8000dae:	f000 fd25 	bl	80017fc <HAL_Delay>
		 // Limpar a memoria do buffer
		 memset(rxBuffer, 0, 12);
 8000db2:	220c      	movs	r2, #12
 8000db4:	2100      	movs	r1, #0
 8000db6:	4811      	ldr	r0, [pc, #68]	@ (8000dfc <PCF8591_ReadTemp+0xcc>)
 8000db8:	f00a fb16 	bl	800b3e8 <memset>
		 // Resetar o contador e o ponteiro do usart3
		  huart3.pRxBuffPtr = rxBuffer;
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <PCF8591_ReadTemp+0xc8>)
 8000dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000dfc <PCF8591_ReadTemp+0xcc>)
 8000dc0:	659a      	str	r2, [r3, #88]	@ 0x58
		  huart3.RxXferCount = 0;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <PCF8591_ReadTemp+0xc8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
		  memset(stringBuffer, 0, 12);
 8000dca:	220c      	movs	r2, #12
 8000dcc:	2100      	movs	r1, #0
 8000dce:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <PCF8591_ReadTemp+0xd0>)
 8000dd0:	f00a fb0a 	bl	800b3e8 <memset>
		  HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	4909      	ldr	r1, [pc, #36]	@ (8000dfc <PCF8591_ReadTemp+0xcc>)
 8000dd8:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <PCF8591_ReadTemp+0xc8>)
 8000dda:	f007 fa63 	bl	80082a4 <HAL_UART_Receive_IT>

}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	24000224 	.word	0x24000224
 8000dec:	0800bdb4 	.word	0x0800bdb4
 8000df0:	0800bdc8 	.word	0x0800bdc8
 8000df4:	0800bddc 	.word	0x0800bddc
 8000df8:	24000278 	.word	0x24000278
 8000dfc:	240007f0 	.word	0x240007f0
 8000e00:	240007fc 	.word	0x240007fc

08000e04 <PCF8591_ReadLDR>:

void PCF8591_ReadLDR(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
		char string[15];
		uint8_t config_byte = 0x40 | (0 & 0x03);
 8000e0a:	2340      	movs	r3, #64	@ 0x40
 8000e0c:	71fb      	strb	r3, [r7, #7]
		uint8_t analog_data[2];

		//Transmitir comando para o sensor
		HAL_I2C_Master_Transmit_IT(&hi2c1,PCF8591_ADDRESS, &config_byte, 1);
 8000e0e:	1dfa      	adds	r2, r7, #7
 8000e10:	2301      	movs	r3, #1
 8000e12:	2190      	movs	r1, #144	@ 0x90
 8000e14:	4829      	ldr	r0, [pc, #164]	@ (8000ebc <PCF8591_ReadLDR+0xb8>)
 8000e16:	f002 fa51 	bl	80032bc <HAL_I2C_Master_Transmit_IT>
		HAL_Delay(100);
 8000e1a:	2064      	movs	r0, #100	@ 0x64
 8000e1c:	f000 fcee 	bl	80017fc <HAL_Delay>
		//Receber informação sobre o canal escolhido
		HAL_I2C_Master_Receive_IT(&hi2c1,PCF8591_ADDRESS, analog_data, 2);
 8000e20:	1d3a      	adds	r2, r7, #4
 8000e22:	2302      	movs	r3, #2
 8000e24:	2190      	movs	r1, #144	@ 0x90
 8000e26:	4825      	ldr	r0, [pc, #148]	@ (8000ebc <PCF8591_ReadLDR+0xb8>)
 8000e28:	f002 fae0 	bl	80033ec <HAL_I2C_Master_Receive_IT>
		HAL_Delay(100);
 8000e2c:	2064      	movs	r0, #100	@ 0x64
 8000e2e:	f000 fce5 	bl	80017fc <HAL_Delay>

		if(analog_data[1]>170){
 8000e32:	797b      	ldrb	r3, [r7, #5]
 8000e34:	2baa      	cmp	r3, #170	@ 0xaa
 8000e36:	d906      	bls.n	8000e46 <PCF8591_ReadLDR+0x42>
			//Criar mensagem que será exibida no terminal
			sprintf(string, "Luminosidade alta\n");
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4920      	ldr	r1, [pc, #128]	@ (8000ec0 <PCF8591_ReadLDR+0xbc>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f00a fab2 	bl	800b3a8 <siprintf>
 8000e44:	e00f      	b.n	8000e66 <PCF8591_ReadLDR+0x62>
		}else if(analog_data[1]>85){
 8000e46:	797b      	ldrb	r3, [r7, #5]
 8000e48:	2b55      	cmp	r3, #85	@ 0x55
 8000e4a:	d906      	bls.n	8000e5a <PCF8591_ReadLDR+0x56>
			sprintf(string, "Luminosidade média\n");
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	491c      	ldr	r1, [pc, #112]	@ (8000ec4 <PCF8591_ReadLDR+0xc0>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f00a faa8 	bl	800b3a8 <siprintf>
 8000e58:	e005      	b.n	8000e66 <PCF8591_ReadLDR+0x62>
		}else{
			sprintf(string, "Luminosidade Baixa\n");
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	491a      	ldr	r1, [pc, #104]	@ (8000ec8 <PCF8591_ReadLDR+0xc4>)
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a faa1 	bl	800b3a8 <siprintf>
		}

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)string, strlen(string));
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fa38 	bl	80002e0 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f107 0308 	add.w	r3, r7, #8
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4814      	ldr	r0, [pc, #80]	@ (8000ecc <PCF8591_ReadLDR+0xc8>)
 8000e7c:	f007 f97e 	bl	800817c <HAL_UART_Transmit_IT>
		HAL_Delay(100);
 8000e80:	2064      	movs	r0, #100	@ 0x64
 8000e82:	f000 fcbb 	bl	80017fc <HAL_Delay>


		 // Limpar a memoria do buffer
		 memset(rxBuffer, 0, 12);
 8000e86:	220c      	movs	r2, #12
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4811      	ldr	r0, [pc, #68]	@ (8000ed0 <PCF8591_ReadLDR+0xcc>)
 8000e8c:	f00a faac 	bl	800b3e8 <memset>
		 // Resetar o contador e o ponteiro do usart3
		  huart3.pRxBuffPtr = rxBuffer;
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <PCF8591_ReadLDR+0xc8>)
 8000e92:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed0 <PCF8591_ReadLDR+0xcc>)
 8000e94:	659a      	str	r2, [r3, #88]	@ 0x58
		  huart3.RxXferCount = 0;
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <PCF8591_ReadLDR+0xc8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
		  memset(stringBuffer, 0, 12);
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <PCF8591_ReadLDR+0xd0>)
 8000ea4:	f00a faa0 	bl	800b3e8 <memset>
		  HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 8000ea8:	220c      	movs	r2, #12
 8000eaa:	4909      	ldr	r1, [pc, #36]	@ (8000ed0 <PCF8591_ReadLDR+0xcc>)
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <PCF8591_ReadLDR+0xc8>)
 8000eae:	f007 f9f9 	bl	80082a4 <HAL_UART_Receive_IT>

}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	24000224 	.word	0x24000224
 8000ec0:	0800bdf0 	.word	0x0800bdf0
 8000ec4:	0800be04 	.word	0x0800be04
 8000ec8:	0800be1c 	.word	0x0800be1c
 8000ecc:	24000278 	.word	0x24000278
 8000ed0:	240007f0 	.word	0x240007f0
 8000ed4:	240007fc 	.word	0x240007fc

08000ed8 <set_dac>:

	 void set_dac(uint8_t value){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
		 uint8_t config_byte = 0x40;
 8000ee2:	2340      	movs	r3, #64	@ 0x40
 8000ee4:	77fb      	strb	r3, [r7, #31]
		 uint8_t analog_data[2] = {config_byte, value};
 8000ee6:	7ffb      	ldrb	r3, [r7, #31]
 8000ee8:	773b      	strb	r3, [r7, #28]
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	777b      	strb	r3, [r7, #29]
		 //Transmitir comando para o sensor
		 HAL_I2C_Master_Transmit_IT(&hi2c1,(uint16_t)PCF8591_ADDRESS, analog_data, 2);
 8000eee:	f107 021c 	add.w	r2, r7, #28
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	2190      	movs	r1, #144	@ 0x90
 8000ef6:	481b      	ldr	r0, [pc, #108]	@ (8000f64 <set_dac+0x8c>)
 8000ef8:	f002 f9e0 	bl	80032bc <HAL_I2C_Master_Transmit_IT>
		 HAL_Delay(100);
 8000efc:	2064      	movs	r0, #100	@ 0x64
 8000efe:	f000 fc7d 	bl	80017fc <HAL_Delay>

		 //Criar mensagem que será exibida no terminal
		 char string[15];
		 sprintf(string, "Valor do DAC: %d\n", value);
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4917      	ldr	r1, [pc, #92]	@ (8000f68 <set_dac+0x90>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00a fa4c 	bl	800b3a8 <siprintf>
		 //Enviar mensagem
		 HAL_UART_Transmit_IT(&huart3, (uint8_t*)string, strlen(string));
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f9e3 	bl	80002e0 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	4619      	mov	r1, r3
 8000f24:	4811      	ldr	r0, [pc, #68]	@ (8000f6c <set_dac+0x94>)
 8000f26:	f007 f929 	bl	800817c <HAL_UART_Transmit_IT>
		 HAL_Delay(100);
 8000f2a:	2064      	movs	r0, #100	@ 0x64
 8000f2c:	f000 fc66 	bl	80017fc <HAL_Delay>

		 // Limpar a memoria do buffer
		 memset(rxBuffer, 0, 12);
 8000f30:	220c      	movs	r2, #12
 8000f32:	2100      	movs	r1, #0
 8000f34:	480e      	ldr	r0, [pc, #56]	@ (8000f70 <set_dac+0x98>)
 8000f36:	f00a fa57 	bl	800b3e8 <memset>
		 // Resetar o contador e o ponteiro do usart3
		  huart3.pRxBuffPtr = rxBuffer;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <set_dac+0x94>)
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000f70 <set_dac+0x98>)
 8000f3e:	659a      	str	r2, [r3, #88]	@ 0x58
		  huart3.RxXferCount = 0;
 8000f40:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <set_dac+0x94>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
		  memset(stringBuffer, 0, 12);
 8000f48:	220c      	movs	r2, #12
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <set_dac+0x9c>)
 8000f4e:	f00a fa4b 	bl	800b3e8 <memset>
		  HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 8000f52:	220c      	movs	r2, #12
 8000f54:	4906      	ldr	r1, [pc, #24]	@ (8000f70 <set_dac+0x98>)
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <set_dac+0x94>)
 8000f58:	f007 f9a4 	bl	80082a4 <HAL_UART_Receive_IT>
	 }
 8000f5c:	bf00      	nop
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	24000224 	.word	0x24000224
 8000f68:	0800be30 	.word	0x0800be30
 8000f6c:	24000278 	.word	0x24000278
 8000f70:	240007f0 	.word	0x240007f0
 8000f74:	240007fc 	.word	0x240007fc

08000f78 <HAL_UART_RxCpltCallback>:



	 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
		 // Limpar a memoria do buffer
		 	    memset(rxBuffer, 0, 12);
 8000f80:	220c      	movs	r2, #12
 8000f82:	2100      	movs	r1, #0
 8000f84:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x3c>)
 8000f86:	f00a fa2f 	bl	800b3e8 <memset>
		 	    // Resetar o contador e o ponteiro do usart3
		 	    huart3.pRxBuffPtr = rxBuffer;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x40>)
 8000f8c:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x3c>)
 8000f8e:	659a      	str	r2, [r3, #88]	@ 0x58
		 	    huart3.RxXferCount = 0;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
		 	    memset(stringBuffer, 0, 12);
 8000f98:	220c      	movs	r2, #12
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <HAL_UART_RxCpltCallback+0x44>)
 8000f9e:	f00a fa23 	bl	800b3e8 <memset>
		 HAL_UART_Receive_IT(&huart3, rxBuffer, 12); // Reinicia a recepção
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	4903      	ldr	r1, [pc, #12]	@ (8000fb4 <HAL_UART_RxCpltCallback+0x3c>)
 8000fa6:	4804      	ldr	r0, [pc, #16]	@ (8000fb8 <HAL_UART_RxCpltCallback+0x40>)
 8000fa8:	f007 f97c 	bl	80082a4 <HAL_UART_Receive_IT>

	 }
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	240007f0 	.word	0x240007f0
 8000fb8:	24000278 	.word	0x24000278
 8000fbc:	240007fc 	.word	0x240007fc

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <Error_Handler+0x8>

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <HAL_MspInit+0x30>)
 8000fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fd8:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_MspInit+0x30>)
 8000fda:	f043 0302 	orr.w	r3, r3, #2
 8000fde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_MspInit+0x30>)
 8000fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	58024400 	.word	0x58024400

08001000 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	@ 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a59      	ldr	r2, [pc, #356]	@ (8001184 <HAL_ETH_MspInit+0x184>)
 800101e:	4293      	cmp	r3, r2
 8001020:	f040 80ab 	bne.w	800117a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001024:	4b58      	ldr	r3, [pc, #352]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800102a:	4a57      	ldr	r2, [pc, #348]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 800102c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001030:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001034:	4b54      	ldr	r3, [pc, #336]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800103a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800103e:	623b      	str	r3, [r7, #32]
 8001040:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001042:	4b51      	ldr	r3, [pc, #324]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001048:	4a4f      	ldr	r2, [pc, #316]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 800104a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800104e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001052:	4b4d      	ldr	r3, [pc, #308]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001060:	4b49      	ldr	r3, [pc, #292]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001066:	4a48      	ldr	r2, [pc, #288]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800106c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001070:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b42      	ldr	r3, [pc, #264]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001084:	4a40      	ldr	r2, [pc, #256]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108e:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 800109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a2:	4a39      	ldr	r2, [pc, #228]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c0:	4a31      	ldr	r2, [pc, #196]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010de:	4a2a      	ldr	r2, [pc, #168]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <HAL_ETH_MspInit+0x188>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010f6:	2332      	movs	r3, #50	@ 0x32
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001106:	230b      	movs	r3, #11
 8001108:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	481e      	ldr	r0, [pc, #120]	@ (800118c <HAL_ETH_MspInit+0x18c>)
 8001112:	f001 fe6d 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001116:	2386      	movs	r3, #134	@ 0x86
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001126:	230b      	movs	r3, #11
 8001128:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	4817      	ldr	r0, [pc, #92]	@ (8001190 <HAL_ETH_MspInit+0x190>)
 8001132:	f001 fe5d 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001148:	230b      	movs	r3, #11
 800114a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4810      	ldr	r0, [pc, #64]	@ (8001194 <HAL_ETH_MspInit+0x194>)
 8001154:	f001 fe4c 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001158:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4808      	ldr	r0, [pc, #32]	@ (8001198 <HAL_ETH_MspInit+0x198>)
 8001176:	f001 fe3b 	bl	8002df0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800117a:	bf00      	nop
 800117c:	3738      	adds	r7, #56	@ 0x38
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40028000 	.word	0x40028000
 8001188:	58024400 	.word	0x58024400
 800118c:	58020800 	.word	0x58020800
 8001190:	58020000 	.word	0x58020000
 8001194:	58020400 	.word	0x58020400
 8001198:	58021800 	.word	0x58021800

0800119c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0ba      	sub	sp, #232	@ 0xe8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	22c0      	movs	r2, #192	@ 0xc0
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f00a f913 	bl	800b3e8 <memset>
  if(hi2c->Instance==I2C1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001284 <HAL_I2C_MspInit+0xe8>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d156      	bne.n	800127a <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011cc:	f04f 0208 	mov.w	r2, #8
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 f94e 	bl	8006484 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011ee:	f7ff fee7 	bl	8000fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_I2C_MspInit+0xec>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <HAL_I2C_MspInit+0xec>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001202:	4b21      	ldr	r3, [pc, #132]	@ (8001288 <HAL_I2C_MspInit+0xec>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001210:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001214:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001218:	2312      	movs	r3, #18
 800121a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122a:	2304      	movs	r3, #4
 800122c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001230:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001234:	4619      	mov	r1, r3
 8001236:	4815      	ldr	r0, [pc, #84]	@ (800128c <HAL_I2C_MspInit+0xf0>)
 8001238:	f001 fdda 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_I2C_MspInit+0xec>)
 800123e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001242:	4a11      	ldr	r2, [pc, #68]	@ (8001288 <HAL_I2C_MspInit+0xec>)
 8001244:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001248:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800124c:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_I2C_MspInit+0xec>)
 800124e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001252:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	201f      	movs	r0, #31
 8001260:	f000 fbeb 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001264:	201f      	movs	r0, #31
 8001266:	f000 fc02 	bl	8001a6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2020      	movs	r0, #32
 8001270:	f000 fbe3 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001274:	2020      	movs	r0, #32
 8001276:	f000 fbfa 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800127a:	bf00      	nop
 800127c:	37e8      	adds	r7, #232	@ 0xe8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40005400 	.word	0x40005400
 8001288:	58024400 	.word	0x58024400
 800128c:	58020400 	.word	0x58020400

08001290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ba      	sub	sp, #232	@ 0xe8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	22c0      	movs	r2, #192	@ 0xc0
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00a f899 	bl	800b3e8 <memset>
  if(huart->Instance==USART3)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001368 <HAL_UART_MspInit+0xd8>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d14e      	bne.n	800135e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012c0:	f04f 0202 	mov.w	r2, #2
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d2:	f107 0310 	add.w	r3, r7, #16
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 f8d4 	bl	8006484 <HAL_RCCEx_PeriphCLKConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012e2:	f7ff fe6d 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012e6:	4b21      	ldr	r3, [pc, #132]	@ (800136c <HAL_UART_MspInit+0xdc>)
 80012e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ec:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <HAL_UART_MspInit+0xdc>)
 80012ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_UART_MspInit+0xdc>)
 80012f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_UART_MspInit+0xdc>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	4a18      	ldr	r2, [pc, #96]	@ (800136c <HAL_UART_MspInit+0xdc>)
 800130c:	f043 0308 	orr.w	r3, r3, #8
 8001310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_UART_MspInit+0xdc>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001322:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800133c:	2307      	movs	r3, #7
 800133e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001342:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001346:	4619      	mov	r1, r3
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <HAL_UART_MspInit+0xe0>)
 800134a:	f001 fd51 	bl	8002df0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2027      	movs	r0, #39	@ 0x27
 8001354:	f000 fb71 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001358:	2027      	movs	r0, #39	@ 0x27
 800135a:	f000 fb88 	bl	8001a6e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800135e:	bf00      	nop
 8001360:	37e8      	adds	r7, #232	@ 0xe8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004800 	.word	0x40004800
 800136c:	58024400 	.word	0x58024400
 8001370:	58020c00 	.word	0x58020c00

08001374 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0ba      	sub	sp, #232	@ 0xe8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	22c0      	movs	r2, #192	@ 0xc0
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f00a f827 	bl	800b3e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a30      	ldr	r2, [pc, #192]	@ (8001460 <HAL_PCD_MspInit+0xec>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d159      	bne.n	8001458 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80013b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80013b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 f861 	bl	8006484 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80013c8:	f7ff fdfa 	bl	8000fc0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80013cc:	f004 f864 	bl	8005498 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_PCD_MspInit+0xf0>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	4a23      	ldr	r2, [pc, #140]	@ (8001464 <HAL_PCD_MspInit+0xf0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e0:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <HAL_PCD_MspInit+0xf0>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013ee:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80013f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001408:	230a      	movs	r3, #10
 800140a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001412:	4619      	mov	r1, r3
 8001414:	4814      	ldr	r0, [pc, #80]	@ (8001468 <HAL_PCD_MspInit+0xf4>)
 8001416:	f001 fceb 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800141a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800141e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001432:	4619      	mov	r1, r3
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <HAL_PCD_MspInit+0xf4>)
 8001436:	f001 fcdb 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <HAL_PCD_MspInit+0xf0>)
 800143c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001440:	4a08      	ldr	r2, [pc, #32]	@ (8001464 <HAL_PCD_MspInit+0xf0>)
 8001442:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001446:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_PCD_MspInit+0xf0>)
 800144c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001450:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001458:	bf00      	nop
 800145a:	37e8      	adds	r7, #232	@ 0xe8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40080000 	.word	0x40080000
 8001464:	58024400 	.word	0x58024400
 8001468:	58020000 	.word	0x58020000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <UsageFault_Handler+0x4>

08001494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c2:	f000 f97b 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <I2C1_EV_IRQHandler+0x10>)
 80014d2:	f001 fffb 	bl	80034cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	24000224 	.word	0x24000224

080014e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <I2C1_ER_IRQHandler+0x10>)
 80014e6:	f002 f80b 	bl	8003500 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	24000224 	.word	0x24000224

080014f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <USART3_IRQHandler+0x10>)
 80014fa:	f006 ff1f 	bl	800833c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	24000278 	.word	0x24000278

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f009 ff84 	bl	800b444 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	24080000 	.word	0x24080000
 8001568:	00000400 	.word	0x00000400
 800156c:	24000810 	.word	0x24000810
 8001570:	24000960 	.word	0x24000960

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001578:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <SystemInit+0xe4>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157e:	4a36      	ldr	r2, [pc, #216]	@ (8001658 <SystemInit+0xe4>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001588:	4b34      	ldr	r3, [pc, #208]	@ (800165c <SystemInit+0xe8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	2b06      	cmp	r3, #6
 8001592:	d807      	bhi.n	80015a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001594:	4b31      	ldr	r3, [pc, #196]	@ (800165c <SystemInit+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 030f 	bic.w	r3, r3, #15
 800159c:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <SystemInit+0xe8>)
 800159e:	f043 0307 	orr.w	r3, r3, #7
 80015a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <SystemInit+0xec>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001660 <SystemInit+0xec>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <SystemInit+0xec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <SystemInit+0xec>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4929      	ldr	r1, [pc, #164]	@ (8001660 <SystemInit+0xec>)
 80015bc:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <SystemInit+0xf0>)
 80015be:	4013      	ands	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <SystemInit+0xe8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ce:	4b23      	ldr	r3, [pc, #140]	@ (800165c <SystemInit+0xe8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 030f 	bic.w	r3, r3, #15
 80015d6:	4a21      	ldr	r2, [pc, #132]	@ (800165c <SystemInit+0xe8>)
 80015d8:	f043 0307 	orr.w	r3, r3, #7
 80015dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015de:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <SystemInit+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <SystemInit+0xec>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <SystemInit+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <SystemInit+0xec>)
 80015f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001668 <SystemInit+0xf4>)
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <SystemInit+0xec>)
 80015f8:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <SystemInit+0xf8>)
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <SystemInit+0xec>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001670 <SystemInit+0xfc>)
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <SystemInit+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <SystemInit+0xec>)
 800160a:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <SystemInit+0xfc>)
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <SystemInit+0xec>)
 8001616:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <SystemInit+0xfc>)
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <SystemInit+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <SystemInit+0xec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <SystemInit+0xec>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <SystemInit+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <SystemInit+0x100>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <SystemInit+0x104>)
 8001638:	4013      	ands	r3, r2
 800163a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800163e:	d202      	bcs.n	8001646 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <SystemInit+0x108>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <SystemInit+0x10c>)
 8001648:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800164c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	52002000 	.word	0x52002000
 8001660:	58024400 	.word	0x58024400
 8001664:	eaf6ed7f 	.word	0xeaf6ed7f
 8001668:	02020200 	.word	0x02020200
 800166c:	01ff0000 	.word	0x01ff0000
 8001670:	01010280 	.word	0x01010280
 8001674:	5c001000 	.word	0x5c001000
 8001678:	ffff0000 	.word	0xffff0000
 800167c:	51008108 	.word	0x51008108
 8001680:	52004000 	.word	0x52004000

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001688:	f7ff ff74 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168e:	490d      	ldr	r1, [pc, #52]	@ (80016c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a4:	4c0a      	ldr	r4, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b2:	f009 fecd 	bl	800b450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7fe ffe3 	bl	8000680 <main>
  bx  lr
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016c4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80016c8:	0800bfc0 	.word	0x0800bfc0
  ldr r2, =_sbss
 80016cc:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80016d0:	24000960 	.word	0x24000960

080016d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC3_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016de:	2003      	movs	r0, #3
 80016e0:	f000 f9a0 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016e4:	f004 fcf8 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_Init+0x68>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	4913      	ldr	r1, [pc, #76]	@ (8001744 <HAL_Init+0x6c>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001702:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <HAL_Init+0x68>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_Init+0x6c>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	f003 031f 	and.w	r3, r3, #31
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	fa22 f303 	lsr.w	r3, r2, r3
 8001718:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_Init+0x70>)
 800171a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <HAL_Init+0x74>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f814 	bl	8001750 <HAL_InitTick>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e002      	b.n	8001738 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001732:	f7ff fc4b 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	58024400 	.word	0x58024400
 8001744:	0800be44 	.word	0x0800be44
 8001748:	24000004 	.word	0x24000004
 800174c:	24000000 	.word	0x24000000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <HAL_InitTick+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e021      	b.n	80017a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <HAL_InitTick+0x64>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_InitTick+0x60>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f985 	bl	8001a8a <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f94f 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_InitTick+0x68>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2400000c 	.word	0x2400000c
 80017b4:	24000000 	.word	0x24000000
 80017b8:	24000008 	.word	0x24000008

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	2400000c 	.word	0x2400000c
 80017e0:	24000814 	.word	0x24000814

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	24000814 	.word	0x24000814

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	2400000c 	.word	0x2400000c

08001844 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <HAL_GetREVID+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0c1b      	lsrs	r3, r3, #16
}
 800184e:	4618      	mov	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	5c001000 	.word	0x5c001000

0800185c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001864:	4b06      	ldr	r3, [pc, #24]	@ (8001880 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800186c:	4904      	ldr	r1, [pc, #16]	@ (8001880 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	58000400 	.word	0x58000400

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	05fa0000 	.word	0x05fa0000

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	@ (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	@ (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	@ (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	@ 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff8e 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff29 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff40 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff90 	bl	8001978 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5f 	bl	8001924 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff33 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa4 	bl	80019e0 <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fe9a 	bl	80017e4 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e2dc      	b.n	8002076 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d008      	beq.n	8001ada <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2280      	movs	r2, #128	@ 0x80
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e2cd      	b.n	8002076 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a76      	ldr	r2, [pc, #472]	@ (8001cb8 <HAL_DMA_Abort+0x214>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d04a      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a74      	ldr	r2, [pc, #464]	@ (8001cbc <HAL_DMA_Abort+0x218>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d045      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a73      	ldr	r2, [pc, #460]	@ (8001cc0 <HAL_DMA_Abort+0x21c>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d040      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a71      	ldr	r2, [pc, #452]	@ (8001cc4 <HAL_DMA_Abort+0x220>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d03b      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a70      	ldr	r2, [pc, #448]	@ (8001cc8 <HAL_DMA_Abort+0x224>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d036      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6e      	ldr	r2, [pc, #440]	@ (8001ccc <HAL_DMA_Abort+0x228>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d031      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6d      	ldr	r2, [pc, #436]	@ (8001cd0 <HAL_DMA_Abort+0x22c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d02c      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6b      	ldr	r2, [pc, #428]	@ (8001cd4 <HAL_DMA_Abort+0x230>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d027      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a6a      	ldr	r2, [pc, #424]	@ (8001cd8 <HAL_DMA_Abort+0x234>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d022      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a68      	ldr	r2, [pc, #416]	@ (8001cdc <HAL_DMA_Abort+0x238>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01d      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a67      	ldr	r2, [pc, #412]	@ (8001ce0 <HAL_DMA_Abort+0x23c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d018      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a65      	ldr	r2, [pc, #404]	@ (8001ce4 <HAL_DMA_Abort+0x240>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d013      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a64      	ldr	r2, [pc, #400]	@ (8001ce8 <HAL_DMA_Abort+0x244>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d00e      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a62      	ldr	r2, [pc, #392]	@ (8001cec <HAL_DMA_Abort+0x248>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d009      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a61      	ldr	r2, [pc, #388]	@ (8001cf0 <HAL_DMA_Abort+0x24c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_DMA_Abort+0xd6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5f      	ldr	r2, [pc, #380]	@ (8001cf4 <HAL_DMA_Abort+0x250>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Abort+0xda>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e000      	b.n	8001b80 <HAL_DMA_Abort+0xdc>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d013      	beq.n	8001bac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 021e 	bic.w	r2, r2, #30
 8001b92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695a      	ldr	r2, [r3, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ba2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e00a      	b.n	8001bc2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 020e 	bic.w	r2, r2, #14
 8001bba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001cb8 <HAL_DMA_Abort+0x214>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d072      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3a      	ldr	r2, [pc, #232]	@ (8001cbc <HAL_DMA_Abort+0x218>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d06d      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a39      	ldr	r2, [pc, #228]	@ (8001cc0 <HAL_DMA_Abort+0x21c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d068      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a37      	ldr	r2, [pc, #220]	@ (8001cc4 <HAL_DMA_Abort+0x220>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d063      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a36      	ldr	r2, [pc, #216]	@ (8001cc8 <HAL_DMA_Abort+0x224>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d05e      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a34      	ldr	r2, [pc, #208]	@ (8001ccc <HAL_DMA_Abort+0x228>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d059      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a33      	ldr	r2, [pc, #204]	@ (8001cd0 <HAL_DMA_Abort+0x22c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d054      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a31      	ldr	r2, [pc, #196]	@ (8001cd4 <HAL_DMA_Abort+0x230>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d04f      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a30      	ldr	r2, [pc, #192]	@ (8001cd8 <HAL_DMA_Abort+0x234>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d04a      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a2e      	ldr	r2, [pc, #184]	@ (8001cdc <HAL_DMA_Abort+0x238>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d045      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce0 <HAL_DMA_Abort+0x23c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d040      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a2b      	ldr	r2, [pc, #172]	@ (8001ce4 <HAL_DMA_Abort+0x240>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d03b      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce8 <HAL_DMA_Abort+0x244>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d036      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a28      	ldr	r2, [pc, #160]	@ (8001cec <HAL_DMA_Abort+0x248>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d031      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a27      	ldr	r2, [pc, #156]	@ (8001cf0 <HAL_DMA_Abort+0x24c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d02c      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a25      	ldr	r2, [pc, #148]	@ (8001cf4 <HAL_DMA_Abort+0x250>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d027      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a24      	ldr	r2, [pc, #144]	@ (8001cf8 <HAL_DMA_Abort+0x254>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d022      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a22      	ldr	r2, [pc, #136]	@ (8001cfc <HAL_DMA_Abort+0x258>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01d      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <HAL_DMA_Abort+0x25c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d018      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	@ (8001d04 <HAL_DMA_Abort+0x260>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d013      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d08 <HAL_DMA_Abort+0x264>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00e      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_DMA_Abort+0x268>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d009      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d10 <HAL_DMA_Abort+0x26c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d004      	beq.n	8001cb2 <HAL_DMA_Abort+0x20e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	@ (8001d14 <HAL_DMA_Abort+0x270>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d132      	bne.n	8001d18 <HAL_DMA_Abort+0x274>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e031      	b.n	8001d1a <HAL_DMA_Abort+0x276>
 8001cb6:	bf00      	nop
 8001cb8:	40020010 	.word	0x40020010
 8001cbc:	40020028 	.word	0x40020028
 8001cc0:	40020040 	.word	0x40020040
 8001cc4:	40020058 	.word	0x40020058
 8001cc8:	40020070 	.word	0x40020070
 8001ccc:	40020088 	.word	0x40020088
 8001cd0:	400200a0 	.word	0x400200a0
 8001cd4:	400200b8 	.word	0x400200b8
 8001cd8:	40020410 	.word	0x40020410
 8001cdc:	40020428 	.word	0x40020428
 8001ce0:	40020440 	.word	0x40020440
 8001ce4:	40020458 	.word	0x40020458
 8001ce8:	40020470 	.word	0x40020470
 8001cec:	40020488 	.word	0x40020488
 8001cf0:	400204a0 	.word	0x400204a0
 8001cf4:	400204b8 	.word	0x400204b8
 8001cf8:	58025408 	.word	0x58025408
 8001cfc:	5802541c 	.word	0x5802541c
 8001d00:	58025430 	.word	0x58025430
 8001d04:	58025444 	.word	0x58025444
 8001d08:	58025458 	.word	0x58025458
 8001d0c:	5802546c 	.word	0x5802546c
 8001d10:	58025480 	.word	0x58025480
 8001d14:	58025494 	.word	0x58025494
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6d      	ldr	r2, [pc, #436]	@ (8001ee8 <HAL_DMA_Abort+0x444>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d04a      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001eec <HAL_DMA_Abort+0x448>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d045      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6a      	ldr	r2, [pc, #424]	@ (8001ef0 <HAL_DMA_Abort+0x44c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d040      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a68      	ldr	r2, [pc, #416]	@ (8001ef4 <HAL_DMA_Abort+0x450>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d03b      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a67      	ldr	r2, [pc, #412]	@ (8001ef8 <HAL_DMA_Abort+0x454>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d036      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a65      	ldr	r2, [pc, #404]	@ (8001efc <HAL_DMA_Abort+0x458>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d031      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a64      	ldr	r2, [pc, #400]	@ (8001f00 <HAL_DMA_Abort+0x45c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d02c      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a62      	ldr	r2, [pc, #392]	@ (8001f04 <HAL_DMA_Abort+0x460>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d027      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a61      	ldr	r2, [pc, #388]	@ (8001f08 <HAL_DMA_Abort+0x464>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d022      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5f      	ldr	r2, [pc, #380]	@ (8001f0c <HAL_DMA_Abort+0x468>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a5e      	ldr	r2, [pc, #376]	@ (8001f10 <HAL_DMA_Abort+0x46c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d018      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a5c      	ldr	r2, [pc, #368]	@ (8001f14 <HAL_DMA_Abort+0x470>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d013      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a5b      	ldr	r2, [pc, #364]	@ (8001f18 <HAL_DMA_Abort+0x474>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d00e      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a59      	ldr	r2, [pc, #356]	@ (8001f1c <HAL_DMA_Abort+0x478>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a58      	ldr	r2, [pc, #352]	@ (8001f20 <HAL_DMA_Abort+0x47c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d004      	beq.n	8001dce <HAL_DMA_Abort+0x32a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a56      	ldr	r2, [pc, #344]	@ (8001f24 <HAL_DMA_Abort+0x480>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d108      	bne.n	8001de0 <HAL_DMA_Abort+0x33c>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_DMA_Abort+0x34c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001df0:	e013      	b.n	8001e1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001df2:	f7ff fcf7 	bl	80017e4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d90c      	bls.n	8001e1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e12d      	b.n	8002076 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e5      	bne.n	8001df2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ee8 <HAL_DMA_Abort+0x444>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2d      	ldr	r2, [pc, #180]	@ (8001eec <HAL_DMA_Abort+0x448>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef0 <HAL_DMA_Abort+0x44c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef4 <HAL_DMA_Abort+0x450>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a29      	ldr	r2, [pc, #164]	@ (8001ef8 <HAL_DMA_Abort+0x454>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	@ (8001efc <HAL_DMA_Abort+0x458>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a26      	ldr	r2, [pc, #152]	@ (8001f00 <HAL_DMA_Abort+0x45c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a24      	ldr	r2, [pc, #144]	@ (8001f04 <HAL_DMA_Abort+0x460>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_DMA_Abort+0x464>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <HAL_DMA_Abort+0x468>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a20      	ldr	r2, [pc, #128]	@ (8001f10 <HAL_DMA_Abort+0x46c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1e      	ldr	r2, [pc, #120]	@ (8001f14 <HAL_DMA_Abort+0x470>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f18 <HAL_DMA_Abort+0x474>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1b      	ldr	r2, [pc, #108]	@ (8001f1c <HAL_DMA_Abort+0x478>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_DMA_Abort+0x47c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Abort+0x422>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_DMA_Abort+0x480>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_DMA_Abort+0x426>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_DMA_Abort+0x428>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d02b      	beq.n	8001f28 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	223f      	movs	r2, #63	@ 0x3f
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	e02a      	b.n	8001f3e <HAL_DMA_Abort+0x49a>
 8001ee8:	40020010 	.word	0x40020010
 8001eec:	40020028 	.word	0x40020028
 8001ef0:	40020040 	.word	0x40020040
 8001ef4:	40020058 	.word	0x40020058
 8001ef8:	40020070 	.word	0x40020070
 8001efc:	40020088 	.word	0x40020088
 8001f00:	400200a0 	.word	0x400200a0
 8001f04:	400200b8 	.word	0x400200b8
 8001f08:	40020410 	.word	0x40020410
 8001f0c:	40020428 	.word	0x40020428
 8001f10:	40020440 	.word	0x40020440
 8001f14:	40020458 	.word	0x40020458
 8001f18:	40020470 	.word	0x40020470
 8001f1c:	40020488 	.word	0x40020488
 8001f20:	400204a0 	.word	0x400204a0
 8001f24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	2201      	movs	r2, #1
 8001f38:	409a      	lsls	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4f      	ldr	r2, [pc, #316]	@ (8002080 <HAL_DMA_Abort+0x5dc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d072      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002084 <HAL_DMA_Abort+0x5e0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d06d      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a4c      	ldr	r2, [pc, #304]	@ (8002088 <HAL_DMA_Abort+0x5e4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d068      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	@ (800208c <HAL_DMA_Abort+0x5e8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d063      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a49      	ldr	r2, [pc, #292]	@ (8002090 <HAL_DMA_Abort+0x5ec>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d05e      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a47      	ldr	r2, [pc, #284]	@ (8002094 <HAL_DMA_Abort+0x5f0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d059      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a46      	ldr	r2, [pc, #280]	@ (8002098 <HAL_DMA_Abort+0x5f4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d054      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a44      	ldr	r2, [pc, #272]	@ (800209c <HAL_DMA_Abort+0x5f8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d04f      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a43      	ldr	r2, [pc, #268]	@ (80020a0 <HAL_DMA_Abort+0x5fc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d04a      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a41      	ldr	r2, [pc, #260]	@ (80020a4 <HAL_DMA_Abort+0x600>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d045      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a40      	ldr	r2, [pc, #256]	@ (80020a8 <HAL_DMA_Abort+0x604>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d040      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80020ac <HAL_DMA_Abort+0x608>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d03b      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a3d      	ldr	r2, [pc, #244]	@ (80020b0 <HAL_DMA_Abort+0x60c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d036      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80020b4 <HAL_DMA_Abort+0x610>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d031      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a3a      	ldr	r2, [pc, #232]	@ (80020b8 <HAL_DMA_Abort+0x614>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d02c      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a38      	ldr	r2, [pc, #224]	@ (80020bc <HAL_DMA_Abort+0x618>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d027      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a37      	ldr	r2, [pc, #220]	@ (80020c0 <HAL_DMA_Abort+0x61c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a35      	ldr	r2, [pc, #212]	@ (80020c4 <HAL_DMA_Abort+0x620>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a34      	ldr	r2, [pc, #208]	@ (80020c8 <HAL_DMA_Abort+0x624>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d018      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a32      	ldr	r2, [pc, #200]	@ (80020cc <HAL_DMA_Abort+0x628>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a31      	ldr	r2, [pc, #196]	@ (80020d0 <HAL_DMA_Abort+0x62c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a2f      	ldr	r2, [pc, #188]	@ (80020d4 <HAL_DMA_Abort+0x630>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_DMA_Abort+0x634>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_DMA_Abort+0x58a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <HAL_DMA_Abort+0x638>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_DMA_Abort+0x58e>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_DMA_Abort+0x590>
 8002032:	2300      	movs	r3, #0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d015      	beq.n	8002064 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002040:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002054:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002058:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002062:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40020010 	.word	0x40020010
 8002084:	40020028 	.word	0x40020028
 8002088:	40020040 	.word	0x40020040
 800208c:	40020058 	.word	0x40020058
 8002090:	40020070 	.word	0x40020070
 8002094:	40020088 	.word	0x40020088
 8002098:	400200a0 	.word	0x400200a0
 800209c:	400200b8 	.word	0x400200b8
 80020a0:	40020410 	.word	0x40020410
 80020a4:	40020428 	.word	0x40020428
 80020a8:	40020440 	.word	0x40020440
 80020ac:	40020458 	.word	0x40020458
 80020b0:	40020470 	.word	0x40020470
 80020b4:	40020488 	.word	0x40020488
 80020b8:	400204a0 	.word	0x400204a0
 80020bc:	400204b8 	.word	0x400204b8
 80020c0:	58025408 	.word	0x58025408
 80020c4:	5802541c 	.word	0x5802541c
 80020c8:	58025430 	.word	0x58025430
 80020cc:	58025444 	.word	0x58025444
 80020d0:	58025458 	.word	0x58025458
 80020d4:	5802546c 	.word	0x5802546c
 80020d8:	58025480 	.word	0x58025480
 80020dc:	58025494 	.word	0x58025494

080020e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e237      	b.n	8002562 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d004      	beq.n	8002108 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2280      	movs	r2, #128	@ 0x80
 8002102:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e22c      	b.n	8002562 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5c      	ldr	r2, [pc, #368]	@ (8002280 <HAL_DMA_Abort_IT+0x1a0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d04a      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5b      	ldr	r2, [pc, #364]	@ (8002284 <HAL_DMA_Abort_IT+0x1a4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d045      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a59      	ldr	r2, [pc, #356]	@ (8002288 <HAL_DMA_Abort_IT+0x1a8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d040      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a58      	ldr	r2, [pc, #352]	@ (800228c <HAL_DMA_Abort_IT+0x1ac>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d03b      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a56      	ldr	r2, [pc, #344]	@ (8002290 <HAL_DMA_Abort_IT+0x1b0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d036      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a55      	ldr	r2, [pc, #340]	@ (8002294 <HAL_DMA_Abort_IT+0x1b4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d031      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a53      	ldr	r2, [pc, #332]	@ (8002298 <HAL_DMA_Abort_IT+0x1b8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d02c      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a52      	ldr	r2, [pc, #328]	@ (800229c <HAL_DMA_Abort_IT+0x1bc>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d027      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a50      	ldr	r2, [pc, #320]	@ (80022a0 <HAL_DMA_Abort_IT+0x1c0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d022      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a4f      	ldr	r2, [pc, #316]	@ (80022a4 <HAL_DMA_Abort_IT+0x1c4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d01d      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a4d      	ldr	r2, [pc, #308]	@ (80022a8 <HAL_DMA_Abort_IT+0x1c8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d018      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a4c      	ldr	r2, [pc, #304]	@ (80022ac <HAL_DMA_Abort_IT+0x1cc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d013      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4a      	ldr	r2, [pc, #296]	@ (80022b0 <HAL_DMA_Abort_IT+0x1d0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00e      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a49      	ldr	r2, [pc, #292]	@ (80022b4 <HAL_DMA_Abort_IT+0x1d4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a47      	ldr	r2, [pc, #284]	@ (80022b8 <HAL_DMA_Abort_IT+0x1d8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_DMA_Abort_IT+0xc8>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a46      	ldr	r2, [pc, #280]	@ (80022bc <HAL_DMA_Abort_IT+0x1dc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_DMA_Abort_IT+0xcc>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <HAL_DMA_Abort_IT+0xce>
 80021ac:	2300      	movs	r3, #0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8086 	beq.w	80022c0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2204      	movs	r2, #4
 80021b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a2f      	ldr	r2, [pc, #188]	@ (8002280 <HAL_DMA_Abort_IT+0x1a0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04a      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a2e      	ldr	r2, [pc, #184]	@ (8002284 <HAL_DMA_Abort_IT+0x1a4>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d045      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002288 <HAL_DMA_Abort_IT+0x1a8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d040      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2b      	ldr	r2, [pc, #172]	@ (800228c <HAL_DMA_Abort_IT+0x1ac>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d03b      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a29      	ldr	r2, [pc, #164]	@ (8002290 <HAL_DMA_Abort_IT+0x1b0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d036      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a28      	ldr	r2, [pc, #160]	@ (8002294 <HAL_DMA_Abort_IT+0x1b4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d031      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a26      	ldr	r2, [pc, #152]	@ (8002298 <HAL_DMA_Abort_IT+0x1b8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02c      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a25      	ldr	r2, [pc, #148]	@ (800229c <HAL_DMA_Abort_IT+0x1bc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d027      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a23      	ldr	r2, [pc, #140]	@ (80022a0 <HAL_DMA_Abort_IT+0x1c0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d022      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a22      	ldr	r2, [pc, #136]	@ (80022a4 <HAL_DMA_Abort_IT+0x1c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d01d      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a20      	ldr	r2, [pc, #128]	@ (80022a8 <HAL_DMA_Abort_IT+0x1c8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d018      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1f      	ldr	r2, [pc, #124]	@ (80022ac <HAL_DMA_Abort_IT+0x1cc>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d013      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <HAL_DMA_Abort_IT+0x1d0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00e      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1c      	ldr	r2, [pc, #112]	@ (80022b4 <HAL_DMA_Abort_IT+0x1d4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1a      	ldr	r2, [pc, #104]	@ (80022b8 <HAL_DMA_Abort_IT+0x1d8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d004      	beq.n	800225c <HAL_DMA_Abort_IT+0x17c>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <HAL_DMA_Abort_IT+0x1dc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d108      	bne.n	800226e <HAL_DMA_Abort_IT+0x18e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e178      	b.n	8002560 <HAL_DMA_Abort_IT+0x480>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e16f      	b.n	8002560 <HAL_DMA_Abort_IT+0x480>
 8002280:	40020010 	.word	0x40020010
 8002284:	40020028 	.word	0x40020028
 8002288:	40020040 	.word	0x40020040
 800228c:	40020058 	.word	0x40020058
 8002290:	40020070 	.word	0x40020070
 8002294:	40020088 	.word	0x40020088
 8002298:	400200a0 	.word	0x400200a0
 800229c:	400200b8 	.word	0x400200b8
 80022a0:	40020410 	.word	0x40020410
 80022a4:	40020428 	.word	0x40020428
 80022a8:	40020440 	.word	0x40020440
 80022ac:	40020458 	.word	0x40020458
 80022b0:	40020470 	.word	0x40020470
 80022b4:	40020488 	.word	0x40020488
 80022b8:	400204a0 	.word	0x400204a0
 80022bc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 020e 	bic.w	r2, r2, #14
 80022ce:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6c      	ldr	r2, [pc, #432]	@ (8002488 <HAL_DMA_Abort_IT+0x3a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d04a      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6b      	ldr	r2, [pc, #428]	@ (800248c <HAL_DMA_Abort_IT+0x3ac>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d045      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a69      	ldr	r2, [pc, #420]	@ (8002490 <HAL_DMA_Abort_IT+0x3b0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d040      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a68      	ldr	r2, [pc, #416]	@ (8002494 <HAL_DMA_Abort_IT+0x3b4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d03b      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a66      	ldr	r2, [pc, #408]	@ (8002498 <HAL_DMA_Abort_IT+0x3b8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d036      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a65      	ldr	r2, [pc, #404]	@ (800249c <HAL_DMA_Abort_IT+0x3bc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d031      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a63      	ldr	r2, [pc, #396]	@ (80024a0 <HAL_DMA_Abort_IT+0x3c0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02c      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a62      	ldr	r2, [pc, #392]	@ (80024a4 <HAL_DMA_Abort_IT+0x3c4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d027      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a60      	ldr	r2, [pc, #384]	@ (80024a8 <HAL_DMA_Abort_IT+0x3c8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d022      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5f      	ldr	r2, [pc, #380]	@ (80024ac <HAL_DMA_Abort_IT+0x3cc>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d01d      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a5d      	ldr	r2, [pc, #372]	@ (80024b0 <HAL_DMA_Abort_IT+0x3d0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d018      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a5c      	ldr	r2, [pc, #368]	@ (80024b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d013      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a5a      	ldr	r2, [pc, #360]	@ (80024b8 <HAL_DMA_Abort_IT+0x3d8>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00e      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a59      	ldr	r2, [pc, #356]	@ (80024bc <HAL_DMA_Abort_IT+0x3dc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d009      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a57      	ldr	r2, [pc, #348]	@ (80024c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d004      	beq.n	8002370 <HAL_DMA_Abort_IT+0x290>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a56      	ldr	r2, [pc, #344]	@ (80024c4 <HAL_DMA_Abort_IT+0x3e4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d108      	bne.n	8002382 <HAL_DMA_Abort_IT+0x2a2>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e007      	b.n	8002392 <HAL_DMA_Abort_IT+0x2b2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3c      	ldr	r2, [pc, #240]	@ (8002488 <HAL_DMA_Abort_IT+0x3a8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d072      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a3a      	ldr	r2, [pc, #232]	@ (800248c <HAL_DMA_Abort_IT+0x3ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d06d      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a39      	ldr	r2, [pc, #228]	@ (8002490 <HAL_DMA_Abort_IT+0x3b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d068      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a37      	ldr	r2, [pc, #220]	@ (8002494 <HAL_DMA_Abort_IT+0x3b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d063      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a36      	ldr	r2, [pc, #216]	@ (8002498 <HAL_DMA_Abort_IT+0x3b8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d05e      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a34      	ldr	r2, [pc, #208]	@ (800249c <HAL_DMA_Abort_IT+0x3bc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d059      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a33      	ldr	r2, [pc, #204]	@ (80024a0 <HAL_DMA_Abort_IT+0x3c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d054      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a31      	ldr	r2, [pc, #196]	@ (80024a4 <HAL_DMA_Abort_IT+0x3c4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d04f      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a30      	ldr	r2, [pc, #192]	@ (80024a8 <HAL_DMA_Abort_IT+0x3c8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d04a      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a2e      	ldr	r2, [pc, #184]	@ (80024ac <HAL_DMA_Abort_IT+0x3cc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d045      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2d      	ldr	r2, [pc, #180]	@ (80024b0 <HAL_DMA_Abort_IT+0x3d0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d040      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2b      	ldr	r2, [pc, #172]	@ (80024b4 <HAL_DMA_Abort_IT+0x3d4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d03b      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2a      	ldr	r2, [pc, #168]	@ (80024b8 <HAL_DMA_Abort_IT+0x3d8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d036      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a28      	ldr	r2, [pc, #160]	@ (80024bc <HAL_DMA_Abort_IT+0x3dc>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d031      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a27      	ldr	r2, [pc, #156]	@ (80024c0 <HAL_DMA_Abort_IT+0x3e0>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d02c      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a25      	ldr	r2, [pc, #148]	@ (80024c4 <HAL_DMA_Abort_IT+0x3e4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d027      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a24      	ldr	r2, [pc, #144]	@ (80024c8 <HAL_DMA_Abort_IT+0x3e8>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d022      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a22      	ldr	r2, [pc, #136]	@ (80024cc <HAL_DMA_Abort_IT+0x3ec>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01d      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a21      	ldr	r2, [pc, #132]	@ (80024d0 <HAL_DMA_Abort_IT+0x3f0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d018      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1f      	ldr	r2, [pc, #124]	@ (80024d4 <HAL_DMA_Abort_IT+0x3f4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	@ (80024d8 <HAL_DMA_Abort_IT+0x3f8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <HAL_DMA_Abort_IT+0x3fc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d009      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <HAL_DMA_Abort_IT+0x400>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_Abort_IT+0x3a2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a19      	ldr	r2, [pc, #100]	@ (80024e4 <HAL_DMA_Abort_IT+0x404>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d132      	bne.n	80024e8 <HAL_DMA_Abort_IT+0x408>
 8002482:	2301      	movs	r3, #1
 8002484:	e031      	b.n	80024ea <HAL_DMA_Abort_IT+0x40a>
 8002486:	bf00      	nop
 8002488:	40020010 	.word	0x40020010
 800248c:	40020028 	.word	0x40020028
 8002490:	40020040 	.word	0x40020040
 8002494:	40020058 	.word	0x40020058
 8002498:	40020070 	.word	0x40020070
 800249c:	40020088 	.word	0x40020088
 80024a0:	400200a0 	.word	0x400200a0
 80024a4:	400200b8 	.word	0x400200b8
 80024a8:	40020410 	.word	0x40020410
 80024ac:	40020428 	.word	0x40020428
 80024b0:	40020440 	.word	0x40020440
 80024b4:	40020458 	.word	0x40020458
 80024b8:	40020470 	.word	0x40020470
 80024bc:	40020488 	.word	0x40020488
 80024c0:	400204a0 	.word	0x400204a0
 80024c4:	400204b8 	.word	0x400204b8
 80024c8:	58025408 	.word	0x58025408
 80024cc:	5802541c 	.word	0x5802541c
 80024d0:	58025430 	.word	0x58025430
 80024d4:	58025444 	.word	0x58025444
 80024d8:	58025458 	.word	0x58025458
 80024dc:	5802546c 	.word	0x5802546c
 80024e0:	58025480 	.word	0x58025480
 80024e4:	58025494 	.word	0x58025494
 80024e8:	2300      	movs	r3, #0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d028      	beq.n	8002540 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024fc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2201      	movs	r2, #1
 800250e:	409a      	lsls	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800251c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00c      	beq.n	8002540 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002534:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800253e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop

0800256c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800257a:	b2db      	uxtb	r3, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0e3      	b.n	8002762 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d106      	bne.n	80025b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2223      	movs	r2, #35	@ 0x23
 80025a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7fe fd27 	bl	8001000 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	4b6e      	ldr	r3, [pc, #440]	@ (800276c <HAL_ETH_Init+0x1e4>)
 80025b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025b8:	4a6c      	ldr	r2, [pc, #432]	@ (800276c <HAL_ETH_Init+0x1e4>)
 80025ba:	f043 0302 	orr.w	r3, r3, #2
 80025be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80025c2:	4b6a      	ldr	r3, [pc, #424]	@ (800276c <HAL_ETH_Init+0x1e4>)
 80025c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7a1b      	ldrb	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d103      	bne.n	80025e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80025d8:	2000      	movs	r0, #0
 80025da:	f7ff f93f 	bl	800185c <HAL_SYSCFG_ETHInterfaceSelect>
 80025de:	e003      	b.n	80025e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80025e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80025e4:	f7ff f93a 	bl	800185c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80025e8:	4b61      	ldr	r3, [pc, #388]	@ (8002770 <HAL_ETH_Init+0x1e8>)
 80025ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002602:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002604:	f7ff f8ee 	bl	80017e4 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800260a:	e011      	b.n	8002630 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800260c:	f7ff f8ea 	bl	80017e4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800261a:	d909      	bls.n	8002630 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2204      	movs	r2, #4
 8002620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	22e0      	movs	r2, #224	@ 0xe0
 8002628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e098      	b.n	8002762 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e4      	bne.n	800260c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f89e 	bl	8002784 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002648:	f003 fec0 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 800264c:	4603      	mov	r3, r0
 800264e:	4a49      	ldr	r2, [pc, #292]	@ (8002774 <HAL_ETH_Init+0x1ec>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9a      	lsrs	r2, r3, #18
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3a01      	subs	r2, #1
 800265c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fa81 	bl	8002b68 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800266e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002672:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800267e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002682:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	22e0      	movs	r2, #224	@ 0xe0
 800269e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e05d      	b.n	8002762 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80026b2:	4b31      	ldr	r3, [pc, #196]	@ (8002778 <HAL_ETH_Init+0x1f0>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6952      	ldr	r2, [r2, #20]
 80026ba:	0051      	lsls	r1, r2, #1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026c6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fae9 	bl	8002ca2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fb2f 	bl	8002d34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	3305      	adds	r3, #5
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	021a      	lsls	r2, r3, #8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	3303      	adds	r3, #3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	061a      	lsls	r2, r3, #24
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	3302      	adds	r3, #2
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	041b      	lsls	r3, r3, #16
 8002708:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	3301      	adds	r3, #1
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002714:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002722:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002724:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_ETH_Init+0x1f4>)
 8002736:	430b      	orrs	r3, r1
 8002738:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <HAL_ETH_Init+0x1f8>)
 800274a:	430b      	orrs	r3, r1
 800274c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2210      	movs	r2, #16
 800275c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	58024400 	.word	0x58024400
 8002770:	58000400 	.word	0x58000400
 8002774:	431bde83 	.word	0x431bde83
 8002778:	ffff8001 	.word	0xffff8001
 800277c:	0c020060 	.word	0x0c020060
 8002780:	0c20c000 	.word	0x0c20c000

08002784 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002794:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800279c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800279e:	f003 fe15 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 80027a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d804      	bhi.n	80027b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e022      	b.n	80027fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4a16      	ldr	r2, [pc, #88]	@ (8002814 <HAL_ETH_SetMDIOClockRange+0x90>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d204      	bcs.n	80027c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e019      	b.n	80027fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4a13      	ldr	r2, [pc, #76]	@ (8002818 <HAL_ETH_SetMDIOClockRange+0x94>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d915      	bls.n	80027fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4a12      	ldr	r2, [pc, #72]	@ (800281c <HAL_ETH_SetMDIOClockRange+0x98>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d804      	bhi.n	80027e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e00c      	b.n	80027fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002820 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d804      	bhi.n	80027f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e003      	b.n	80027fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	02160ebf 	.word	0x02160ebf
 8002814:	03938700 	.word	0x03938700
 8002818:	05f5e0ff 	.word	0x05f5e0ff
 800281c:	08f0d17f 	.word	0x08f0d17f
 8002820:	0ee6b27f 	.word	0x0ee6b27f

08002824 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002836:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	791b      	ldrb	r3, [r3, #4]
 800283c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800283e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7b1b      	ldrb	r3, [r3, #12]
 8002844:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	7b5b      	ldrb	r3, [r3, #13]
 800284c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800284e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	7b9b      	ldrb	r3, [r3, #14]
 8002854:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	7bdb      	ldrb	r3, [r3, #15]
 800285c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800285e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	7c12      	ldrb	r2, [r2, #16]
 8002864:	2a00      	cmp	r2, #0
 8002866:	d102      	bne.n	800286e <ETH_SetMACConfig+0x4a>
 8002868:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800286c:	e000      	b.n	8002870 <ETH_SetMACConfig+0x4c>
 800286e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002870:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	7c52      	ldrb	r2, [r2, #17]
 8002876:	2a00      	cmp	r2, #0
 8002878:	d102      	bne.n	8002880 <ETH_SetMACConfig+0x5c>
 800287a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800287e:	e000      	b.n	8002882 <ETH_SetMACConfig+0x5e>
 8002880:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	7c9b      	ldrb	r3, [r3, #18]
 8002888:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800288a:	431a      	orrs	r2, r3
               macconf->Speed |
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002890:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002896:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	7f1b      	ldrb	r3, [r3, #28]
 800289c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800289e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	7f5b      	ldrb	r3, [r3, #29]
 80028a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80028a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	7f92      	ldrb	r2, [r2, #30]
 80028ac:	2a00      	cmp	r2, #0
 80028ae:	d102      	bne.n	80028b6 <ETH_SetMACConfig+0x92>
 80028b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028b4:	e000      	b.n	80028b8 <ETH_SetMACConfig+0x94>
 80028b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80028b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	7fdb      	ldrb	r3, [r3, #31]
 80028be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80028c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028c8:	2a00      	cmp	r2, #0
 80028ca:	d102      	bne.n	80028d2 <ETH_SetMACConfig+0xae>
 80028cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028d0:	e000      	b.n	80028d4 <ETH_SetMACConfig+0xb0>
 80028d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80028d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80028da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80028e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b56      	ldr	r3, [pc, #344]	@ (8002a50 <ETH_SetMACConfig+0x22c>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	68f9      	ldr	r1, [r7, #12]
 80028fe:	430b      	orrs	r3, r1
 8002900:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002906:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800290e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002910:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002918:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800291a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002922:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002924:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800292c:	2a00      	cmp	r2, #0
 800292e:	d102      	bne.n	8002936 <ETH_SetMACConfig+0x112>
 8002930:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002934:	e000      	b.n	8002938 <ETH_SetMACConfig+0x114>
 8002936:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002938:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	4b42      	ldr	r3, [pc, #264]	@ (8002a54 <ETH_SetMACConfig+0x230>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	68f9      	ldr	r1, [r7, #12]
 8002952:	430b      	orrs	r3, r1
 8002954:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800295c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a58 <ETH_SetMACConfig+0x234>)
 800296e:	4013      	ands	r3, r2
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6812      	ldr	r2, [r2, #0]
 8002974:	68f9      	ldr	r1, [r7, #12]
 8002976:	430b      	orrs	r3, r1
 8002978:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002980:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002986:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800298e:	2a00      	cmp	r2, #0
 8002990:	d101      	bne.n	8002996 <ETH_SetMACConfig+0x172>
 8002992:	2280      	movs	r2, #128	@ 0x80
 8002994:	e000      	b.n	8002998 <ETH_SetMACConfig+0x174>
 8002996:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002998:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029aa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80029ae:	4013      	ands	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	68f9      	ldr	r1, [r7, #12]
 80029b6:	430b      	orrs	r3, r1
 80029b8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80029c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80029c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	f023 0103 	bic.w	r1, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80029ee:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002a0a:	2a00      	cmp	r2, #0
 8002a0c:	d101      	bne.n	8002a12 <ETH_SetMACConfig+0x1ee>
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	e000      	b.n	8002a14 <ETH_SetMACConfig+0x1f0>
 8002a12:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002a14:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002a1c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002a26:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002a34:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	00048083 	.word	0x00048083
 8002a54:	c0f88000 	.word	0xc0f88000
 8002a58:	fffffef0 	.word	0xfffffef0

08002a5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4b38      	ldr	r3, [pc, #224]	@ (8002b54 <ETH_SetDMAConfig+0xf8>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6811      	ldr	r1, [r2, #0]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6812      	ldr	r2, [r2, #0]
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a82:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	791b      	ldrb	r3, [r3, #4]
 8002a88:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a8e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	7b1b      	ldrb	r3, [r3, #12]
 8002a94:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b58 <ETH_SetDMAConfig+0xfc>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ab4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	7b5b      	ldrb	r3, [r3, #13]
 8002aba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002acc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002ad0:	4b22      	ldr	r3, [pc, #136]	@ (8002b5c <ETH_SetDMAConfig+0x100>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	68f9      	ldr	r1, [r7, #12]
 8002ada:	430b      	orrs	r3, r1
 8002adc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ae0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	7d1b      	ldrb	r3, [r3, #20]
 8002aec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002aee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	7f5b      	ldrb	r3, [r3, #29]
 8002af4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b02:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002b06:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <ETH_SetDMAConfig+0x104>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b16:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	7f1b      	ldrb	r3, [r3, #28]
 8002b1e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b30:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002b34:	4b0b      	ldr	r3, [pc, #44]	@ (8002b64 <ETH_SetDMAConfig+0x108>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b44:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	ffff87fd 	.word	0xffff87fd
 8002b58:	ffff2ffe 	.word	0xffff2ffe
 8002b5c:	fffec000 	.word	0xfffec000
 8002b60:	ffc0efef 	.word	0xffc0efef
 8002b64:	7fc0ffff 	.word	0x7fc0ffff

08002b68 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0a4      	sub	sp, #144	@ 0x90
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b76:	2300      	movs	r3, #0
 8002b78:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002bc0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002bc4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002be2:	2300      	movs	r3, #0
 8002be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002bea:	2300      	movs	r3, #0
 8002bec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c00:	2320      	movs	r3, #32
 8002c02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002c06:	2301      	movs	r3, #1
 8002c08:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002c12:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002c24:	2302      	movs	r3, #2
 8002c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002c42:	2300      	movs	r3, #0
 8002c44:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fde6 	bl	8002824 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c72:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002c88:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002c8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c8e:	f107 0308 	add.w	r3, r7, #8
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fee1 	bl	8002a5c <ETH_SetDMAConfig>
}
 8002c9a:	bf00      	nop
 8002c9c:	3790      	adds	r7, #144	@ 0x90
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b085      	sub	sp, #20
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e01d      	b.n	8002cec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68d9      	ldr	r1, [r3, #12]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	3206      	adds	r2, #6
 8002ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d9de      	bls.n	8002cb0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d00:	461a      	mov	r2, r3
 8002d02:	2303      	movs	r3, #3
 8002d04:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d14:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d24:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e023      	b.n	8002d8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2200      	movs	r2, #0
 8002d76:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	3212      	adds	r2, #18
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d9d8      	bls.n	8002d42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002db6:	461a      	mov	r2, r3
 8002db8:	2303      	movs	r3, #3
 8002dba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dde:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002de2:	bf00      	nop
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dfe:	4b89      	ldr	r3, [pc, #548]	@ (8003024 <HAL_GPIO_Init+0x234>)
 8002e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002e02:	e194      	b.n	800312e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8186 	beq.w	8003128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d005      	beq.n	8002e34 <HAL_GPIO_Init+0x44>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d130      	bne.n	8002e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0201 	and.w	r2, r3, #1
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d017      	beq.n	8002ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d123      	bne.n	8002f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4013      	ands	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	69b9      	ldr	r1, [r7, #24]
 8002f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80e0 	beq.w	8003128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <HAL_GPIO_Init+0x238>)
 8002f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <HAL_GPIO_Init+0x238>)
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <HAL_GPIO_Init+0x238>)
 8002f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f86:	4a29      	ldr	r2, [pc, #164]	@ (800302c <HAL_GPIO_Init+0x23c>)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a20      	ldr	r2, [pc, #128]	@ (8003030 <HAL_GPIO_Init+0x240>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d052      	beq.n	8003058 <HAL_GPIO_Init+0x268>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003034 <HAL_GPIO_Init+0x244>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d031      	beq.n	800301e <HAL_GPIO_Init+0x22e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8003038 <HAL_GPIO_Init+0x248>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02b      	beq.n	800301a <HAL_GPIO_Init+0x22a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800303c <HAL_GPIO_Init+0x24c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d025      	beq.n	8003016 <HAL_GPIO_Init+0x226>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8003040 <HAL_GPIO_Init+0x250>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d01f      	beq.n	8003012 <HAL_GPIO_Init+0x222>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003044 <HAL_GPIO_Init+0x254>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_GPIO_Init+0x21e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8003048 <HAL_GPIO_Init+0x258>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d013      	beq.n	800300a <HAL_GPIO_Init+0x21a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	@ (800304c <HAL_GPIO_Init+0x25c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00d      	beq.n	8003006 <HAL_GPIO_Init+0x216>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_GPIO_Init+0x260>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_GPIO_Init+0x212>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a17      	ldr	r2, [pc, #92]	@ (8003054 <HAL_GPIO_Init+0x264>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d101      	bne.n	8002ffe <HAL_GPIO_Init+0x20e>
 8002ffa:	2309      	movs	r3, #9
 8002ffc:	e02d      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8002ffe:	230a      	movs	r3, #10
 8003000:	e02b      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003002:	2308      	movs	r3, #8
 8003004:	e029      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003006:	2307      	movs	r3, #7
 8003008:	e027      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800300a:	2306      	movs	r3, #6
 800300c:	e025      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800300e:	2305      	movs	r3, #5
 8003010:	e023      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003012:	2304      	movs	r3, #4
 8003014:	e021      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003016:	2303      	movs	r3, #3
 8003018:	e01f      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800301a:	2302      	movs	r3, #2
 800301c:	e01d      	b.n	800305a <HAL_GPIO_Init+0x26a>
 800301e:	2301      	movs	r3, #1
 8003020:	e01b      	b.n	800305a <HAL_GPIO_Init+0x26a>
 8003022:	bf00      	nop
 8003024:	58000080 	.word	0x58000080
 8003028:	58024400 	.word	0x58024400
 800302c:	58000400 	.word	0x58000400
 8003030:	58020000 	.word	0x58020000
 8003034:	58020400 	.word	0x58020400
 8003038:	58020800 	.word	0x58020800
 800303c:	58020c00 	.word	0x58020c00
 8003040:	58021000 	.word	0x58021000
 8003044:	58021400 	.word	0x58021400
 8003048:	58021800 	.word	0x58021800
 800304c:	58021c00 	.word	0x58021c00
 8003050:	58022000 	.word	0x58022000
 8003054:	58022400 	.word	0x58022400
 8003058:	2300      	movs	r3, #0
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	f002 0203 	and.w	r2, r2, #3
 8003060:	0092      	lsls	r2, r2, #2
 8003062:	4093      	lsls	r3, r2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800306a:	4938      	ldr	r1, [pc, #224]	@ (800314c <HAL_GPIO_Init+0x35c>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800309e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80030cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	3301      	adds	r3, #1
 800312c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f ae63 	bne.w	8002e04 <HAL_GPIO_Init+0x14>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	3724      	adds	r7, #36	@ 0x24
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	58000400 	.word	0x58000400

08003150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003160:	787b      	ldrb	r3, [r7, #1]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800316c:	e003      	b.n	8003176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	041a      	lsls	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	619a      	str	r2, [r3, #24]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e08b      	b.n	80032ae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d106      	bne.n	80031b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7fd fff6 	bl	800119c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2224      	movs	r2, #36	@ 0x24
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0201 	bic.w	r2, r2, #1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e006      	b.n	800320c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800320a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d108      	bne.n	8003226 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	e007      	b.n	8003236 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003234:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_I2C_Init+0x134>)
 8003242:	430b      	orrs	r3, r1
 8003244:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003254:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69d9      	ldr	r1, [r3, #28]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1a      	ldr	r2, [r3, #32]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	02008000 	.word	0x02008000

080032bc <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	461a      	mov	r2, r3
 80032c8:	460b      	mov	r3, r1
 80032ca:	817b      	strh	r3, [r7, #10]
 80032cc:	4613      	mov	r3, r2
 80032ce:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d17c      	bne.n	80033d6 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ea:	d101      	bne.n	80032f0 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
 80032ee:	e073      	b.n	80033d8 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_I2C_Master_Transmit_IT+0x42>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e06c      	b.n	80033d8 <HAL_I2C_Master_Transmit_IT+0x11c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2221      	movs	r2, #33	@ 0x21
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2210      	movs	r2, #16
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	893a      	ldrh	r2, [r7, #8]
 8003326:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a2d      	ldr	r2, [pc, #180]	@ (80033e0 <HAL_I2C_Master_Transmit_IT+0x124>)
 800332c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a2c      	ldr	r2, [pc, #176]	@ (80033e4 <HAL_I2C_Master_Transmit_IT+0x128>)
 8003332:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2bff      	cmp	r3, #255	@ 0xff
 800333c:	d906      	bls.n	800334c <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	22ff      	movs	r2, #255	@ 0xff
 8003342:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003344:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e007      	b.n	800335c <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800335a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d024      	beq.n	80033ae <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338c:	3b01      	subs	r3, #1
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	b2db      	uxtb	r3, r3
 800339a:	3301      	adds	r3, #1
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <HAL_I2C_Master_Transmit_IT+0x12c>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f001 fd60 	bl	8004e6c <I2C_TransferConfig>
 80033ac:	e009      	b.n	80033c2 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	8979      	ldrh	r1, [r7, #10]
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <HAL_I2C_Master_Transmit_IT+0x12c>)
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f001 fd55 	bl	8004e6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033ca:	2101      	movs	r1, #1
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f001 fd7f 	bl	8004ed0 <I2C_Enable_IRQ>

    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	ffff0000 	.word	0xffff0000
 80033e4:	08003687 	.word	0x08003687
 80033e8:	80002000 	.word	0x80002000

080033ec <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d153      	bne.n	80034b4 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800341a:	d101      	bne.n	8003420 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
 800341e:	e04a      	b.n	80034b6 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_I2C_Master_Receive_IT+0x42>
 800342a:	2302      	movs	r3, #2
 800342c:	e043      	b.n	80034b6 <HAL_I2C_Master_Receive_IT+0xca>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2222      	movs	r2, #34	@ 0x22
 800343a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2210      	movs	r2, #16
 8003442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	893a      	ldrh	r2, [r7, #8]
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a19      	ldr	r2, [pc, #100]	@ (80034c0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800345c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a18      	ldr	r2, [pc, #96]	@ (80034c4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8003462:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2bff      	cmp	r3, #255	@ 0xff
 800346c:	d906      	bls.n	800347c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	22ff      	movs	r2, #255	@ 0xff
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003474:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e007      	b.n	800348c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003486:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800348a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003490:	b2da      	uxtb	r2, r3
 8003492:	8979      	ldrh	r1, [r7, #10]
 8003494:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f001 fce6 	bl	8004e6c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80034a8:	2102      	movs	r1, #2
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f001 fd10 	bl	8004ed0 <I2C_Enable_IRQ>

    return HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80034b4:	2302      	movs	r3, #2
  }
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	ffff0000 	.word	0xffff0000
 80034c4:	08003687 	.word	0x08003687
 80034c8:	80002400 	.word	0x80002400

080034cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
  }
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00f      	beq.n	8003542 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	f043 0201 	orr.w	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003540:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00f      	beq.n	800356c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f043 0208 	orr.w	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	f043 0202 	orr.w	r2, r3, #2
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003594:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 030b 	and.w	r3, r3, #11
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f001 fb05 	bl	8004bb8 <I2C_ITError>
  }
}
 80035ae:	bf00      	nop
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
 800360e:	460b      	mov	r3, r1
 8003610:	70fb      	strb	r3, [r7, #3]
 8003612:	4613      	mov	r3, r2
 8003614:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b088      	sub	sp, #32
 800368a:	af02      	add	r7, sp, #8
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <I2C_Master_ISR_IT+0x1e>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e113      	b.n	80038cc <I2C_Master_ISR_IT+0x246>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f001 fb86 	bl	8004de6 <I2C_Flush_TXDR>
 80036da:	e0e4      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d022      	beq.n	800372c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01d      	beq.n	800372c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	f023 0304 	bic.w	r3, r3, #4
 80036f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800372a:	e0bc      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d128      	bne.n	8003788 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800373c:	2b00      	cmp	r3, #0
 800373e:	d023      	beq.n	8003788 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01e      	beq.n	8003788 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a8 	beq.w	80038a6 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	781a      	ldrb	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003786:	e08e      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378e:	2b00      	cmp	r3, #0
 8003790:	d05c      	beq.n	800384c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003798:	2b00      	cmp	r3, #0
 800379a:	d057      	beq.n	800384c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d040      	beq.n	8003828 <I2C_Master_ISR_IT+0x1a2>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d13c      	bne.n	8003828 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ba:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	2bff      	cmp	r3, #255	@ 0xff
 80037c4:	d90e      	bls.n	80037e4 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	22ff      	movs	r2, #255	@ 0xff
 80037ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	8a79      	ldrh	r1, [r7, #18]
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f001 fb45 	bl	8004e6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e2:	e032      	b.n	800384a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037f6:	d00b      	beq.n	8003810 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003802:	8a79      	ldrh	r1, [r7, #18]
 8003804:	2000      	movs	r0, #0
 8003806:	9000      	str	r0, [sp, #0]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f001 fb2f 	bl	8004e6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380e:	e01c      	b.n	800384a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003814:	b2da      	uxtb	r2, r3
 8003816:	8a79      	ldrh	r1, [r7, #18]
 8003818:	2300      	movs	r3, #0
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f001 fb23 	bl	8004e6c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003826:	e010      	b.n	800384a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003832:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003836:	d003      	beq.n	8003840 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fdb3 	bl	80043a4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800383e:	e032      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003840:	2140      	movs	r1, #64	@ 0x40
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f001 f9b8 	bl	8004bb8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003848:	e02d      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
 800384a:	e02c      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d027      	beq.n	80038a6 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800385c:	2b00      	cmp	r3, #0
 800385e:	d022      	beq.n	80038a6 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d119      	bne.n	800389e <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003874:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003878:	d015      	beq.n	80038a6 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003882:	d108      	bne.n	8003896 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	e007      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fd84 	bl	80043a4 <I2C_ITMasterSeqCplt>
 800389c:	e003      	b.n	80038a6 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800389e:	2140      	movs	r1, #64	@ 0x40
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f001 f989 	bl	8004bb8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f003 0320 	and.w	r3, r3, #32
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80038ba:	6979      	ldr	r1, [r7, #20]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fe0b 	bl	80044d8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <I2C_Slave_ISR_IT+0x24>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e0e2      	b.n	8003abe <I2C_Slave_ISR_IT+0x1ea>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d009      	beq.n	800391e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003914:	6939      	ldr	r1, [r7, #16]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fea6 	bl	8004668 <I2C_ITSlaveCplt>
 800391c:	e0ca      	b.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	d04b      	beq.n	80039c0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800392e:	2b00      	cmp	r3, #0
 8003930:	d046      	beq.n	80039c0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d128      	bne.n	800398e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b28      	cmp	r3, #40	@ 0x28
 8003946:	d108      	bne.n	800395a <I2C_Slave_ISR_IT+0x86>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394e:	d104      	bne.n	800395a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003950:	6939      	ldr	r1, [r7, #16]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f001 f8dc 	bl	8004b10 <I2C_ITListenCplt>
 8003958:	e031      	b.n	80039be <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b29      	cmp	r3, #41	@ 0x29
 8003964:	d10e      	bne.n	8003984 <I2C_Slave_ISR_IT+0xb0>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800396c:	d00a      	beq.n	8003984 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2210      	movs	r2, #16
 8003974:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f001 fa35 	bl	8004de6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fd4e 	bl	800441e <I2C_ITSlaveSeqCplt>
 8003982:	e01c      	b.n	80039be <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2210      	movs	r2, #16
 800398a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800398c:	e08f      	b.n	8003aae <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2210      	movs	r2, #16
 8003994:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	f043 0204 	orr.w	r2, r3, #4
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <I2C_Slave_ISR_IT+0xdc>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039ae:	d17e      	bne.n	8003aae <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b4:	4619      	mov	r1, r3
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f001 f8fe 	bl	8004bb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80039bc:	e077      	b.n	8003aae <I2C_Slave_ISR_IT+0x1da>
 80039be:	e076      	b.n	8003aae <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d02f      	beq.n	8003a2a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d02a      	beq.n	8003a2a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d018      	beq.n	8003a10 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d14b      	bne.n	8003ab2 <I2C_Slave_ISR_IT+0x1de>
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a20:	d047      	beq.n	8003ab2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fcfb 	bl	800441e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003a28:	e043      	b.n	8003ab2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003a3e:	6939      	ldr	r1, [r7, #16]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 fc2b 	bl	800429c <I2C_ITAddrCplt>
 8003a46:	e035      	b.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d030      	beq.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d02b      	beq.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d018      	beq.n	8003a98 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	781a      	ldrb	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003a96:	e00d      	b.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a9e:	d002      	beq.n	8003aa6 <I2C_Slave_ISR_IT+0x1d2>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fcb9 	bl	800441e <I2C_ITSlaveSeqCplt>
 8003aac:	e002      	b.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003ab2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b088      	sub	sp, #32
 8003aca:	af02      	add	r7, sp, #8
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <I2C_Master_ISR_DMA+0x1a>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e0d9      	b.n	8003c94 <I2C_Master_ISR_DMA+0x1ce>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d011      	beq.n	8003b20 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2210      	movs	r2, #16
 8003b02:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b08:	f043 0204 	orr.w	r2, r3, #4
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003b10:	2120      	movs	r1, #32
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f001 f9dc 	bl	8004ed0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f001 f964 	bl	8004de6 <I2C_Flush_TXDR>
 8003b1e:	e0b4      	b.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d071      	beq.n	8003c0e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d06c      	beq.n	8003c0e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b42:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d04e      	beq.n	8003bec <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2bff      	cmp	r3, #255	@ 0xff
 8003b64:	d906      	bls.n	8003b74 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	22ff      	movs	r2, #255	@ 0xff
 8003b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003b6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b70:	617b      	str	r3, [r7, #20]
 8003b72:	e010      	b.n	8003b96 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b86:	d003      	beq.n	8003b90 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	e002      	b.n	8003b96 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003b90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b94:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	8a79      	ldrh	r1, [r7, #18]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f001 f961 	bl	8004e6c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b22      	cmp	r3, #34	@ 0x22
 8003bc6:	d108      	bne.n	8003bda <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bd6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003bd8:	e057      	b.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003be8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003bea:	e04e      	b.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bfa:	d003      	beq.n	8003c04 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fbd1 	bl	80043a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003c02:	e042      	b.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c04:	2140      	movs	r1, #64	@ 0x40
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 ffd6 	bl	8004bb8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003c0c:	e03d      	b.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d028      	beq.n	8003c6a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d023      	beq.n	8003c6a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d119      	bne.n	8003c60 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c3a:	d025      	beq.n	8003c88 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c44:	d108      	bne.n	8003c58 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c54:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003c56:	e017      	b.n	8003c88 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fba3 	bl	80043a4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003c5e:	e013      	b.n	8003c88 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c60:	2140      	movs	r1, #64	@ 0x40
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 ffa8 	bl	8004bb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c68:	e00e      	b.n	8003c88 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003c7e:	68b9      	ldr	r1, [r7, #8]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fc29 	bl	80044d8 <I2C_ITMasterCplt>
 8003c86:	e000      	b.n	8003c8a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003c88:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003ca8:	4b8d      	ldr	r3, [pc, #564]	@ (8003ee0 <I2C_Mem_ISR_DMA+0x244>)
 8003caa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <I2C_Mem_ISR_DMA+0x1e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e10e      	b.n	8003ed8 <I2C_Mem_ISR_DMA+0x23c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d016      	beq.n	8003cfa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2210      	movs	r2, #16
 8003cdc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003cea:	2120      	movs	r1, #32
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f001 f8ef 	bl	8004ed0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f001 f877 	bl	8004de6 <I2C_Flush_TXDR>
 8003cf8:	e0e9      	b.n	8003ece <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00e      	beq.n	8003d22 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d20:	e0d5      	b.n	8003ece <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05f      	beq.n	8003dec <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d05a      	beq.n	8003dec <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d36:	2101      	movs	r1, #1
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f001 f94d 	bl	8004fd8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003d3e:	2110      	movs	r1, #16
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f001 f8c5 	bl	8004ed0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d048      	beq.n	8003de2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2bff      	cmp	r3, #255	@ 0xff
 8003d58:	d910      	bls.n	8003d7c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	22ff      	movs	r2, #255	@ 0xff
 8003d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d64:	b299      	uxth	r1, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f001 f879 	bl	8004e6c <I2C_TransferConfig>
 8003d7a:	e011      	b.n	8003da0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	b299      	uxth	r1, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	2300      	movs	r3, #0
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f001 f866 	bl	8004e6c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b22      	cmp	r3, #34	@ 0x22
 8003dbc:	d108      	bne.n	8003dd0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dcc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003dce:	e07e      	b.n	8003ece <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dde:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003de0:	e075      	b.n	8003ece <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003de2:	2140      	movs	r1, #64	@ 0x40
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fee7 	bl	8004bb8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003dea:	e070      	b.n	8003ece <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d05d      	beq.n	8003eb2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d058      	beq.n	8003eb2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e00:	2101      	movs	r1, #1
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f001 f8e8 	bl	8004fd8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003e08:	2110      	movs	r1, #16
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f001 f860 	bl	8004ed0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b22      	cmp	r3, #34	@ 0x22
 8003e1a:	d101      	bne.n	8003e20 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003e1c:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <I2C_Mem_ISR_DMA+0x248>)
 8003e1e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2bff      	cmp	r3, #255	@ 0xff
 8003e28:	d910      	bls.n	8003e4c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	22ff      	movs	r2, #255	@ 0xff
 8003e2e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e34:	b299      	uxth	r1, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f001 f811 	bl	8004e6c <I2C_TransferConfig>
 8003e4a:	e011      	b.n	8003e70 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5a:	b299      	uxth	r1, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f000 fffe 	bl	8004e6c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b22      	cmp	r3, #34	@ 0x22
 8003e8c:	d108      	bne.n	8003ea0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e9c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e9e:	e016      	b.n	8003ece <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003eae:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003eb0:	e00d      	b.n	8003ece <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fb05 	bl	80044d8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	80002000 	.word	0x80002000
 8003ee4:	80002400 	.word	0x80002400

08003ee8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <I2C_Slave_ISR_DMA+0x24>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e1c2      	b.n	8004292 <I2C_Slave_ISR_DMA+0x3aa>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 fb9c 	bl	8004668 <I2C_ITSlaveCplt>
 8003f30:	e1aa      	b.n	8004288 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8197 	beq.w	800426c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8191 	beq.w	800426c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 817f 	beq.w	800425e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d07b      	beq.n	8004060 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d076      	beq.n	8004060 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a74      	ldr	r2, [pc, #464]	@ (800414c <I2C_Slave_ISR_DMA+0x264>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d059      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a72      	ldr	r2, [pc, #456]	@ (8004150 <I2C_Slave_ISR_DMA+0x268>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d053      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a70      	ldr	r2, [pc, #448]	@ (8004154 <I2C_Slave_ISR_DMA+0x26c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d04d      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004158 <I2C_Slave_ISR_DMA+0x270>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d047      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6c      	ldr	r2, [pc, #432]	@ (800415c <I2C_Slave_ISR_DMA+0x274>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d041      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004160 <I2C_Slave_ISR_DMA+0x278>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d03b      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a68      	ldr	r2, [pc, #416]	@ (8004164 <I2C_Slave_ISR_DMA+0x27c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d035      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a66      	ldr	r2, [pc, #408]	@ (8004168 <I2C_Slave_ISR_DMA+0x280>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02f      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a64      	ldr	r2, [pc, #400]	@ (800416c <I2C_Slave_ISR_DMA+0x284>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d029      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a62      	ldr	r2, [pc, #392]	@ (8004170 <I2C_Slave_ISR_DMA+0x288>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d023      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a60      	ldr	r2, [pc, #384]	@ (8004174 <I2C_Slave_ISR_DMA+0x28c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01d      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8004178 <I2C_Slave_ISR_DMA+0x290>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d017      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a5c      	ldr	r2, [pc, #368]	@ (800417c <I2C_Slave_ISR_DMA+0x294>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d011      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a5a      	ldr	r2, [pc, #360]	@ (8004180 <I2C_Slave_ISR_DMA+0x298>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a58      	ldr	r2, [pc, #352]	@ (8004184 <I2C_Slave_ISR_DMA+0x29c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d005      	beq.n	8004032 <I2C_Slave_ISR_DMA+0x14a>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a56      	ldr	r2, [pc, #344]	@ (8004188 <I2C_Slave_ISR_DMA+0x2a0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d109      	bne.n	8004046 <I2C_Slave_ISR_DMA+0x15e>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	e008      	b.n	8004058 <I2C_Slave_ISR_DMA+0x170>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 800405c:	2301      	movs	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 809e 	beq.w	80041a6 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 8098 	beq.w	80041a6 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a33      	ldr	r2, [pc, #204]	@ (800414c <I2C_Slave_ISR_DMA+0x264>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d059      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a31      	ldr	r2, [pc, #196]	@ (8004150 <I2C_Slave_ISR_DMA+0x268>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d053      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2f      	ldr	r2, [pc, #188]	@ (8004154 <I2C_Slave_ISR_DMA+0x26c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d04d      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004158 <I2C_Slave_ISR_DMA+0x270>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d047      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a2b      	ldr	r2, [pc, #172]	@ (800415c <I2C_Slave_ISR_DMA+0x274>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d041      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a29      	ldr	r2, [pc, #164]	@ (8004160 <I2C_Slave_ISR_DMA+0x278>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d03b      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a27      	ldr	r2, [pc, #156]	@ (8004164 <I2C_Slave_ISR_DMA+0x27c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d035      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a25      	ldr	r2, [pc, #148]	@ (8004168 <I2C_Slave_ISR_DMA+0x280>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02f      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a23      	ldr	r2, [pc, #140]	@ (800416c <I2C_Slave_ISR_DMA+0x284>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d029      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <I2C_Slave_ISR_DMA+0x288>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d023      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004174 <I2C_Slave_ISR_DMA+0x28c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01d      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <I2C_Slave_ISR_DMA+0x290>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d017      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <I2C_Slave_ISR_DMA+0x294>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d011      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a19      	ldr	r2, [pc, #100]	@ (8004180 <I2C_Slave_ISR_DMA+0x298>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00b      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a17      	ldr	r2, [pc, #92]	@ (8004184 <I2C_Slave_ISR_DMA+0x29c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d005      	beq.n	8004136 <I2C_Slave_ISR_DMA+0x24e>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a15      	ldr	r2, [pc, #84]	@ (8004188 <I2C_Slave_ISR_DMA+0x2a0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d12a      	bne.n	800418c <I2C_Slave_ISR_DMA+0x2a4>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e029      	b.n	800419e <I2C_Slave_ISR_DMA+0x2b6>
 800414a:	bf00      	nop
 800414c:	40020010 	.word	0x40020010
 8004150:	40020028 	.word	0x40020028
 8004154:	40020040 	.word	0x40020040
 8004158:	40020058 	.word	0x40020058
 800415c:	40020070 	.word	0x40020070
 8004160:	40020088 	.word	0x40020088
 8004164:	400200a0 	.word	0x400200a0
 8004168:	400200b8 	.word	0x400200b8
 800416c:	40020410 	.word	0x40020410
 8004170:	40020428 	.word	0x40020428
 8004174:	40020440 	.word	0x40020440
 8004178:	40020458 	.word	0x40020458
 800417c:	40020470 	.word	0x40020470
 8004180:	40020488 	.word	0x40020488
 8004184:	400204a0 	.word	0x400204a0
 8004188:	400204b8 	.word	0x400204b8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 80041a2:	2301      	movs	r3, #1
 80041a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d128      	bne.n	80041fe <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b28      	cmp	r3, #40	@ 0x28
 80041b6:	d108      	bne.n	80041ca <I2C_Slave_ISR_DMA+0x2e2>
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041be:	d104      	bne.n	80041ca <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fca4 	bl	8004b10 <I2C_ITListenCplt>
 80041c8:	e048      	b.n	800425c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b29      	cmp	r3, #41	@ 0x29
 80041d4:	d10e      	bne.n	80041f4 <I2C_Slave_ISR_DMA+0x30c>
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041dc:	d00a      	beq.n	80041f4 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2210      	movs	r2, #16
 80041e4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fdfd 	bl	8004de6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f916 	bl	800441e <I2C_ITSlaveSeqCplt>
 80041f2:	e033      	b.n	800425c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80041fc:	e034      	b.n	8004268 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2210      	movs	r2, #16
 8004204:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004218:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <I2C_Slave_ISR_DMA+0x340>
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004226:	d11f      	bne.n	8004268 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004228:	7dfb      	ldrb	r3, [r7, #23]
 800422a:	2b21      	cmp	r3, #33	@ 0x21
 800422c:	d002      	beq.n	8004234 <I2C_Slave_ISR_DMA+0x34c>
 800422e:	7dfb      	ldrb	r3, [r7, #23]
 8004230:	2b29      	cmp	r3, #41	@ 0x29
 8004232:	d103      	bne.n	800423c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2221      	movs	r2, #33	@ 0x21
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
 800423a:	e008      	b.n	800424e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800423c:	7dfb      	ldrb	r3, [r7, #23]
 800423e:	2b22      	cmp	r3, #34	@ 0x22
 8004240:	d002      	beq.n	8004248 <I2C_Slave_ISR_DMA+0x360>
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	2b2a      	cmp	r3, #42	@ 0x2a
 8004246:	d102      	bne.n	800424e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2222      	movs	r2, #34	@ 0x22
 800424c:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	4619      	mov	r1, r3
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fcaf 	bl	8004bb8 <I2C_ITError>
      if (treatdmanack == 1U)
 800425a:	e005      	b.n	8004268 <I2C_Slave_ISR_DMA+0x380>
 800425c:	e004      	b.n	8004268 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2210      	movs	r2, #16
 8004264:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004266:	e00f      	b.n	8004288 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8004268:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800426a:	e00d      	b.n	8004288 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f80a 	bl	800429c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop

0800429c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042b2:	2b28      	cmp	r3, #40	@ 0x28
 80042b4:	d16a      	bne.n	800438c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	0c1b      	lsrs	r3, r3, #16
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80042d4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042e2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80042f0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d138      	bne.n	800436c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80042fa:	897b      	ldrh	r3, [r7, #10]
 80042fc:	09db      	lsrs	r3, r3, #7
 80042fe:	b29a      	uxth	r2, r3
 8004300:	89bb      	ldrh	r3, [r7, #12]
 8004302:	4053      	eors	r3, r2
 8004304:	b29b      	uxth	r3, r3
 8004306:	f003 0306 	and.w	r3, r3, #6
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11c      	bne.n	8004348 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800430e:	897b      	ldrh	r3, [r7, #10]
 8004310:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004320:	2b02      	cmp	r3, #2
 8004322:	d13b      	bne.n	800439c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2208      	movs	r2, #8
 8004330:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800433a:	89ba      	ldrh	r2, [r7, #12]
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	4619      	mov	r1, r3
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff f960 	bl	8003606 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004346:	e029      	b.n	800439c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004348:	893b      	ldrh	r3, [r7, #8]
 800434a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800434c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fe41 	bl	8004fd8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800435e:	89ba      	ldrh	r2, [r7, #12]
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff f94e 	bl	8003606 <HAL_I2C_AddrCallback>
}
 800436a:	e017      	b.n	800439c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800436c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fe31 	bl	8004fd8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800437e:	89ba      	ldrh	r2, [r7, #12]
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff f93e 	bl	8003606 <HAL_I2C_AddrCallback>
}
 800438a:	e007      	b.n	800439c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2208      	movs	r2, #8
 8004392:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b21      	cmp	r3, #33	@ 0x21
 80043be:	d115      	bne.n	80043ec <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2211      	movs	r2, #17
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043d4:	2101      	movs	r1, #1
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fdfe 	bl	8004fd8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff f8e6 	bl	80035b6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043ea:	e014      	b.n	8004416 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2212      	movs	r2, #18
 80043f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004400:	2102      	movs	r1, #2
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fde8 	bl	8004fd8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff f8da 	bl	80035ca <HAL_I2C_MasterRxCpltCallback>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e00c      	b.n	800446c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800446a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b29      	cmp	r3, #41	@ 0x29
 8004476:	d112      	bne.n	800449e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2228      	movs	r2, #40	@ 0x28
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2221      	movs	r2, #33	@ 0x21
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004486:	2101      	movs	r1, #1
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fda5 	bl	8004fd8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff f8a1 	bl	80035de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800449c:	e017      	b.n	80044ce <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044a8:	d111      	bne.n	80044ce <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2228      	movs	r2, #40	@ 0x28
 80044ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2222      	movs	r2, #34	@ 0x22
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044b8:	2102      	movs	r1, #2
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fd8c 	bl	8004fd8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff f892 	bl	80035f2 <HAL_I2C_SlaveRxCpltCallback>
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2220      	movs	r2, #32
 80044ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b21      	cmp	r3, #33	@ 0x21
 80044f8:	d107      	bne.n	800450a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044fa:	2101      	movs	r1, #1
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fd6b 	bl	8004fd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2211      	movs	r2, #17
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
 8004508:	e00c      	b.n	8004524 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b22      	cmp	r3, #34	@ 0x22
 8004514:	d106      	bne.n	8004524 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004516:	2102      	movs	r1, #2
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fd5d 	bl	8004fd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2212      	movs	r2, #18
 8004522:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b4c      	ldr	r3, [pc, #304]	@ (8004660 <I2C_ITMasterCplt+0x188>)
 8004530:	400b      	ands	r3, r1
 8004532:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a49      	ldr	r2, [pc, #292]	@ (8004664 <I2C_ITMasterCplt+0x18c>)
 800453e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	2b00      	cmp	r3, #0
 8004548:	d009      	beq.n	800455e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2210      	movs	r2, #16
 8004550:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b60      	cmp	r3, #96	@ 0x60
 8004568:	d10a      	bne.n	8004580 <I2C_ITMasterCplt+0xa8>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457a:	b2db      	uxtb	r3, r3
 800457c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800457e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fc30 	bl	8004de6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b60      	cmp	r3, #96	@ 0x60
 8004596:	d002      	beq.n	800459e <I2C_ITMasterCplt+0xc6>
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fb07 	bl	8004bb8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045aa:	e054      	b.n	8004656 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b21      	cmp	r3, #33	@ 0x21
 80045b6:	d124      	bne.n	8004602 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d10b      	bne.n	80045ea <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff f827 	bl	8003636 <HAL_I2C_MemTxCpltCallback>
}
 80045e8:	e035      	b.n	8004656 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fe ffdb 	bl	80035b6 <HAL_I2C_MasterTxCpltCallback>
}
 8004600:	e029      	b.n	8004656 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b22      	cmp	r3, #34	@ 0x22
 800460c:	d123      	bne.n	8004656 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b40      	cmp	r3, #64	@ 0x40
 8004626:	d10b      	bne.n	8004640 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff f806 	bl	800364a <HAL_I2C_MemRxCpltCallback>
}
 800463e:	e00a      	b.n	8004656 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fe ffba 	bl	80035ca <HAL_I2C_MasterRxCpltCallback>
}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	fe00e800 	.word	0xfe00e800
 8004664:	ffff0000 	.word	0xffff0000

08004668 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004682:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2220      	movs	r2, #32
 8004692:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004694:	7afb      	ldrb	r3, [r7, #11]
 8004696:	2b21      	cmp	r3, #33	@ 0x21
 8004698:	d002      	beq.n	80046a0 <I2C_ITSlaveCplt+0x38>
 800469a:	7afb      	ldrb	r3, [r7, #11]
 800469c:	2b29      	cmp	r3, #41	@ 0x29
 800469e:	d108      	bne.n	80046b2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80046a0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fc97 	bl	8004fd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2221      	movs	r2, #33	@ 0x21
 80046ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b0:	e019      	b.n	80046e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046b2:	7afb      	ldrb	r3, [r7, #11]
 80046b4:	2b22      	cmp	r3, #34	@ 0x22
 80046b6:	d002      	beq.n	80046be <I2C_ITSlaveCplt+0x56>
 80046b8:	7afb      	ldrb	r3, [r7, #11]
 80046ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80046bc:	d108      	bne.n	80046d0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80046be:	f248 0102 	movw	r1, #32770	@ 0x8002
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fc88 	bl	8004fd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2222      	movs	r2, #34	@ 0x22
 80046cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80046ce:	e00a      	b.n	80046e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80046d0:	7afb      	ldrb	r3, [r7, #11]
 80046d2:	2b28      	cmp	r3, #40	@ 0x28
 80046d4:	d107      	bne.n	80046e6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80046d6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fc7c 	bl	8004fd8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b7f      	ldr	r3, [pc, #508]	@ (8004900 <I2C_ITSlaveCplt+0x298>)
 8004702:	400b      	ands	r3, r1
 8004704:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fb6d 	bl	8004de6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d07a      	beq.n	800480c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004724:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8111 	beq.w	8004952 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a73      	ldr	r2, [pc, #460]	@ (8004904 <I2C_ITSlaveCplt+0x29c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d059      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a71      	ldr	r2, [pc, #452]	@ (8004908 <I2C_ITSlaveCplt+0x2a0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d053      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a6f      	ldr	r2, [pc, #444]	@ (800490c <I2C_ITSlaveCplt+0x2a4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d04d      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6d      	ldr	r2, [pc, #436]	@ (8004910 <I2C_ITSlaveCplt+0x2a8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d047      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6b      	ldr	r2, [pc, #428]	@ (8004914 <I2C_ITSlaveCplt+0x2ac>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d041      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a69      	ldr	r2, [pc, #420]	@ (8004918 <I2C_ITSlaveCplt+0x2b0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d03b      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a67      	ldr	r2, [pc, #412]	@ (800491c <I2C_ITSlaveCplt+0x2b4>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d035      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a65      	ldr	r2, [pc, #404]	@ (8004920 <I2C_ITSlaveCplt+0x2b8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d02f      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a63      	ldr	r2, [pc, #396]	@ (8004924 <I2C_ITSlaveCplt+0x2bc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d029      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a61      	ldr	r2, [pc, #388]	@ (8004928 <I2C_ITSlaveCplt+0x2c0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d023      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a5f      	ldr	r2, [pc, #380]	@ (800492c <I2C_ITSlaveCplt+0x2c4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d01d      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004930 <I2C_ITSlaveCplt+0x2c8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d017      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004934 <I2C_ITSlaveCplt+0x2cc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d011      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a59      	ldr	r2, [pc, #356]	@ (8004938 <I2C_ITSlaveCplt+0x2d0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a57      	ldr	r2, [pc, #348]	@ (800493c <I2C_ITSlaveCplt+0x2d4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d005      	beq.n	80047f0 <I2C_ITSlaveCplt+0x188>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a55      	ldr	r2, [pc, #340]	@ (8004940 <I2C_ITSlaveCplt+0x2d8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d105      	bne.n	80047fc <I2C_ITSlaveCplt+0x194>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	e004      	b.n	8004806 <I2C_ITSlaveCplt+0x19e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	b29b      	uxth	r3, r3
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	8553      	strh	r3, [r2, #42]	@ 0x2a
 800480a:	e0a2      	b.n	8004952 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 809d 	beq.w	8004952 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004826:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 8090 	beq.w	8004952 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a32      	ldr	r2, [pc, #200]	@ (8004904 <I2C_ITSlaveCplt+0x29c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d059      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a30      	ldr	r2, [pc, #192]	@ (8004908 <I2C_ITSlaveCplt+0x2a0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d053      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2e      	ldr	r2, [pc, #184]	@ (800490c <I2C_ITSlaveCplt+0x2a4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d04d      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a2c      	ldr	r2, [pc, #176]	@ (8004910 <I2C_ITSlaveCplt+0x2a8>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d047      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2a      	ldr	r2, [pc, #168]	@ (8004914 <I2C_ITSlaveCplt+0x2ac>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d041      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a28      	ldr	r2, [pc, #160]	@ (8004918 <I2C_ITSlaveCplt+0x2b0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d03b      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a26      	ldr	r2, [pc, #152]	@ (800491c <I2C_ITSlaveCplt+0x2b4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d035      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a24      	ldr	r2, [pc, #144]	@ (8004920 <I2C_ITSlaveCplt+0x2b8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02f      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a22      	ldr	r2, [pc, #136]	@ (8004924 <I2C_ITSlaveCplt+0x2bc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d029      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a20      	ldr	r2, [pc, #128]	@ (8004928 <I2C_ITSlaveCplt+0x2c0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d023      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1e      	ldr	r2, [pc, #120]	@ (800492c <I2C_ITSlaveCplt+0x2c4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01d      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004930 <I2C_ITSlaveCplt+0x2c8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d017      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1a      	ldr	r2, [pc, #104]	@ (8004934 <I2C_ITSlaveCplt+0x2cc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d011      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a18      	ldr	r2, [pc, #96]	@ (8004938 <I2C_ITSlaveCplt+0x2d0>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00b      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a16      	ldr	r2, [pc, #88]	@ (800493c <I2C_ITSlaveCplt+0x2d4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d005      	beq.n	80048f2 <I2C_ITSlaveCplt+0x28a>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <I2C_ITSlaveCplt+0x2d8>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d128      	bne.n	8004944 <I2C_ITSlaveCplt+0x2dc>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	e027      	b.n	800494e <I2C_ITSlaveCplt+0x2e6>
 80048fe:	bf00      	nop
 8004900:	fe00e800 	.word	0xfe00e800
 8004904:	40020010 	.word	0x40020010
 8004908:	40020028 	.word	0x40020028
 800490c:	40020040 	.word	0x40020040
 8004910:	40020058 	.word	0x40020058
 8004914:	40020070 	.word	0x40020070
 8004918:	40020088 	.word	0x40020088
 800491c:	400200a0 	.word	0x400200a0
 8004920:	400200b8 	.word	0x400200b8
 8004924:	40020410 	.word	0x40020410
 8004928:	40020428 	.word	0x40020428
 800492c:	40020440 	.word	0x40020440
 8004930:	40020458 	.word	0x40020458
 8004934:	40020470 	.word	0x40020470
 8004938:	40020488 	.word	0x40020488
 800493c:	400204a0 	.word	0x400204a0
 8004940:	400204b8 	.word	0x400204b8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	b29b      	uxth	r3, r3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0304 	bic.w	r3, r3, #4
 8004962:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00c      	beq.n	800499e <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	3b01      	subs	r3, #1
 8004998:	b29a      	uxth	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ac:	f043 0204 	orr.w	r2, r3, #4
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d049      	beq.n	8004a52 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d044      	beq.n	8004a52 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d128      	bne.n	8004a24 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b28      	cmp	r3, #40	@ 0x28
 80049dc:	d108      	bne.n	80049f0 <I2C_ITSlaveCplt+0x388>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049e4:	d104      	bne.n	80049f0 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80049e6:	6979      	ldr	r1, [r7, #20]
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f891 	bl	8004b10 <I2C_ITListenCplt>
 80049ee:	e030      	b.n	8004a52 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b29      	cmp	r3, #41	@ 0x29
 80049fa:	d10e      	bne.n	8004a1a <I2C_ITSlaveCplt+0x3b2>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a02:	d00a      	beq.n	8004a1a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2210      	movs	r2, #16
 8004a0a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f9ea 	bl	8004de6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fd03 	bl	800441e <I2C_ITSlaveSeqCplt>
 8004a18:	e01b      	b.n	8004a52 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2210      	movs	r2, #16
 8004a20:	61da      	str	r2, [r3, #28]
 8004a22:	e016      	b.n	8004a52 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2210      	movs	r2, #16
 8004a2a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a30:	f043 0204 	orr.w	r2, r3, #4
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <I2C_ITSlaveCplt+0x3de>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a44:	d105      	bne.n	8004a52 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8b3 	bl	8004bb8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d010      	beq.n	8004a8a <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8a2 	bl	8004bb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b28      	cmp	r3, #40	@ 0x28
 8004a7e:	d141      	bne.n	8004b04 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f844 	bl	8004b10 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a88:	e03c      	b.n	8004b04 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a92:	d014      	beq.n	8004abe <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fcc2 	bl	800441e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <I2C_ITSlaveCplt+0x4a4>)
 8004a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fe fdb3 	bl	8003622 <HAL_I2C_ListenCpltCallback>
}
 8004abc:	e022      	b.n	8004b04 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b22      	cmp	r3, #34	@ 0x22
 8004ac8:	d10e      	bne.n	8004ae8 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fe fd86 	bl	80035f2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ae6:	e00d      	b.n	8004b04 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe fd6d 	bl	80035de <HAL_I2C_SlaveTxCpltCallback>
}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	ffff0000 	.word	0xffff0000

08004b10 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a25      	ldr	r2, [pc, #148]	@ (8004bb4 <I2C_ITListenCplt+0xa4>)
 8004b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d022      	beq.n	8004b8c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d012      	beq.n	8004b8c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b84:	f043 0204 	orr.w	r2, r3, #4
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b8c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fa21 	bl	8004fd8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2210      	movs	r2, #16
 8004b9c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe fd3b 	bl	8003622 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a6d      	ldr	r2, [pc, #436]	@ (8004d8c <I2C_ITError+0x1d4>)
 8004bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	2b28      	cmp	r3, #40	@ 0x28
 8004bee:	d005      	beq.n	8004bfc <I2C_ITError+0x44>
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b29      	cmp	r3, #41	@ 0x29
 8004bf4:	d002      	beq.n	8004bfc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bfa:	d10b      	bne.n	8004c14 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004bfc:	2103      	movs	r1, #3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9ea 	bl	8004fd8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2228      	movs	r2, #40	@ 0x28
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a60      	ldr	r2, [pc, #384]	@ (8004d90 <I2C_ITError+0x1d8>)
 8004c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c12:	e030      	b.n	8004c76 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c14:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f9dd 	bl	8004fd8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8e1 	bl	8004de6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b60      	cmp	r3, #96	@ 0x60
 8004c2e:	d01f      	beq.n	8004c70 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d114      	bne.n	8004c70 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f003 0310 	and.w	r3, r3, #16
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d109      	bne.n	8004c68 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c60:	f043 0204 	orr.w	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d039      	beq.n	8004cf8 <I2C_ITError+0x140>
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b11      	cmp	r3, #17
 8004c88:	d002      	beq.n	8004c90 <I2C_ITError+0xd8>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b21      	cmp	r3, #33	@ 0x21
 8004c8e:	d133      	bne.n	8004cf8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c9e:	d107      	bne.n	8004cb0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004cae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd fc59 	bl	800256c <HAL_DMA_GetState>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d017      	beq.n	8004cf0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc4:	4a33      	ldr	r2, [pc, #204]	@ (8004d94 <I2C_ITError+0x1dc>)
 8004cc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fd fa03 	bl	80020e0 <HAL_DMA_Abort_IT>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d04d      	beq.n	8004d7c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cea:	4610      	mov	r0, r2
 8004cec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cee:	e045      	b.n	8004d7c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f851 	bl	8004d98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cf6:	e041      	b.n	8004d7c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d039      	beq.n	8004d74 <I2C_ITError+0x1bc>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b12      	cmp	r3, #18
 8004d04:	d002      	beq.n	8004d0c <I2C_ITError+0x154>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b22      	cmp	r3, #34	@ 0x22
 8004d0a:	d133      	bne.n	8004d74 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d1a:	d107      	bne.n	8004d2c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d2a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd fc1b 	bl	800256c <HAL_DMA_GetState>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d017      	beq.n	8004d6c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	4a14      	ldr	r2, [pc, #80]	@ (8004d94 <I2C_ITError+0x1dc>)
 8004d42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fd f9c5 	bl	80020e0 <HAL_DMA_Abort_IT>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d011      	beq.n	8004d80 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004d66:	4610      	mov	r0, r2
 8004d68:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d6a:	e009      	b.n	8004d80 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f813 	bl	8004d98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d72:	e005      	b.n	8004d80 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f80f 	bl	8004d98 <I2C_TreatErrorCallback>
  }
}
 8004d7a:	e002      	b.n	8004d82 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d80:	bf00      	nop
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	ffff0000 	.word	0xffff0000
 8004d90:	080038d5 	.word	0x080038d5
 8004d94:	08004e2f 	.word	0x08004e2f

08004d98 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b60      	cmp	r3, #96	@ 0x60
 8004daa:	d10e      	bne.n	8004dca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fe fc55 	bl	8003672 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dc8:	e009      	b.n	8004dde <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fe fc40 	bl	800365e <HAL_I2C_ErrorCallback>
}
 8004dde:	bf00      	nop
 8004de0:	3708      	adds	r7, #8
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d103      	bne.n	8004e04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2200      	movs	r2, #0
 8004e02:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d007      	beq.n	8004e22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699a      	ldr	r2, [r3, #24]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	619a      	str	r2, [r3, #24]
  }
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	2200      	movs	r2, #0
 8004e4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e58:	2200      	movs	r2, #0
 8004e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ff9b 	bl	8004d98 <I2C_TreatErrorCallback>
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	817b      	strh	r3, [r7, #10]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e7e:	897b      	ldrh	r3, [r7, #10]
 8004e80:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e84:	7a7b      	ldrb	r3, [r7, #9]
 8004e86:	041b      	lsls	r3, r3, #16
 8004e88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e8c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e9a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	0d5b      	lsrs	r3, r3, #21
 8004ea6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004eaa:	4b08      	ldr	r3, [pc, #32]	@ (8004ecc <I2C_TransferConfig+0x60>)
 8004eac:	430b      	orrs	r3, r1
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	ea02 0103 	and.w	r1, r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	03ff63ff 	.word	0x03ff63ff

08004ed0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee4:	4a39      	ldr	r2, [pc, #228]	@ (8004fcc <I2C_Enable_IRQ+0xfc>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d032      	beq.n	8004f50 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004eee:	4a38      	ldr	r2, [pc, #224]	@ (8004fd0 <I2C_Enable_IRQ+0x100>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d02d      	beq.n	8004f50 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004ef8:	4a36      	ldr	r2, [pc, #216]	@ (8004fd4 <I2C_Enable_IRQ+0x104>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d028      	beq.n	8004f50 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004efe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da03      	bge.n	8004f0e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004f0c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f0e:	887b      	ldrh	r3, [r7, #2]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004f1e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f20:	887b      	ldrh	r3, [r7, #2]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004f30:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f32:	887b      	ldrh	r3, [r7, #2]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d103      	bne.n	8004f40 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004f3e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004f40:	887b      	ldrh	r3, [r7, #2]
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d133      	bne.n	8004fae <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f043 0320 	orr.w	r3, r3, #32
 8004f4c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004f4e:	e02e      	b.n	8004fae <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	da03      	bge.n	8004f60 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004f5e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f60:	887b      	ldrh	r3, [r7, #2]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004f70:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f72:	887b      	ldrh	r3, [r7, #2]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004f82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d103      	bne.n	8004f92 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004f90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004f92:	887b      	ldrh	r3, [r7, #2]
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d103      	bne.n	8004fa0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004f9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fa0:	887b      	ldrh	r3, [r7, #2]
 8004fa2:	2b40      	cmp	r3, #64	@ 0x40
 8004fa4:	d103      	bne.n	8004fae <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	08003ac7 	.word	0x08003ac7
 8004fd0:	08003ee9 	.word	0x08003ee9
 8004fd4:	08003c9d 	.word	0x08003c9d

08004fd8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00f      	beq.n	8005012 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004ff8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005006:	2b28      	cmp	r3, #40	@ 0x28
 8005008:	d003      	beq.n	8005012 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005010:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005012:	887b      	ldrh	r3, [r7, #2]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00f      	beq.n	800503c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005022:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005030:	2b28      	cmp	r3, #40	@ 0x28
 8005032:	d003      	beq.n	800503c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800503a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800503c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005040:	2b00      	cmp	r3, #0
 8005042:	da03      	bge.n	800504c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800504a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800504c:	887b      	ldrh	r3, [r7, #2]
 800504e:	2b10      	cmp	r3, #16
 8005050:	d103      	bne.n	800505a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005058:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800505a:	887b      	ldrh	r3, [r7, #2]
 800505c:	2b20      	cmp	r3, #32
 800505e:	d103      	bne.n	8005068 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f043 0320 	orr.w	r3, r3, #32
 8005066:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005068:	887b      	ldrh	r3, [r7, #2]
 800506a:	2b40      	cmp	r3, #64	@ 0x40
 800506c:	d103      	bne.n	8005076 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005074:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6819      	ldr	r1, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	43da      	mvns	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	400a      	ands	r2, r1
 8005086:	601a      	str	r2, [r3, #0]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d138      	bne.n	800511c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e032      	b.n	800511e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2224      	movs	r2, #36	@ 0x24
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6819      	ldr	r1, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e000      	b.n	800511e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800511c:	2302      	movs	r3, #2
  }
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b20      	cmp	r3, #32
 800513e:	d139      	bne.n	80051b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800514a:	2302      	movs	r3, #2
 800514c:	e033      	b.n	80051b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2224      	movs	r2, #36	@ 0x24
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800517c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b086      	sub	sp, #24
 80051c6:	af02      	add	r7, sp, #8
 80051c8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0fe      	b.n	80053d2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d106      	bne.n	80051ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7fc f8c3 	bl	8001374 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2203      	movs	r2, #3
 80051f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f005 fdb6 	bl	800ad6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7c1a      	ldrb	r2, [r3, #16]
 8005208:	f88d 2000 	strb.w	r2, [sp]
 800520c:	3304      	adds	r3, #4
 800520e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005210:	f005 fd3a 	bl	800ac88 <USB_CoreInit>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0d5      	b.n	80053d2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2100      	movs	r1, #0
 800522c:	4618      	mov	r0, r3
 800522e:	f005 fdae 	bl	800ad8e <USB_SetCurrentMode>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0c6      	b.n	80053d2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	e04a      	b.n	80052e0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800524a:	7bfa      	ldrb	r2, [r7, #15]
 800524c:	6879      	ldr	r1, [r7, #4]
 800524e:	4613      	mov	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	4413      	add	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	440b      	add	r3, r1
 8005258:	3315      	adds	r3, #21
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800525e:	7bfa      	ldrb	r2, [r7, #15]
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	4613      	mov	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	440b      	add	r3, r1
 800526c:	3314      	adds	r3, #20
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	b298      	uxth	r0, r3
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	332e      	adds	r3, #46	@ 0x2e
 8005286:	4602      	mov	r2, r0
 8005288:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800528a:	7bfa      	ldrb	r2, [r7, #15]
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	3318      	adds	r3, #24
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800529e:	7bfa      	ldrb	r2, [r7, #15]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	331c      	adds	r3, #28
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052b2:	7bfa      	ldrb	r2, [r7, #15]
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3320      	adds	r3, #32
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052c6:	7bfa      	ldrb	r2, [r7, #15]
 80052c8:	6879      	ldr	r1, [r7, #4]
 80052ca:	4613      	mov	r3, r2
 80052cc:	00db      	lsls	r3, r3, #3
 80052ce:	4413      	add	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	440b      	add	r3, r1
 80052d4:	3324      	adds	r3, #36	@ 0x24
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052da:	7bfb      	ldrb	r3, [r7, #15]
 80052dc:	3301      	adds	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	791b      	ldrb	r3, [r3, #4]
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d3af      	bcc.n	800524a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ea:	2300      	movs	r3, #0
 80052ec:	73fb      	strb	r3, [r7, #15]
 80052ee:	e044      	b.n	800537a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005302:	2200      	movs	r2, #0
 8005304:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	440b      	add	r3, r1
 8005314:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005318:	7bfa      	ldrb	r2, [r7, #15]
 800531a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800531c:	7bfa      	ldrb	r2, [r7, #15]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005348:	7bfa      	ldrb	r2, [r7, #15]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800535e:	7bfa      	ldrb	r2, [r7, #15]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	3301      	adds	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	791b      	ldrb	r3, [r3, #4]
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3b5      	bcc.n	80052f0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	7c1a      	ldrb	r2, [r3, #16]
 800538c:	f88d 2000 	strb.w	r2, [sp]
 8005390:	3304      	adds	r3, #4
 8005392:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005394:	f005 fd48 	bl	800ae28 <USB_DevInit>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e013      	b.n	80053d2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7b1b      	ldrb	r3, [r3, #12]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d102      	bne.n	80053c6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f80b 	bl	80053dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f005 ff03 	bl	800b1d6 <USB_DevDisconnect>

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800540a:	4b05      	ldr	r3, [pc, #20]	@ (8005420 <HAL_PCDEx_ActivateLPM+0x44>)
 800540c:	4313      	orrs	r3, r2
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	10000003 	.word	0x10000003

08005424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800542c:	4b19      	ldr	r3, [pc, #100]	@ (8005494 <HAL_PWREx_ConfigSupply+0x70>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b04      	cmp	r3, #4
 8005436:	d00a      	beq.n	800544e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005438:	4b16      	ldr	r3, [pc, #88]	@ (8005494 <HAL_PWREx_ConfigSupply+0x70>)
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d001      	beq.n	800544a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e01f      	b.n	800548a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	e01d      	b.n	800548a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800544e:	4b11      	ldr	r3, [pc, #68]	@ (8005494 <HAL_PWREx_ConfigSupply+0x70>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f023 0207 	bic.w	r2, r3, #7
 8005456:	490f      	ldr	r1, [pc, #60]	@ (8005494 <HAL_PWREx_ConfigSupply+0x70>)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4313      	orrs	r3, r2
 800545c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800545e:	f7fc f9c1 	bl	80017e4 <HAL_GetTick>
 8005462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005464:	e009      	b.n	800547a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005466:	f7fc f9bd 	bl	80017e4 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005474:	d901      	bls.n	800547a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e007      	b.n	800548a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_PWREx_ConfigSupply+0x70>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005486:	d1ee      	bne.n	8005466 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	58024800 	.word	0x58024800

08005498 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a04      	ldr	r2, [pc, #16]	@ (80054b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80054a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054a6:	60d3      	str	r3, [r2, #12]
}
 80054a8:	bf00      	nop
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	58024800 	.word	0x58024800

080054b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	@ 0x30
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f000 bc48 	b.w	8005d5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8088 	beq.w	80055ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054da:	4b99      	ldr	r3, [pc, #612]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054e4:	4b96      	ldr	r3, [pc, #600]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80054ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d007      	beq.n	8005500 <HAL_RCC_OscConfig+0x48>
 80054f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f2:	2b18      	cmp	r3, #24
 80054f4:	d111      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d10c      	bne.n	800551a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005500:	4b8f      	ldr	r3, [pc, #572]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d06d      	beq.n	80055e8 <HAL_RCC_OscConfig+0x130>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d169      	bne.n	80055e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f000 bc21 	b.w	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005522:	d106      	bne.n	8005532 <HAL_RCC_OscConfig+0x7a>
 8005524:	4b86      	ldr	r3, [pc, #536]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a85      	ldr	r2, [pc, #532]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800552a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e02e      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10c      	bne.n	8005554 <HAL_RCC_OscConfig+0x9c>
 800553a:	4b81      	ldr	r3, [pc, #516]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a80      	ldr	r2, [pc, #512]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	4b7e      	ldr	r3, [pc, #504]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a7d      	ldr	r2, [pc, #500]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800554c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	e01d      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0xc0>
 800555e:	4b78      	ldr	r3, [pc, #480]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a77      	ldr	r2, [pc, #476]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005568:	6013      	str	r3, [r2, #0]
 800556a:	4b75      	ldr	r3, [pc, #468]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a74      	ldr	r2, [pc, #464]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e00b      	b.n	8005590 <HAL_RCC_OscConfig+0xd8>
 8005578:	4b71      	ldr	r3, [pc, #452]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a70      	ldr	r2, [pc, #448]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800557e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	4b6e      	ldr	r3, [pc, #440]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a6d      	ldr	r2, [pc, #436]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800558a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800558e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d013      	beq.n	80055c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fc f924 	bl	80017e4 <HAL_GetTick>
 800559c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a0:	f7fc f920 	bl	80017e4 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b64      	cmp	r3, #100	@ 0x64
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e3d4      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055b2:	4b63      	ldr	r3, [pc, #396]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d0f0      	beq.n	80055a0 <HAL_RCC_OscConfig+0xe8>
 80055be:	e014      	b.n	80055ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c0:	f7fc f910 	bl	80017e4 <HAL_GetTick>
 80055c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c8:	f7fc f90c 	bl	80017e4 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b64      	cmp	r3, #100	@ 0x64
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e3c0      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80055da:	4b59      	ldr	r3, [pc, #356]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x110>
 80055e6:	e000      	b.n	80055ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80ca 	beq.w	800578c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f8:	4b51      	ldr	r3, [pc, #324]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005600:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005602:	4b4f      	ldr	r3, [pc, #316]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d007      	beq.n	800561e <HAL_RCC_OscConfig+0x166>
 800560e:	6a3b      	ldr	r3, [r7, #32]
 8005610:	2b18      	cmp	r3, #24
 8005612:	d156      	bne.n	80056c2 <HAL_RCC_OscConfig+0x20a>
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d151      	bne.n	80056c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800561e:	4b48      	ldr	r3, [pc, #288]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <HAL_RCC_OscConfig+0x17e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e392      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005636:	4b42      	ldr	r3, [pc, #264]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f023 0219 	bic.w	r2, r3, #25
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	493f      	ldr	r1, [pc, #252]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005644:	4313      	orrs	r3, r2
 8005646:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005648:	f7fc f8cc 	bl	80017e4 <HAL_GetTick>
 800564c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005650:	f7fc f8c8 	bl	80017e4 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e37c      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005662:	4b37      	ldr	r3, [pc, #220]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0f0      	beq.n	8005650 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800566e:	f7fc f8e9 	bl	8001844 <HAL_GetREVID>
 8005672:	4603      	mov	r3, r0
 8005674:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005678:	4293      	cmp	r3, r2
 800567a:	d817      	bhi.n	80056ac <HAL_RCC_OscConfig+0x1f4>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b40      	cmp	r3, #64	@ 0x40
 8005682:	d108      	bne.n	8005696 <HAL_RCC_OscConfig+0x1de>
 8005684:	4b2e      	ldr	r3, [pc, #184]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800568c:	4a2c      	ldr	r2, [pc, #176]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800568e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005692:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005694:	e07a      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005696:	4b2a      	ldr	r3, [pc, #168]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	031b      	lsls	r3, r3, #12
 80056a4:	4926      	ldr	r1, [pc, #152]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056aa:	e06f      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ac:	4b24      	ldr	r3, [pc, #144]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	061b      	lsls	r3, r3, #24
 80056ba:	4921      	ldr	r1, [pc, #132]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c0:	e064      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d047      	beq.n	800575a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 0219 	bic.w	r2, r3, #25
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	491a      	ldr	r1, [pc, #104]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fc f882 	bl	80017e4 <HAL_GetTick>
 80056e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056e4:	f7fc f87e 	bl	80017e4 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e332      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056f6:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0304 	and.w	r3, r3, #4
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005702:	f7fc f89f 	bl	8001844 <HAL_GetREVID>
 8005706:	4603      	mov	r3, r0
 8005708:	f241 0203 	movw	r2, #4099	@ 0x1003
 800570c:	4293      	cmp	r3, r2
 800570e:	d819      	bhi.n	8005744 <HAL_RCC_OscConfig+0x28c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b40      	cmp	r3, #64	@ 0x40
 8005716:	d108      	bne.n	800572a <HAL_RCC_OscConfig+0x272>
 8005718:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005720:	4a07      	ldr	r2, [pc, #28]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 8005722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005726:	6053      	str	r3, [r2, #4]
 8005728:	e030      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
 800572a:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	031b      	lsls	r3, r3, #12
 8005738:	4901      	ldr	r1, [pc, #4]	@ (8005740 <HAL_RCC_OscConfig+0x288>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
 800573e:	e025      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
 8005740:	58024400 	.word	0x58024400
 8005744:	4b9a      	ldr	r3, [pc, #616]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	4997      	ldr	r1, [pc, #604]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
 8005758:	e018      	b.n	800578c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800575a:	4b95      	ldr	r3, [pc, #596]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a94      	ldr	r2, [pc, #592]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005760:	f023 0301 	bic.w	r3, r3, #1
 8005764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005766:	f7fc f83d 	bl	80017e4 <HAL_GetTick>
 800576a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576e:	f7fc f839 	bl	80017e4 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e2ed      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005780:	4b8b      	ldr	r3, [pc, #556]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0304 	and.w	r3, r3, #4
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f0      	bne.n	800576e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a9 	beq.w	80058ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579a:	4b85      	ldr	r3, [pc, #532]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057a4:	4b82      	ldr	r3, [pc, #520]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d007      	beq.n	80057c0 <HAL_RCC_OscConfig+0x308>
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b18      	cmp	r3, #24
 80057b4:	d13a      	bne.n	800582c <HAL_RCC_OscConfig+0x374>
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d135      	bne.n	800582c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057c0:	4b7b      	ldr	r3, [pc, #492]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_OscConfig+0x320>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	2b80      	cmp	r3, #128	@ 0x80
 80057d2:	d001      	beq.n	80057d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e2c1      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057d8:	f7fc f834 	bl	8001844 <HAL_GetREVID>
 80057dc:	4603      	mov	r3, r0
 80057de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d817      	bhi.n	8005816 <HAL_RCC_OscConfig+0x35e>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	d108      	bne.n	8005800 <HAL_RCC_OscConfig+0x348>
 80057ee:	4b70      	ldr	r3, [pc, #448]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80057f6:	4a6e      	ldr	r2, [pc, #440]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80057f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057fe:	e075      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005800:	4b6b      	ldr	r3, [pc, #428]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	069b      	lsls	r3, r3, #26
 800580e:	4968      	ldr	r1, [pc, #416]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005810:	4313      	orrs	r3, r2
 8005812:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005814:	e06a      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005816:	4b66      	ldr	r3, [pc, #408]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	4962      	ldr	r1, [pc, #392]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005826:	4313      	orrs	r3, r2
 8005828:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800582a:	e05f      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d042      	beq.n	80058ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005834:	4b5e      	ldr	r3, [pc, #376]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5d      	ldr	r2, [pc, #372]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800583a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800583e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fb ffd0 	bl	80017e4 <HAL_GetTick>
 8005844:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005848:	f7fb ffcc 	bl	80017e4 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e280      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800585a:	4b55      	ldr	r3, [pc, #340]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005866:	f7fb ffed 	bl	8001844 <HAL_GetREVID>
 800586a:	4603      	mov	r3, r0
 800586c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005870:	4293      	cmp	r3, r2
 8005872:	d817      	bhi.n	80058a4 <HAL_RCC_OscConfig+0x3ec>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	2b20      	cmp	r3, #32
 800587a:	d108      	bne.n	800588e <HAL_RCC_OscConfig+0x3d6>
 800587c:	4b4c      	ldr	r3, [pc, #304]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005884:	4a4a      	ldr	r2, [pc, #296]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005886:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800588a:	6053      	str	r3, [r2, #4]
 800588c:	e02e      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
 800588e:	4b48      	ldr	r3, [pc, #288]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	069b      	lsls	r3, r3, #26
 800589c:	4944      	ldr	r1, [pc, #272]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	604b      	str	r3, [r1, #4]
 80058a2:	e023      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
 80058a4:	4b42      	ldr	r3, [pc, #264]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	493f      	ldr	r1, [pc, #252]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60cb      	str	r3, [r1, #12]
 80058b8:	e018      	b.n	80058ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058ba:	4b3d      	ldr	r3, [pc, #244]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a3c      	ldr	r2, [pc, #240]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c6:	f7fb ff8d 	bl	80017e4 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058ce:	f7fb ff89 	bl	80017e4 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e23d      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058e0:	4b33      	ldr	r3, [pc, #204]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0308 	and.w	r3, r3, #8
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d036      	beq.n	8005966 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005900:	4b2b      	ldr	r3, [pc, #172]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005904:	4a2a      	ldr	r2, [pc, #168]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fb ff6a 	bl	80017e4 <HAL_GetTick>
 8005910:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005912:	e008      	b.n	8005926 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005914:	f7fb ff66 	bl	80017e4 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b02      	cmp	r3, #2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e21a      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005926:	4b22      	ldr	r3, [pc, #136]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800592a:	f003 0302 	and.w	r3, r3, #2
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCC_OscConfig+0x45c>
 8005932:	e018      	b.n	8005966 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005934:	4b1e      	ldr	r3, [pc, #120]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005938:	4a1d      	ldr	r2, [pc, #116]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005940:	f7fb ff50 	bl	80017e4 <HAL_GetTick>
 8005944:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005948:	f7fb ff4c 	bl	80017e4 <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e200      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800595a:	4b15      	ldr	r3, [pc, #84]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800595c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d039      	beq.n	80059e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01c      	beq.n	80059b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800597a:	4b0d      	ldr	r3, [pc, #52]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a0c      	ldr	r2, [pc, #48]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 8005980:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005984:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005986:	f7fb ff2d 	bl	80017e4 <HAL_GetTick>
 800598a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800598e:	f7fb ff29 	bl	80017e4 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e1dd      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059a0:	4b03      	ldr	r3, [pc, #12]	@ (80059b0 <HAL_RCC_OscConfig+0x4f8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f0      	beq.n	800598e <HAL_RCC_OscConfig+0x4d6>
 80059ac:	e01b      	b.n	80059e6 <HAL_RCC_OscConfig+0x52e>
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059b4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a9a      	ldr	r2, [pc, #616]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 80059ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059c0:	f7fb ff10 	bl	80017e4 <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c8:	f7fb ff0c 	bl	80017e4 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e1c0      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059da:	4b92      	ldr	r3, [pc, #584]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 8081 	beq.w	8005af6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80059f4:	4b8c      	ldr	r3, [pc, #560]	@ (8005c28 <HAL_RCC_OscConfig+0x770>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a8b      	ldr	r2, [pc, #556]	@ (8005c28 <HAL_RCC_OscConfig+0x770>)
 80059fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a00:	f7fb fef0 	bl	80017e4 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a08:	f7fb feec 	bl	80017e4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b64      	cmp	r3, #100	@ 0x64
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e1a0      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a1a:	4b83      	ldr	r3, [pc, #524]	@ (8005c28 <HAL_RCC_OscConfig+0x770>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCC_OscConfig+0x584>
 8005a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a32:	4a7c      	ldr	r2, [pc, #496]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a3a:	e02d      	b.n	8005a98 <HAL_RCC_OscConfig+0x5e0>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCC_OscConfig+0x5a6>
 8005a44:	4b77      	ldr	r3, [pc, #476]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a48:	4a76      	ldr	r2, [pc, #472]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a50:	4b74      	ldr	r3, [pc, #464]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	4a73      	ldr	r2, [pc, #460]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a56:	f023 0304 	bic.w	r3, r3, #4
 8005a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a5c:	e01c      	b.n	8005a98 <HAL_RCC_OscConfig+0x5e0>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b05      	cmp	r3, #5
 8005a64:	d10c      	bne.n	8005a80 <HAL_RCC_OscConfig+0x5c8>
 8005a66:	4b6f      	ldr	r3, [pc, #444]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a6c:	f043 0304 	orr.w	r3, r3, #4
 8005a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a72:	4b6c      	ldr	r3, [pc, #432]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	4a6b      	ldr	r2, [pc, #428]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a78:	f043 0301 	orr.w	r3, r3, #1
 8005a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7e:	e00b      	b.n	8005a98 <HAL_RCC_OscConfig+0x5e0>
 8005a80:	4b68      	ldr	r3, [pc, #416]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a84:	4a67      	ldr	r2, [pc, #412]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a86:	f023 0301 	bic.w	r3, r3, #1
 8005a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a8c:	4b65      	ldr	r3, [pc, #404]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a90:	4a64      	ldr	r2, [pc, #400]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005a92:	f023 0304 	bic.w	r3, r3, #4
 8005a96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d015      	beq.n	8005acc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa0:	f7fb fea0 	bl	80017e4 <HAL_GetTick>
 8005aa4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005aa6:	e00a      	b.n	8005abe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa8:	f7fb fe9c 	bl	80017e4 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e14e      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005abe:	4b59      	ldr	r3, [pc, #356]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d0ee      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x5f0>
 8005aca:	e014      	b.n	8005af6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fb fe8a 	bl	80017e4 <HAL_GetTick>
 8005ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fb fe86 	bl	80017e4 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e138      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005aea:	4b4e      	ldr	r3, [pc, #312]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ee      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 812d 	beq.w	8005d5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b00:	4b48      	ldr	r3, [pc, #288]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b08:	2b18      	cmp	r3, #24
 8005b0a:	f000 80bd 	beq.w	8005c88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	f040 809e 	bne.w	8005c54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b18:	4b42      	ldr	r3, [pc, #264]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a41      	ldr	r2, [pc, #260]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b24:	f7fb fe5e 	bl	80017e4 <HAL_GetTick>
 8005b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b2a:	e008      	b.n	8005b3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b2c:	f7fb fe5a 	bl	80017e4 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	2b02      	cmp	r3, #2
 8005b38:	d901      	bls.n	8005b3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e10e      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b3e:	4b39      	ldr	r3, [pc, #228]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1f0      	bne.n	8005b2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b4a:	4b36      	ldr	r3, [pc, #216]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b4e:	4b37      	ldr	r3, [pc, #220]	@ (8005c2c <HAL_RCC_OscConfig+0x774>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b5a:	0112      	lsls	r2, r2, #4
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	4931      	ldr	r1, [pc, #196]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b72:	3b01      	subs	r3, #1
 8005b74:	025b      	lsls	r3, r3, #9
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	041b      	lsls	r3, r3, #16
 8005b82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b94:	4923      	ldr	r1, [pc, #140]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005b9a:	4b22      	ldr	r3, [pc, #136]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9e:	4a21      	ldr	r2, [pc, #132]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ba6:	4b1f      	ldr	r3, [pc, #124]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005ba8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005baa:	4b21      	ldr	r3, [pc, #132]	@ (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bb2:	00d2      	lsls	r2, r2, #3
 8005bb4:	491b      	ldr	r1, [pc, #108]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bba:	4b1a      	ldr	r3, [pc, #104]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	f023 020c 	bic.w	r2, r3, #12
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	4917      	ldr	r1, [pc, #92]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005bcc:	4b15      	ldr	r3, [pc, #84]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	f023 0202 	bic.w	r2, r3, #2
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd8:	4912      	ldr	r1, [pc, #72]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bde:	4b11      	ldr	r3, [pc, #68]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	4a10      	ldr	r2, [pc, #64]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bea:	4b0e      	ldr	r3, [pc, #56]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bee:	4a0d      	ldr	r2, [pc, #52]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c02:	4b08      	ldr	r3, [pc, #32]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c06:	4a07      	ldr	r2, [pc, #28]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c0e:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <HAL_RCC_OscConfig+0x76c>)
 8005c14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7fb fde3 	bl	80017e4 <HAL_GetTick>
 8005c1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c20:	e011      	b.n	8005c46 <HAL_RCC_OscConfig+0x78e>
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400
 8005c28:	58024800 	.word	0x58024800
 8005c2c:	fffffc0c 	.word	0xfffffc0c
 8005c30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c34:	f7fb fdd6 	bl	80017e4 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e08a      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c46:	4b47      	ldr	r3, [pc, #284]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0x77c>
 8005c52:	e082      	b.n	8005d5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c54:	4b43      	ldr	r3, [pc, #268]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a42      	ldr	r2, [pc, #264]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fb fdc0 	bl	80017e4 <HAL_GetTick>
 8005c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c68:	f7fb fdbc 	bl	80017e4 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e070      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x7b0>
 8005c86:	e068      	b.n	8005d5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005c88:	4b36      	ldr	r3, [pc, #216]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005c8e:	4b35      	ldr	r3, [pc, #212]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d031      	beq.n	8005d00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f003 0203 	and.w	r2, r3, #3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d12a      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d122      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d11a      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	0a5b      	lsrs	r3, r3, #9
 8005cce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d111      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	0c1b      	lsrs	r3, r3, #16
 8005ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d108      	bne.n	8005d00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	0e1b      	lsrs	r3, r3, #24
 8005cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d001      	beq.n	8005d04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e02b      	b.n	8005d5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005d04:	4b17      	ldr	r3, [pc, #92]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d08:	08db      	lsrs	r3, r3, #3
 8005d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d01f      	beq.n	8005d5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005d1a:	4b12      	ldr	r3, [pc, #72]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	4a11      	ldr	r2, [pc, #68]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d26:	f7fb fd5d 	bl	80017e4 <HAL_GetTick>
 8005d2a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005d2c:	bf00      	nop
 8005d2e:	f7fb fd59 	bl	80017e4 <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d0f9      	beq.n	8005d2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d68 <HAL_RCC_OscConfig+0x8b0>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d46:	00d2      	lsls	r2, r2, #3
 8005d48:	4906      	ldr	r1, [pc, #24]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005d4e:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d52:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <HAL_RCC_OscConfig+0x8ac>)
 8005d54:	f043 0301 	orr.w	r3, r3, #1
 8005d58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3730      	adds	r7, #48	@ 0x30
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	58024400 	.word	0x58024400
 8005d68:	ffff0007 	.word	0xffff0007

08005d6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e19c      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d80:	4b8a      	ldr	r3, [pc, #552]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d910      	bls.n	8005db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8e:	4b87      	ldr	r3, [pc, #540]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f023 020f 	bic.w	r2, r3, #15
 8005d96:	4985      	ldr	r1, [pc, #532]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b83      	ldr	r3, [pc, #524]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e184      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d010      	beq.n	8005dde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	4b7b      	ldr	r3, [pc, #492]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d908      	bls.n	8005dde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005dcc:	4b78      	ldr	r3, [pc, #480]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	4975      	ldr	r1, [pc, #468]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d010      	beq.n	8005e0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	695a      	ldr	r2, [r3, #20]
 8005dee:	4b70      	ldr	r3, [pc, #448]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d908      	bls.n	8005e0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005dfc:	69db      	ldr	r3, [r3, #28]
 8005dfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	496a      	ldr	r1, [pc, #424]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d010      	beq.n	8005e3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	4b64      	ldr	r3, [pc, #400]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d908      	bls.n	8005e3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e28:	4b61      	ldr	r3, [pc, #388]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	495e      	ldr	r1, [pc, #376]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d010      	beq.n	8005e68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	4b59      	ldr	r3, [pc, #356]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d908      	bls.n	8005e68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005e56:	4b56      	ldr	r3, [pc, #344]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69db      	ldr	r3, [r3, #28]
 8005e62:	4953      	ldr	r1, [pc, #332]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68da      	ldr	r2, [r3, #12]
 8005e78:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d908      	bls.n	8005e96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e84:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f023 020f 	bic.w	r2, r3, #15
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4947      	ldr	r1, [pc, #284]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d055      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ea2:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	4940      	ldr	r1, [pc, #256]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d107      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d121      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0f6      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d107      	bne.n	8005ee4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ed4:	4b36      	ldr	r3, [pc, #216]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d115      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e0ea      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d107      	bne.n	8005efc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eec:	4b30      	ldr	r3, [pc, #192]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d109      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e0de      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005efc:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0d6      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f0c:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f023 0207 	bic.w	r2, r3, #7
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4925      	ldr	r1, [pc, #148]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fb fc61 	bl	80017e4 <HAL_GetTick>
 8005f22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f24:	e00a      	b.n	8005f3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f26:	f7fb fc5d 	bl	80017e4 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e0be      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	00db      	lsls	r3, r3, #3
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d1eb      	bne.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d010      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d208      	bcs.n	8005f7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f6a:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f023 020f 	bic.w	r2, r3, #15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	490e      	ldr	r1, [pc, #56]	@ (8005fb0 <HAL_RCC_ClockConfig+0x244>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d214      	bcs.n	8005fb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f8a:	4b08      	ldr	r3, [pc, #32]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f023 020f 	bic.w	r2, r3, #15
 8005f92:	4906      	ldr	r1, [pc, #24]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9a:	4b04      	ldr	r3, [pc, #16]	@ (8005fac <HAL_RCC_ClockConfig+0x240>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d005      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e086      	b.n	80060ba <HAL_RCC_ClockConfig+0x34e>
 8005fac:	52002000 	.word	0x52002000
 8005fb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d010      	beq.n	8005fe2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d208      	bcs.n	8005fe2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	4939      	ldr	r1, [pc, #228]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d010      	beq.n	8006010 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	4b34      	ldr	r3, [pc, #208]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d208      	bcs.n	8006010 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	492e      	ldr	r1, [pc, #184]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800600c:	4313      	orrs	r3, r2
 800600e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d010      	beq.n	800603e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699a      	ldr	r2, [r3, #24]
 8006020:	4b28      	ldr	r3, [pc, #160]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006028:	429a      	cmp	r2, r3
 800602a:	d208      	bcs.n	800603e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800602c:	4b25      	ldr	r3, [pc, #148]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	4922      	ldr	r1, [pc, #136]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800603a:	4313      	orrs	r3, r2
 800603c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d010      	beq.n	800606c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006056:	429a      	cmp	r2, r3
 8006058:	d208      	bcs.n	800606c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800605a:	4b1a      	ldr	r3, [pc, #104]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	4917      	ldr	r1, [pc, #92]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006068:	4313      	orrs	r3, r2
 800606a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800606c:	f000 f834 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8006070:	4602      	mov	r2, r0
 8006072:	4b14      	ldr	r3, [pc, #80]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	0a1b      	lsrs	r3, r3, #8
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	4912      	ldr	r1, [pc, #72]	@ (80060c8 <HAL_RCC_ClockConfig+0x35c>)
 800607e:	5ccb      	ldrb	r3, [r1, r3]
 8006080:	f003 031f 	and.w	r3, r3, #31
 8006084:	fa22 f303 	lsr.w	r3, r2, r3
 8006088:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800608a:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <HAL_RCC_ClockConfig+0x358>)
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f003 030f 	and.w	r3, r3, #15
 8006092:	4a0d      	ldr	r2, [pc, #52]	@ (80060c8 <HAL_RCC_ClockConfig+0x35c>)
 8006094:	5cd3      	ldrb	r3, [r2, r3]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	fa22 f303 	lsr.w	r3, r2, r3
 80060a0:	4a0a      	ldr	r2, [pc, #40]	@ (80060cc <HAL_RCC_ClockConfig+0x360>)
 80060a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060a4:	4a0a      	ldr	r2, [pc, #40]	@ (80060d0 <HAL_RCC_ClockConfig+0x364>)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80060aa:	4b0a      	ldr	r3, [pc, #40]	@ (80060d4 <HAL_RCC_ClockConfig+0x368>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fb fb4e 	bl	8001750 <HAL_InitTick>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	58024400 	.word	0x58024400
 80060c8:	0800be44 	.word	0x0800be44
 80060cc:	24000004 	.word	0x24000004
 80060d0:	24000000 	.word	0x24000000
 80060d4:	24000008 	.word	0x24000008

080060d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	@ 0x24
 80060dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060de:	4bb3      	ldr	r3, [pc, #716]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060e6:	2b18      	cmp	r3, #24
 80060e8:	f200 8155 	bhi.w	8006396 <HAL_RCC_GetSysClockFreq+0x2be>
 80060ec:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006159 	.word	0x08006159
 80060f8:	08006397 	.word	0x08006397
 80060fc:	08006397 	.word	0x08006397
 8006100:	08006397 	.word	0x08006397
 8006104:	08006397 	.word	0x08006397
 8006108:	08006397 	.word	0x08006397
 800610c:	08006397 	.word	0x08006397
 8006110:	08006397 	.word	0x08006397
 8006114:	0800617f 	.word	0x0800617f
 8006118:	08006397 	.word	0x08006397
 800611c:	08006397 	.word	0x08006397
 8006120:	08006397 	.word	0x08006397
 8006124:	08006397 	.word	0x08006397
 8006128:	08006397 	.word	0x08006397
 800612c:	08006397 	.word	0x08006397
 8006130:	08006397 	.word	0x08006397
 8006134:	08006185 	.word	0x08006185
 8006138:	08006397 	.word	0x08006397
 800613c:	08006397 	.word	0x08006397
 8006140:	08006397 	.word	0x08006397
 8006144:	08006397 	.word	0x08006397
 8006148:	08006397 	.word	0x08006397
 800614c:	08006397 	.word	0x08006397
 8006150:	08006397 	.word	0x08006397
 8006154:	0800618b 	.word	0x0800618b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006158:	4b94      	ldr	r3, [pc, #592]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006164:	4b91      	ldr	r3, [pc, #580]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	08db      	lsrs	r3, r3, #3
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	4a90      	ldr	r2, [pc, #576]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006170:	fa22 f303 	lsr.w	r3, r2, r3
 8006174:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006176:	e111      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006178:	4b8d      	ldr	r3, [pc, #564]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800617a:	61bb      	str	r3, [r7, #24]
      break;
 800617c:	e10e      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800617e:	4b8d      	ldr	r3, [pc, #564]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006180:	61bb      	str	r3, [r7, #24]
      break;
 8006182:	e10b      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006184:	4b8c      	ldr	r3, [pc, #560]	@ (80063b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006186:	61bb      	str	r3, [r7, #24]
      break;
 8006188:	e108      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800618a:	4b88      	ldr	r3, [pc, #544]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800618c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006194:	4b85      	ldr	r3, [pc, #532]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006198:	091b      	lsrs	r3, r3, #4
 800619a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800619e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80061a0:	4b82      	ldr	r3, [pc, #520]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80061aa:	4b80      	ldr	r3, [pc, #512]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	08db      	lsrs	r3, r3, #3
 80061b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80e1 	beq.w	8006390 <HAL_RCC_GetSysClockFreq+0x2b8>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	f000 8083 	beq.w	80062dc <HAL_RCC_GetSysClockFreq+0x204>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	f200 80a1 	bhi.w	8006320 <HAL_RCC_GetSysClockFreq+0x248>
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <HAL_RCC_GetSysClockFreq+0x114>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d056      	beq.n	8006298 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061ea:	e099      	b.n	8006320 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ec:	4b6f      	ldr	r3, [pc, #444]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d02d      	beq.n	8006254 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80061f8:	4b6c      	ldr	r3, [pc, #432]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	08db      	lsrs	r3, r3, #3
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	4a6b      	ldr	r2, [pc, #428]	@ (80063b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006204:	fa22 f303 	lsr.w	r3, r2, r3
 8006208:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006222:	4b62      	ldr	r3, [pc, #392]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006232:	ed97 6a02 	vldr	s12, [r7, #8]
 8006236:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800623a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800623e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800624e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006252:	e087      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80063c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006266:	4b51      	ldr	r3, [pc, #324]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006276:	ed97 6a02 	vldr	s12, [r7, #8]
 800627a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800627e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800628a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800628e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006292:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006296:	e065      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80063c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062aa:	4b40      	ldr	r3, [pc, #256]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80062be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80062da:	e043      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80063c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ee:	4b2f      	ldr	r3, [pc, #188]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006302:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800630e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800631e:	e021      	b.n	8006364 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800632a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80063c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800632e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006332:	4b1e      	ldr	r3, [pc, #120]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006342:	ed97 6a02 	vldr	s12, [r7, #8]
 8006346:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80063bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800634a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800634e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800635e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006362:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006364:	4b11      	ldr	r3, [pc, #68]	@ (80063ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	0a5b      	lsrs	r3, r3, #9
 800636a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800636e:	3301      	adds	r3, #1
 8006370:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800637c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006388:	ee17 3a90 	vmov	r3, s15
 800638c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800638e:	e005      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
      break;
 8006394:	e002      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006398:	61bb      	str	r3, [r7, #24]
      break;
 800639a:	bf00      	nop
  }

  return sysclockfreq;
 800639c:	69bb      	ldr	r3, [r7, #24]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3724      	adds	r7, #36	@ 0x24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	58024400 	.word	0x58024400
 80063b0:	03d09000 	.word	0x03d09000
 80063b4:	003d0900 	.word	0x003d0900
 80063b8:	007a1200 	.word	0x007a1200
 80063bc:	46000000 	.word	0x46000000
 80063c0:	4c742400 	.word	0x4c742400
 80063c4:	4a742400 	.word	0x4a742400
 80063c8:	4af42400 	.word	0x4af42400

080063cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80063d2:	f7ff fe81 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 80063d6:	4602      	mov	r2, r0
 80063d8:	4b10      	ldr	r3, [pc, #64]	@ (800641c <HAL_RCC_GetHCLKFreq+0x50>)
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	0a1b      	lsrs	r3, r3, #8
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	490f      	ldr	r1, [pc, #60]	@ (8006420 <HAL_RCC_GetHCLKFreq+0x54>)
 80063e4:	5ccb      	ldrb	r3, [r1, r3]
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	fa22 f303 	lsr.w	r3, r2, r3
 80063ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063f0:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <HAL_RCC_GetHCLKFreq+0x50>)
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	4a09      	ldr	r2, [pc, #36]	@ (8006420 <HAL_RCC_GetHCLKFreq+0x54>)
 80063fa:	5cd3      	ldrb	r3, [r2, r3]
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	fa22 f303 	lsr.w	r3, r2, r3
 8006406:	4a07      	ldr	r2, [pc, #28]	@ (8006424 <HAL_RCC_GetHCLKFreq+0x58>)
 8006408:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800640a:	4a07      	ldr	r2, [pc, #28]	@ (8006428 <HAL_RCC_GetHCLKFreq+0x5c>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006410:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <HAL_RCC_GetHCLKFreq+0x58>)
 8006412:	681b      	ldr	r3, [r3, #0]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58024400 	.word	0x58024400
 8006420:	0800be44 	.word	0x0800be44
 8006424:	24000004 	.word	0x24000004
 8006428:	24000000 	.word	0x24000000

0800642c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006430:	f7ff ffcc 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8006434:	4602      	mov	r2, r0
 8006436:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	4904      	ldr	r1, [pc, #16]	@ (8006454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006442:	5ccb      	ldrb	r3, [r1, r3]
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}
 8006450:	58024400 	.word	0x58024400
 8006454:	0800be44 	.word	0x0800be44

08006458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800645c:	f7ff ffb6 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 8006460:	4602      	mov	r2, r0
 8006462:	4b06      	ldr	r3, [pc, #24]	@ (800647c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	0a1b      	lsrs	r3, r3, #8
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	4904      	ldr	r1, [pc, #16]	@ (8006480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800646e:	5ccb      	ldrb	r3, [r1, r3]
 8006470:	f003 031f 	and.w	r3, r3, #31
 8006474:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006478:	4618      	mov	r0, r3
 800647a:	bd80      	pop	{r7, pc}
 800647c:	58024400 	.word	0x58024400
 8006480:	0800be44 	.word	0x0800be44

08006484 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006488:	b0ca      	sub	sp, #296	@ 0x128
 800648a:	af00      	add	r7, sp, #0
 800648c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006490:	2300      	movs	r3, #0
 8006492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006496:	2300      	movs	r3, #0
 8006498:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80064a8:	2500      	movs	r5, #0
 80064aa:	ea54 0305 	orrs.w	r3, r4, r5
 80064ae:	d049      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064ba:	d02f      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80064bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064c0:	d828      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064c6:	d01a      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064cc:	d822      	bhi.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064d6:	d007      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064d8:	e01c      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064da:	4bb8      	ldr	r3, [pc, #736]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064de:	4ab7      	ldr	r2, [pc, #732]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064e6:	e01a      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	3308      	adds	r3, #8
 80064ee:	2102      	movs	r1, #2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f001 fc8f 	bl	8007e14 <RCCEx_PLL2_Config>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80064fc:	e00f      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	3328      	adds	r3, #40	@ 0x28
 8006504:	2102      	movs	r1, #2
 8006506:	4618      	mov	r0, r3
 8006508:	f001 fd36 	bl	8007f78 <RCCEx_PLL3_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006512:	e004      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800651a:	e000      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800651c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006526:	4ba5      	ldr	r3, [pc, #660]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006534:	4aa1      	ldr	r2, [pc, #644]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006536:	430b      	orrs	r3, r1
 8006538:	6513      	str	r3, [r2, #80]	@ 0x50
 800653a:	e003      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006540:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006550:	f04f 0900 	mov.w	r9, #0
 8006554:	ea58 0309 	orrs.w	r3, r8, r9
 8006558:	d047      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800655e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006560:	2b04      	cmp	r3, #4
 8006562:	d82a      	bhi.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006564:	a201      	add	r2, pc, #4	@ (adr r2, 800656c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	08006581 	.word	0x08006581
 8006570:	0800658f 	.word	0x0800658f
 8006574:	080065a5 	.word	0x080065a5
 8006578:	080065c3 	.word	0x080065c3
 800657c:	080065c3 	.word	0x080065c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006580:	4b8e      	ldr	r3, [pc, #568]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	4a8d      	ldr	r2, [pc, #564]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800658a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800658c:	e01a      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	3308      	adds	r3, #8
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f001 fc3c 	bl	8007e14 <RCCEx_PLL2_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065a2:	e00f      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	3328      	adds	r3, #40	@ 0x28
 80065aa:	2100      	movs	r1, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 fce3 	bl	8007f78 <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065b8:	e004      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065c0:	e000      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80065c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065cc:	4b7b      	ldr	r3, [pc, #492]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d0:	f023 0107 	bic.w	r1, r3, #7
 80065d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	4a78      	ldr	r2, [pc, #480]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065dc:	430b      	orrs	r3, r1
 80065de:	6513      	str	r3, [r2, #80]	@ 0x50
 80065e0:	e003      	b.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80065ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80065f6:	f04f 0b00 	mov.w	fp, #0
 80065fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80065fe:	d04c      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660a:	d030      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800660c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006610:	d829      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006612:	2bc0      	cmp	r3, #192	@ 0xc0
 8006614:	d02d      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006616:	2bc0      	cmp	r3, #192	@ 0xc0
 8006618:	d825      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800661a:	2b80      	cmp	r3, #128	@ 0x80
 800661c:	d018      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800661e:	2b80      	cmp	r3, #128	@ 0x80
 8006620:	d821      	bhi.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006626:	2b40      	cmp	r3, #64	@ 0x40
 8006628:	d007      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800662a:	e01c      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662c:	4b63      	ldr	r3, [pc, #396]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800662e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006630:	4a62      	ldr	r2, [pc, #392]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006638:	e01c      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	3308      	adds	r3, #8
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f001 fbe6 	bl	8007e14 <RCCEx_PLL2_Config>
 8006648:	4603      	mov	r3, r0
 800664a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800664e:	e011      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006654:	3328      	adds	r3, #40	@ 0x28
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f001 fc8d 	bl	8007f78 <RCCEx_PLL3_Config>
 800665e:	4603      	mov	r3, r0
 8006660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006664:	e006      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800666c:	e002      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800666e:	bf00      	nop
 8006670:	e000      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800667c:	4b4f      	ldr	r3, [pc, #316]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800667e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006680:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800668a:	4a4c      	ldr	r2, [pc, #304]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800668c:	430b      	orrs	r3, r1
 800668e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006690:	e003      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006692:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006696:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800669a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80066a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80066aa:	2300      	movs	r3, #0
 80066ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80066b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80066b4:	460b      	mov	r3, r1
 80066b6:	4313      	orrs	r3, r2
 80066b8:	d053      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80066ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80066c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066c6:	d035      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80066c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80066cc:	d82e      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80066ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066d2:	d031      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80066d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80066d8:	d828      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80066da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066de:	d01a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80066e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066e4:	d822      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80066ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066ee:	d007      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80066f0:	e01c      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f2:	4b32      	ldr	r3, [pc, #200]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	4a31      	ldr	r2, [pc, #196]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066fe:	e01c      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006704:	3308      	adds	r3, #8
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fb83 	bl	8007e14 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006714:	e011      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671a:	3328      	adds	r3, #40	@ 0x28
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fc2a 	bl	8007f78 <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800672a:	e006      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006732:	e002      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10b      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006742:	4b1e      	ldr	r3, [pc, #120]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006752:	4a1a      	ldr	r2, [pc, #104]	@ (80067bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6593      	str	r3, [r2, #88]	@ 0x58
 8006758:	e003      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800676e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006772:	2300      	movs	r3, #0
 8006774:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006778:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800677c:	460b      	mov	r3, r1
 800677e:	4313      	orrs	r3, r2
 8006780:	d056      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800678a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800678e:	d038      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006790:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006794:	d831      	bhi.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006796:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800679a:	d034      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800679c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80067a0:	d82b      	bhi.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80067a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067a6:	d01d      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80067a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067ac:	d825      	bhi.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80067b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067b6:	d00a      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80067b8:	e01f      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80067ba:	bf00      	nop
 80067bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c0:	4ba2      	ldr	r3, [pc, #648]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	4aa1      	ldr	r2, [pc, #644]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067cc:	e01c      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	3308      	adds	r3, #8
 80067d4:	2100      	movs	r1, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 fb1c 	bl	8007e14 <RCCEx_PLL2_Config>
 80067dc:	4603      	mov	r3, r0
 80067de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067e2:	e011      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e8:	3328      	adds	r3, #40	@ 0x28
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 fbc3 	bl	8007f78 <RCCEx_PLL3_Config>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067f8:	e006      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006800:	e002      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006808:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006810:	4b8e      	ldr	r3, [pc, #568]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006814:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006820:	4a8a      	ldr	r2, [pc, #552]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006822:	430b      	orrs	r3, r1
 8006824:	6593      	str	r3, [r2, #88]	@ 0x58
 8006826:	e003      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800682c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800683c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006846:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800684a:	460b      	mov	r3, r1
 800684c:	4313      	orrs	r3, r2
 800684e:	d03a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006856:	2b30      	cmp	r3, #48	@ 0x30
 8006858:	d01f      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800685a:	2b30      	cmp	r3, #48	@ 0x30
 800685c:	d819      	bhi.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800685e:	2b20      	cmp	r3, #32
 8006860:	d00c      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006862:	2b20      	cmp	r3, #32
 8006864:	d815      	bhi.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d019      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800686a:	2b10      	cmp	r3, #16
 800686c:	d111      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800686e:	4b77      	ldr	r3, [pc, #476]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006872:	4a76      	ldr	r2, [pc, #472]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800687a:	e011      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800687c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006880:	3308      	adds	r3, #8
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fac5 	bl	8007e14 <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006890:	e006      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800689e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068a8:	4b68      	ldr	r3, [pc, #416]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80068b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b6:	4a65      	ldr	r2, [pc, #404]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068b8:	430b      	orrs	r3, r1
 80068ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80068d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068d6:	2300      	movs	r3, #0
 80068d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4313      	orrs	r3, r2
 80068e4:	d051      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068f0:	d035      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80068f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068f6:	d82e      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80068f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068fc:	d031      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80068fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006902:	d828      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006908:	d01a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800690a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800690e:	d822      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006918:	d007      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800691a:	e01c      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691c:	4b4b      	ldr	r3, [pc, #300]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	4a4a      	ldr	r2, [pc, #296]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006928:	e01c      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692e:	3308      	adds	r3, #8
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fa6e 	bl	8007e14 <RCCEx_PLL2_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800693e:	e011      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006944:	3328      	adds	r3, #40	@ 0x28
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f001 fb15 	bl	8007f78 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006954:	e006      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800695c:	e002      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800696c:	4b37      	ldr	r3, [pc, #220]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800696e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006970:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006978:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800697a:	4a34      	ldr	r2, [pc, #208]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800697c:	430b      	orrs	r3, r1
 800697e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006980:	e003      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800698a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006996:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800699a:	2300      	movs	r3, #0
 800699c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80069a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80069a4:	460b      	mov	r3, r1
 80069a6:	4313      	orrs	r3, r2
 80069a8:	d056      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069b4:	d033      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80069b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069ba:	d82c      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069c0:	d02f      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80069c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80069c6:	d826      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069cc:	d02b      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80069ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069d2:	d820      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069d8:	d012      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80069da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069de:	d81a      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d022      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e8:	d115      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	3308      	adds	r3, #8
 80069f0:	2101      	movs	r1, #1
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 fa0e 	bl	8007e14 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069fe:	e015      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a04:	3328      	adds	r3, #40	@ 0x28
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fab5 	bl	8007f78 <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a14:	e00a      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a1c:	e006      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a1e:	bf00      	nop
 8006a20:	e004      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a22:	bf00      	nop
 8006a24:	e002      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a26:	bf00      	nop
 8006a28:	e000      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10d      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a42:	4a02      	ldr	r2, [pc, #8]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a48:	e006      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006a4a:	bf00      	nop
 8006a4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a60:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006a64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4313      	orrs	r3, r2
 8006a76:	d055      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a84:	d033      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a8a:	d82c      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a90:	d02f      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a96:	d826      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006a98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a9c:	d02b      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006a9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006aa2:	d820      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006aa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aa8:	d012      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aae:	d81a      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d022      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ab8:	d115      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006abe:	3308      	adds	r3, #8
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 f9a6 	bl	8007e14 <RCCEx_PLL2_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ace:	e015      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad4:	3328      	adds	r3, #40	@ 0x28
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 fa4d 	bl	8007f78 <RCCEx_PLL3_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ae4:	e00a      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006aec:	e006      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006aee:	bf00      	nop
 8006af0:	e004      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006af2:	bf00      	nop
 8006af4:	e002      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006af6:	bf00      	nop
 8006af8:	e000      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006b04:	4ba3      	ldr	r3, [pc, #652]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b08:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b14:	4a9f      	ldr	r2, [pc, #636]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b1a:	e003      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006b30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006b3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d037      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b4e:	d00e      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b54:	d816      	bhi.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d018      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006b5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b5e:	d111      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b60:	4b8c      	ldr	r3, [pc, #560]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b64:	4a8b      	ldr	r2, [pc, #556]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b6c:	e00f      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b72:	3308      	adds	r3, #8
 8006b74:	2101      	movs	r1, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f94c 	bl	8007e14 <RCCEx_PLL2_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b96:	4b7f      	ldr	r3, [pc, #508]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba4:	4a7b      	ldr	r2, [pc, #492]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006baa:	e003      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006bca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	d039      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d81c      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006bde:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c21 	.word	0x08006c21
 8006be8:	08006bf5 	.word	0x08006bf5
 8006bec:	08006c03 	.word	0x08006c03
 8006bf0:	08006c21 	.word	0x08006c21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf4:	4b67      	ldr	r3, [pc, #412]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf8:	4a66      	ldr	r2, [pc, #408]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c00:	e00f      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c06:	3308      	adds	r3, #8
 8006c08:	2102      	movs	r1, #2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f902 	bl	8007e14 <RCCEx_PLL2_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c16:	e004      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c1e:	e000      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c2e:	f023 0103 	bic.w	r1, r3, #3
 8006c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c38:	4a56      	ldr	r2, [pc, #344]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c3e:	e003      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f000 809f 	beq.w	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c76:	f7fa fdb5 	bl	80017e4 <HAL_GetTick>
 8006c7a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c80:	f7fa fdb0 	bl	80017e4 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b64      	cmp	r3, #100	@ 0x64
 8006c8e:	d903      	bls.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c96:	e005      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c98:	4b3f      	ldr	r3, [pc, #252]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0ed      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d179      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006cac:	4b39      	ldr	r3, [pc, #228]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cb8:	4053      	eors	r3, r2
 8006cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d015      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cc2:	4b34      	ldr	r3, [pc, #208]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cce:	4b31      	ldr	r3, [pc, #196]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cd2:	4a30      	ldr	r2, [pc, #192]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cda:	4b2e      	ldr	r3, [pc, #184]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cde:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ce4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cfa:	d118      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fa fd72 	bl	80017e4 <HAL_GetTick>
 8006d00:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d04:	e00d      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fa fd6d 	bl	80017e4 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d903      	bls.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006d20:	e005      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d22:	4b1c      	ldr	r3, [pc, #112]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0eb      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d129      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d46:	d10e      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006d48:	4b12      	ldr	r3, [pc, #72]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d58:	091a      	lsrs	r2, r3, #4
 8006d5a:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6113      	str	r3, [r2, #16]
 8006d64:	e005      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006d66:	4b0b      	ldr	r3, [pc, #44]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006d70:	6113      	str	r3, [r2, #16]
 8006d72:	4b08      	ldr	r3, [pc, #32]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d74:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d82:	4a04      	ldr	r2, [pc, #16]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d88:	e00e      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006d92:	e009      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006d94:	58024400 	.word	0x58024400
 8006d98:	58024800 	.word	0x58024800
 8006d9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f002 0301 	and.w	r3, r2, #1
 8006db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db8:	2300      	movs	r3, #0
 8006dba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006dbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f000 8089 	beq.w	8006edc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006dd0:	2b28      	cmp	r3, #40	@ 0x28
 8006dd2:	d86b      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ddc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006eb5 	.word	0x08006eb5
 8006de0:	08006ead 	.word	0x08006ead
 8006de4:	08006ead 	.word	0x08006ead
 8006de8:	08006ead 	.word	0x08006ead
 8006dec:	08006ead 	.word	0x08006ead
 8006df0:	08006ead 	.word	0x08006ead
 8006df4:	08006ead 	.word	0x08006ead
 8006df8:	08006ead 	.word	0x08006ead
 8006dfc:	08006e81 	.word	0x08006e81
 8006e00:	08006ead 	.word	0x08006ead
 8006e04:	08006ead 	.word	0x08006ead
 8006e08:	08006ead 	.word	0x08006ead
 8006e0c:	08006ead 	.word	0x08006ead
 8006e10:	08006ead 	.word	0x08006ead
 8006e14:	08006ead 	.word	0x08006ead
 8006e18:	08006ead 	.word	0x08006ead
 8006e1c:	08006e97 	.word	0x08006e97
 8006e20:	08006ead 	.word	0x08006ead
 8006e24:	08006ead 	.word	0x08006ead
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ead 	.word	0x08006ead
 8006e30:	08006ead 	.word	0x08006ead
 8006e34:	08006ead 	.word	0x08006ead
 8006e38:	08006ead 	.word	0x08006ead
 8006e3c:	08006eb5 	.word	0x08006eb5
 8006e40:	08006ead 	.word	0x08006ead
 8006e44:	08006ead 	.word	0x08006ead
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	08006ead 	.word	0x08006ead
 8006e50:	08006ead 	.word	0x08006ead
 8006e54:	08006ead 	.word	0x08006ead
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006eb5 	.word	0x08006eb5
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006ead 	.word	0x08006ead
 8006e68:	08006ead 	.word	0x08006ead
 8006e6c:	08006ead 	.word	0x08006ead
 8006e70:	08006ead 	.word	0x08006ead
 8006e74:	08006ead 	.word	0x08006ead
 8006e78:	08006ead 	.word	0x08006ead
 8006e7c:	08006eb5 	.word	0x08006eb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e84:	3308      	adds	r3, #8
 8006e86:	2101      	movs	r1, #1
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 ffc3 	bl	8007e14 <RCCEx_PLL2_Config>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e94:	e00f      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e9a:	3328      	adds	r3, #40	@ 0x28
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f001 f86a 	bl	8007f78 <RCCEx_PLL3_Config>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006eaa:	e004      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ebe:	4bbf      	ldr	r3, [pc, #764]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ecc:	4abb      	ldr	r2, [pc, #748]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	6553      	str	r3, [r2, #84]	@ 0x54
 8006ed2:	e003      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f002 0302 	and.w	r3, r2, #2
 8006ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006eec:	2300      	movs	r3, #0
 8006eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006ef2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	d041      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d824      	bhi.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f59 	.word	0x08006f59
 8006f10:	08006f25 	.word	0x08006f25
 8006f14:	08006f3b 	.word	0x08006f3b
 8006f18:	08006f59 	.word	0x08006f59
 8006f1c:	08006f59 	.word	0x08006f59
 8006f20:	08006f59 	.word	0x08006f59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f28:	3308      	adds	r3, #8
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 ff71 	bl	8007e14 <RCCEx_PLL2_Config>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f38:	e00f      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	3328      	adds	r3, #40	@ 0x28
 8006f40:	2101      	movs	r1, #1
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 f818 	bl	8007f78 <RCCEx_PLL3_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f4e:	e004      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f62:	4b96      	ldr	r3, [pc, #600]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f66:	f023 0107 	bic.w	r1, r3, #7
 8006f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006f70:	4a92      	ldr	r2, [pc, #584]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f72:	430b      	orrs	r3, r1
 8006f74:	6553      	str	r3, [r2, #84]	@ 0x54
 8006f76:	e003      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f002 0304 	and.w	r3, r2, #4
 8006f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d044      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fa8:	2b05      	cmp	r3, #5
 8006faa:	d825      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006fac:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	08006fcd 	.word	0x08006fcd
 8006fbc:	08006fe3 	.word	0x08006fe3
 8006fc0:	08007001 	.word	0x08007001
 8006fc4:	08007001 	.word	0x08007001
 8006fc8:	08007001 	.word	0x08007001
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 ff1d 	bl	8007e14 <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00f      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	3328      	adds	r3, #40	@ 0x28
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 ffc4 	bl	8007f78 <RCCEx_PLL3_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ff6:	e004      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ffe:	e000      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800700a:	4b6c      	ldr	r3, [pc, #432]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800700e:	f023 0107 	bic.w	r1, r3, #7
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800701a:	4a68      	ldr	r2, [pc, #416]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800701c:	430b      	orrs	r3, r1
 800701e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007020:	e003      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800702a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f002 0320 	and.w	r3, r2, #32
 8007036:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800703a:	2300      	movs	r3, #0
 800703c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007040:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007044:	460b      	mov	r3, r1
 8007046:	4313      	orrs	r3, r2
 8007048:	d055      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007052:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007056:	d033      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007058:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800705c:	d82c      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007062:	d02f      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007068:	d826      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800706a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800706e:	d02b      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007070:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007074:	d820      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800707a:	d012      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007080:	d81a      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d022      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800708a:	d115      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800708c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007090:	3308      	adds	r3, #8
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f000 febd 	bl	8007e14 <RCCEx_PLL2_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070a0:	e015      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	3328      	adds	r3, #40	@ 0x28
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 ff64 	bl	8007f78 <RCCEx_PLL3_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070b6:	e00a      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070be:	e006      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070c0:	bf00      	nop
 80070c2:	e004      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80070cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070d6:	4b39      	ldr	r3, [pc, #228]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80070de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e6:	4a35      	ldr	r2, [pc, #212]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80070ec:	e003      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007106:	2300      	movs	r3, #0
 8007108:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800710c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007110:	460b      	mov	r3, r1
 8007112:	4313      	orrs	r3, r2
 8007114:	d058      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800711e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007122:	d033      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007124:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007128:	d82c      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712e:	d02f      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007134:	d826      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007136:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800713a:	d02b      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800713c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007140:	d820      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007142:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007146:	d012      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800714c:	d81a      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d022      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007156:	d115      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715c:	3308      	adds	r3, #8
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fe57 	bl	8007e14 <RCCEx_PLL2_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800716c:	e015      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007172:	3328      	adds	r3, #40	@ 0x28
 8007174:	2102      	movs	r1, #2
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fefe 	bl	8007f78 <RCCEx_PLL3_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007182:	e00a      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800718a:	e006      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800718c:	bf00      	nop
 800718e:	e004      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007190:	bf00      	nop
 8007192:	e002      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007194:	bf00      	nop
 8007196:	e000      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10e      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071a2:	4b06      	ldr	r3, [pc, #24]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80071b2:	4a02      	ldr	r2, [pc, #8]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071b4:	430b      	orrs	r3, r1
 80071b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b8:	e006      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80071ba:	bf00      	nop
 80071bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80071d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80071e2:	460b      	mov	r3, r1
 80071e4:	4313      	orrs	r3, r2
 80071e6:	d055      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071f4:	d033      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80071f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80071fa:	d82c      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80071fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007200:	d02f      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007206:	d826      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007208:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800720c:	d02b      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800720e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007212:	d820      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007218:	d012      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800721a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800721e:	d81a      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d022      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007228:	d115      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	3308      	adds	r3, #8
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fdee 	bl	8007e14 <RCCEx_PLL2_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800723e:	e015      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007244:	3328      	adds	r3, #40	@ 0x28
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fe95 	bl	8007f78 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007254:	e00a      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800725c:	e006      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800726a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10b      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007274:	4ba1      	ldr	r3, [pc, #644]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007278:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007284:	4a9d      	ldr	r2, [pc, #628]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007286:	430b      	orrs	r3, r1
 8007288:	6593      	str	r3, [r2, #88]	@ 0x58
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f002 0308 	and.w	r3, r2, #8
 80072a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072a4:	2300      	movs	r3, #0
 80072a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80072ae:	460b      	mov	r3, r1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	d01e      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80072b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c0:	d10c      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c6:	3328      	adds	r3, #40	@ 0x28
 80072c8:	2102      	movs	r1, #2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fe54 	bl	8007f78 <RCCEx_PLL3_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80072dc:	4b87      	ldr	r3, [pc, #540]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072ec:	4a83      	ldr	r2, [pc, #524]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ee:	430b      	orrs	r3, r1
 80072f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f002 0310 	and.w	r3, r2, #16
 80072fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007302:	2300      	movs	r3, #0
 8007304:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007308:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800730c:	460b      	mov	r3, r1
 800730e:	4313      	orrs	r3, r2
 8007310:	d01e      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800731a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800731e:	d10c      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	3328      	adds	r3, #40	@ 0x28
 8007326:	2102      	movs	r1, #2
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fe25 	bl	8007f78 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800733a:	4b70      	ldr	r3, [pc, #448]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800733e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800734a:	4a6c      	ldr	r2, [pc, #432]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800734c:	430b      	orrs	r3, r1
 800734e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800735c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007366:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	d03e      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007374:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007378:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800737c:	d022      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800737e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007382:	d81b      	bhi.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800738c:	d00b      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800738e:	e015      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007394:	3308      	adds	r3, #8
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fd3b 	bl	8007e14 <RCCEx_PLL2_Config>
 800739e:	4603      	mov	r3, r0
 80073a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073a4:	e00f      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	3328      	adds	r3, #40	@ 0x28
 80073ac:	2102      	movs	r1, #2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fde2 	bl	8007f78 <RCCEx_PLL3_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073ba:	e004      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073c2:	e000      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80073c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073ce:	4b4b      	ldr	r3, [pc, #300]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80073de:	4a47      	ldr	r2, [pc, #284]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073e0:	430b      	orrs	r3, r1
 80073e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e4:	e003      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80073fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80073fc:	2300      	movs	r3, #0
 80073fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007400:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007404:	460b      	mov	r3, r1
 8007406:	4313      	orrs	r3, r2
 8007408:	d03b      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007412:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007416:	d01f      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007418:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800741c:	d818      	bhi.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800741e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007428:	d007      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800742a:	e011      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800742c:	4b33      	ldr	r3, [pc, #204]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	4a32      	ldr	r2, [pc, #200]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007438:	e00f      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	3328      	adds	r3, #40	@ 0x28
 8007440:	2101      	movs	r1, #1
 8007442:	4618      	mov	r0, r3
 8007444:	f000 fd98 	bl	8007f78 <RCCEx_PLL3_Config>
 8007448:	4603      	mov	r3, r0
 800744a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800744e:	e004      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007456:	e000      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10b      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007462:	4b26      	ldr	r3, [pc, #152]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007466:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007472:	4a22      	ldr	r2, [pc, #136]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007474:	430b      	orrs	r3, r1
 8007476:	6553      	str	r3, [r2, #84]	@ 0x54
 8007478:	e003      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800748e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007490:	2300      	movs	r3, #0
 8007492:	677b      	str	r3, [r7, #116]	@ 0x74
 8007494:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007498:	460b      	mov	r3, r1
 800749a:	4313      	orrs	r3, r2
 800749c:	d034      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80074a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ac:	d007      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80074ae:	e011      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b0:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	4a11      	ldr	r2, [pc, #68]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074bc:	e00e      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c2:	3308      	adds	r3, #8
 80074c4:	2102      	movs	r1, #2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f000 fca4 	bl	8007e14 <RCCEx_PLL2_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074d2:	e003      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10d      	bne.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074e4:	4b05      	ldr	r3, [pc, #20]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074f2:	4a02      	ldr	r2, [pc, #8]	@ (80074fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074f4:	430b      	orrs	r3, r1
 80074f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074f8:	e006      	b.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80074fa:	bf00      	nop
 80074fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007510:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007514:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007516:	2300      	movs	r3, #0
 8007518:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800751a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800751e:	460b      	mov	r3, r1
 8007520:	4313      	orrs	r3, r2
 8007522:	d00c      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007528:	3328      	adds	r3, #40	@ 0x28
 800752a:	2102      	movs	r1, #2
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fd23 	bl	8007f78 <RCCEx_PLL3_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800754a:	663b      	str	r3, [r7, #96]	@ 0x60
 800754c:	2300      	movs	r3, #0
 800754e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007550:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007554:	460b      	mov	r3, r1
 8007556:	4313      	orrs	r3, r2
 8007558:	d038      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007562:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007566:	d018      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007568:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800756c:	d811      	bhi.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800756e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007572:	d014      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007578:	d80b      	bhi.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d011      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800757e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007582:	d106      	bne.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007584:	4bc3      	ldr	r3, [pc, #780]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	4ac2      	ldr	r2, [pc, #776]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800758a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800758e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007590:	e008      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007598:	e004      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800759a:	bf00      	nop
 800759c:	e002      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800759e:	bf00      	nop
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80075a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075ac:	4bb9      	ldr	r3, [pc, #740]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075bc:	4ab5      	ldr	r2, [pc, #724]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075be:	430b      	orrs	r3, r1
 80075c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80075c2:	e003      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80075d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075da:	2300      	movs	r3, #0
 80075dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80075e2:	460b      	mov	r3, r1
 80075e4:	4313      	orrs	r3, r2
 80075e6:	d009      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075e8:	4baa      	ldr	r3, [pc, #680]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80075f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075f6:	4aa7      	ldr	r2, [pc, #668]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075f8:	430b      	orrs	r3, r1
 80075fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80075fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007608:	653b      	str	r3, [r7, #80]	@ 0x50
 800760a:	2300      	movs	r3, #0
 800760c:	657b      	str	r3, [r7, #84]	@ 0x54
 800760e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007612:	460b      	mov	r3, r1
 8007614:	4313      	orrs	r3, r2
 8007616:	d00a      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007618:	4b9e      	ldr	r3, [pc, #632]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007624:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007628:	4a9a      	ldr	r2, [pc, #616]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800762a:	430b      	orrs	r3, r1
 800762c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800762e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800763a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800763c:	2300      	movs	r3, #0
 800763e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007640:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007644:	460b      	mov	r3, r1
 8007646:	4313      	orrs	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800764a:	4b92      	ldr	r3, [pc, #584]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800764c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800764e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007658:	4a8e      	ldr	r2, [pc, #568]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800765a:	430b      	orrs	r3, r1
 800765c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800765e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800766a:	643b      	str	r3, [r7, #64]	@ 0x40
 800766c:	2300      	movs	r3, #0
 800766e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007670:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007674:	460b      	mov	r3, r1
 8007676:	4313      	orrs	r3, r2
 8007678:	d00e      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800767a:	4b86      	ldr	r3, [pc, #536]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	4a85      	ldr	r2, [pc, #532]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007680:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007684:	6113      	str	r3, [r2, #16]
 8007686:	4b83      	ldr	r3, [pc, #524]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007688:	6919      	ldr	r1, [r3, #16]
 800768a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007692:	4a80      	ldr	r2, [pc, #512]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007694:	430b      	orrs	r3, r1
 8007696:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80076a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076a6:	2300      	movs	r3, #0
 80076a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80076ae:	460b      	mov	r3, r1
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d009      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80076b4:	4b77      	ldr	r3, [pc, #476]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c2:	4a74      	ldr	r2, [pc, #464]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076c4:	430b      	orrs	r3, r1
 80076c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80076d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80076da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80076de:	460b      	mov	r3, r1
 80076e0:	4313      	orrs	r3, r2
 80076e2:	d00a      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076e4:	4b6b      	ldr	r3, [pc, #428]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80076ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076f4:	4a67      	ldr	r2, [pc, #412]	@ (8007894 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80076fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	2100      	movs	r1, #0
 8007704:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800770c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d011      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	3308      	adds	r3, #8
 800771c:	2100      	movs	r1, #0
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fb78 	bl	8007e14 <RCCEx_PLL2_Config>
 8007724:	4603      	mov	r3, r0
 8007726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800772a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007736:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	2100      	movs	r1, #0
 8007744:	6239      	str	r1, [r7, #32]
 8007746:	f003 0302 	and.w	r3, r3, #2
 800774a:	627b      	str	r3, [r7, #36]	@ 0x24
 800774c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007750:	460b      	mov	r3, r1
 8007752:	4313      	orrs	r3, r2
 8007754:	d011      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775a:	3308      	adds	r3, #8
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fb58 	bl	8007e14 <RCCEx_PLL2_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	2100      	movs	r1, #0
 8007784:	61b9      	str	r1, [r7, #24]
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007790:	460b      	mov	r3, r1
 8007792:	4313      	orrs	r3, r2
 8007794:	d011      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	3308      	adds	r3, #8
 800779c:	2102      	movs	r1, #2
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fb38 	bl	8007e14 <RCCEx_PLL2_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80077aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80077ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	2100      	movs	r1, #0
 80077c4:	6139      	str	r1, [r7, #16]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80077d0:	460b      	mov	r3, r1
 80077d2:	4313      	orrs	r3, r2
 80077d4:	d011      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077da:	3328      	adds	r3, #40	@ 0x28
 80077dc:	2100      	movs	r1, #0
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fbca 	bl	8007f78 <RCCEx_PLL3_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80077ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	2100      	movs	r1, #0
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	f003 0310 	and.w	r3, r3, #16
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007810:	460b      	mov	r3, r1
 8007812:	4313      	orrs	r3, r2
 8007814:	d011      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781a:	3328      	adds	r3, #40	@ 0x28
 800781c:	2101      	movs	r1, #1
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fbaa 	bl	8007f78 <RCCEx_PLL3_Config>
 8007824:	4603      	mov	r3, r0
 8007826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800782a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	2100      	movs	r1, #0
 8007844:	6039      	str	r1, [r7, #0]
 8007846:	f003 0320 	and.w	r3, r3, #32
 800784a:	607b      	str	r3, [r7, #4]
 800784c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007850:	460b      	mov	r3, r1
 8007852:	4313      	orrs	r3, r2
 8007854:	d011      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785a:	3328      	adds	r3, #40	@ 0x28
 800785c:	2102      	movs	r1, #2
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fb8a 	bl	8007f78 <RCCEx_PLL3_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800786a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800787a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	e000      	b.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
}
 8007888:	4618      	mov	r0, r3
 800788a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800788e:	46bd      	mov	sp, r7
 8007890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007894:	58024400 	.word	0x58024400

08007898 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800789c:	f7fe fd96 	bl	80063cc <HAL_RCC_GetHCLKFreq>
 80078a0:	4602      	mov	r2, r0
 80078a2:	4b06      	ldr	r3, [pc, #24]	@ (80078bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	091b      	lsrs	r3, r3, #4
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	4904      	ldr	r1, [pc, #16]	@ (80078c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80078ae:	5ccb      	ldrb	r3, [r1, r3]
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	58024400 	.word	0x58024400
 80078c0:	0800be44 	.word	0x0800be44

080078c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b089      	sub	sp, #36	@ 0x24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078cc:	4ba1      	ldr	r3, [pc, #644]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	f003 0303 	and.w	r3, r3, #3
 80078d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078d6:	4b9f      	ldr	r3, [pc, #636]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078da:	0b1b      	lsrs	r3, r3, #12
 80078dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80078e2:	4b9c      	ldr	r3, [pc, #624]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	091b      	lsrs	r3, r3, #4
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80078ee:	4b99      	ldr	r3, [pc, #612]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078f2:	08db      	lsrs	r3, r3, #3
 80078f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	fb02 f303 	mul.w	r3, r2, r3
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 8111 	beq.w	8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	2b02      	cmp	r3, #2
 8007916:	f000 8083 	beq.w	8007a20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	2b02      	cmp	r3, #2
 800791e:	f200 80a1 	bhi.w	8007a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d056      	beq.n	80079dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800792e:	e099      	b.n	8007a64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007930:	4b88      	ldr	r3, [pc, #544]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	2b00      	cmp	r3, #0
 800793a:	d02d      	beq.n	8007998 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800793c:	4b85      	ldr	r3, [pc, #532]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	08db      	lsrs	r3, r3, #3
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	4a84      	ldr	r2, [pc, #528]	@ (8007b58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
 800794c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007966:	4b7b      	ldr	r3, [pc, #492]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007976:	ed97 6a03 	vldr	s12, [r7, #12]
 800797a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800797e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800798a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800798e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007992:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007996:	e087      	b.n	8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80079a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80079be:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079da:	e065      	b.n	8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ee:	4b59      	ldr	r3, [pc, #356]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a1e:	e043      	b.n	8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a32:	4b48      	ldr	r3, [pc, #288]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3a:	ee07 3a90 	vmov	s15, r3
 8007a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a62:	e021      	b.n	8007aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a76:	4b37      	ldr	r3, [pc, #220]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aac:	0a5b      	lsrs	r3, r3, #9
 8007aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab2:	ee07 3a90 	vmov	s15, r3
 8007ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ace:	ee17 2a90 	vmov	r2, s15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	0c1b      	lsrs	r3, r3, #16
 8007adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007af0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007afc:	ee17 2a90 	vmov	r2, s15
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007b04:	4b13      	ldr	r3, [pc, #76]	@ (8007b54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	0e1b      	lsrs	r3, r3, #24
 8007b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b2a:	ee17 2a90 	vmov	r2, s15
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b32:	e008      	b.n	8007b46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	609a      	str	r2, [r3, #8]
}
 8007b46:	bf00      	nop
 8007b48:	3724      	adds	r7, #36	@ 0x24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
 8007b58:	03d09000 	.word	0x03d09000
 8007b5c:	46000000 	.word	0x46000000
 8007b60:	4c742400 	.word	0x4c742400
 8007b64:	4a742400 	.word	0x4a742400
 8007b68:	4af42400 	.word	0x4af42400

08007b6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b089      	sub	sp, #36	@ 0x24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b74:	4ba1      	ldr	r3, [pc, #644]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b7e:	4b9f      	ldr	r3, [pc, #636]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	0d1b      	lsrs	r3, r3, #20
 8007b84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b8a:	4b9c      	ldr	r3, [pc, #624]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b96:	4b99      	ldr	r3, [pc, #612]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9a:	08db      	lsrs	r3, r3, #3
 8007b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8111 	beq.w	8007ddc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	f000 8083 	beq.w	8007cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	f200 80a1 	bhi.w	8007d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d056      	beq.n	8007c84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007bd6:	e099      	b.n	8007d0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bd8:	4b88      	ldr	r3, [pc, #544]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d02d      	beq.n	8007c40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007be4:	4b85      	ldr	r3, [pc, #532]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	08db      	lsrs	r3, r3, #3
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	4a84      	ldr	r2, [pc, #528]	@ (8007e00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	ee07 3a90 	vmov	s15, r3
 8007bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c0e:	4b7b      	ldr	r3, [pc, #492]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c3e:	e087      	b.n	8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007e08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c52:	4b6a      	ldr	r3, [pc, #424]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c82:	e065      	b.n	8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c96:	4b59      	ldr	r3, [pc, #356]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007caa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cc6:	e043      	b.n	8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cda:	4b48      	ldr	r3, [pc, #288]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d0a:	e021      	b.n	8007d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007e0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1e:	4b37      	ldr	r3, [pc, #220]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007e04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d50:	4b2a      	ldr	r3, [pc, #168]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d54:	0a5b      	lsrs	r3, r3, #9
 8007d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d76:	ee17 2a90 	vmov	r2, s15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d82:	0c1b      	lsrs	r3, r3, #16
 8007d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d88:	ee07 3a90 	vmov	s15, r3
 8007d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007da0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da4:	ee17 2a90 	vmov	r2, s15
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007dac:	4b13      	ldr	r3, [pc, #76]	@ (8007dfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007db0:	0e1b      	lsrs	r3, r3, #24
 8007db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dd2:	ee17 2a90 	vmov	r2, s15
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007dda:	e008      	b.n	8007dee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	609a      	str	r2, [r3, #8]
}
 8007dee:	bf00      	nop
 8007df0:	3724      	adds	r7, #36	@ 0x24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	03d09000 	.word	0x03d09000
 8007e04:	46000000 	.word	0x46000000
 8007e08:	4c742400 	.word	0x4c742400
 8007e0c:	4a742400 	.word	0x4a742400
 8007e10:	4af42400 	.word	0x4af42400

08007e14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e22:	4b53      	ldr	r3, [pc, #332]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d101      	bne.n	8007e32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e099      	b.n	8007f66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e32:	4b4f      	ldr	r3, [pc, #316]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a4e      	ldr	r2, [pc, #312]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007e38:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e3e:	f7f9 fcd1 	bl	80017e4 <HAL_GetTick>
 8007e42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e44:	e008      	b.n	8007e58 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e46:	f7f9 fccd 	bl	80017e4 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e086      	b.n	8007f66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007e58:	4b45      	ldr	r3, [pc, #276]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1f0      	bne.n	8007e46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007e64:	4b42      	ldr	r3, [pc, #264]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e68:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	031b      	lsls	r3, r3, #12
 8007e72:	493f      	ldr	r1, [pc, #252]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	025b      	lsls	r3, r3, #9
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	041b      	lsls	r3, r3, #16
 8007e96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	061b      	lsls	r3, r3, #24
 8007ea4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ea8:	4931      	ldr	r1, [pc, #196]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007eae:	4b30      	ldr	r3, [pc, #192]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	492d      	ldr	r1, [pc, #180]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec4:	f023 0220 	bic.w	r2, r3, #32
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	4928      	ldr	r1, [pc, #160]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007ed2:	4b27      	ldr	r3, [pc, #156]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed6:	4a26      	ldr	r2, [pc, #152]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ed8:	f023 0310 	bic.w	r3, r3, #16
 8007edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ede:	4b24      	ldr	r3, [pc, #144]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ee0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ee2:	4b24      	ldr	r3, [pc, #144]	@ (8007f74 <RCCEx_PLL2_Config+0x160>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	69d2      	ldr	r2, [r2, #28]
 8007eea:	00d2      	lsls	r2, r2, #3
 8007eec:	4920      	ldr	r1, [pc, #128]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007ef8:	f043 0310 	orr.w	r3, r3, #16
 8007efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d106      	bne.n	8007f12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f04:	4b1a      	ldr	r3, [pc, #104]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	4a19      	ldr	r2, [pc, #100]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f0a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f10:	e00f      	b.n	8007f32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d106      	bne.n	8007f26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f18:	4b15      	ldr	r3, [pc, #84]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	4a14      	ldr	r2, [pc, #80]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f24:	e005      	b.n	8007f32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f26:	4b12      	ldr	r3, [pc, #72]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	4a11      	ldr	r2, [pc, #68]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f32:	4b0f      	ldr	r3, [pc, #60]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a0e      	ldr	r2, [pc, #56]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f38:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007f3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f3e:	f7f9 fc51 	bl	80017e4 <HAL_GetTick>
 8007f42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f44:	e008      	b.n	8007f58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f46:	f7f9 fc4d 	bl	80017e4 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d901      	bls.n	8007f58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	e006      	b.n	8007f66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007f58:	4b05      	ldr	r3, [pc, #20]	@ (8007f70 <RCCEx_PLL2_Config+0x15c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d0f0      	beq.n	8007f46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	58024400 	.word	0x58024400
 8007f74:	ffff0007 	.word	0xffff0007

08007f78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f86:	4b53      	ldr	r3, [pc, #332]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8007f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	d101      	bne.n	8007f96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e099      	b.n	80080ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f96:	4b4f      	ldr	r3, [pc, #316]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8007f9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa2:	f7f9 fc1f 	bl	80017e4 <HAL_GetTick>
 8007fa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fa8:	e008      	b.n	8007fbc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007faa:	f7f9 fc1b 	bl	80017e4 <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d901      	bls.n	8007fbc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e086      	b.n	80080ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007fbc:	4b45      	ldr	r3, [pc, #276]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1f0      	bne.n	8007faa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007fc8:	4b42      	ldr	r3, [pc, #264]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8007fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fcc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	051b      	lsls	r3, r3, #20
 8007fd6:	493f      	ldr	r1, [pc, #252]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	628b      	str	r3, [r1, #40]	@ 0x28
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	025b      	lsls	r3, r3, #9
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	041b      	lsls	r3, r3, #16
 8007ffa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ffe:	431a      	orrs	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	3b01      	subs	r3, #1
 8008006:	061b      	lsls	r3, r3, #24
 8008008:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800800c:	4931      	ldr	r1, [pc, #196]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800800e:	4313      	orrs	r3, r2
 8008010:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008012:	4b30      	ldr	r3, [pc, #192]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008016:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	492d      	ldr	r1, [pc, #180]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008020:	4313      	orrs	r3, r2
 8008022:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008024:	4b2b      	ldr	r3, [pc, #172]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	4928      	ldr	r1, [pc, #160]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008032:	4313      	orrs	r3, r2
 8008034:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008036:	4b27      	ldr	r3, [pc, #156]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	4a26      	ldr	r2, [pc, #152]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800803c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008040:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008042:	4b24      	ldr	r3, [pc, #144]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008046:	4b24      	ldr	r3, [pc, #144]	@ (80080d8 <RCCEx_PLL3_Config+0x160>)
 8008048:	4013      	ands	r3, r2
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	69d2      	ldr	r2, [r2, #28]
 800804e:	00d2      	lsls	r2, r2, #3
 8008050:	4920      	ldr	r1, [pc, #128]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008052:	4313      	orrs	r3, r2
 8008054:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008056:	4b1f      	ldr	r3, [pc, #124]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805a:	4a1e      	ldr	r2, [pc, #120]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800805c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008060:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d106      	bne.n	8008076 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008068:	4b1a      	ldr	r3, [pc, #104]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800806a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806c:	4a19      	ldr	r2, [pc, #100]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800806e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008072:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008074:	e00f      	b.n	8008096 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d106      	bne.n	800808a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800807c:	4b15      	ldr	r3, [pc, #84]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	4a14      	ldr	r2, [pc, #80]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008082:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008086:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008088:	e005      	b.n	8008096 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800808a:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	4a11      	ldr	r2, [pc, #68]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008090:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008094:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008096:	4b0f      	ldr	r3, [pc, #60]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a0e      	ldr	r2, [pc, #56]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 800809c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a2:	f7f9 fb9f 	bl	80017e4 <HAL_GetTick>
 80080a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080a8:	e008      	b.n	80080bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080aa:	f7f9 fb9b 	bl	80017e4 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e006      	b.n	80080ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80080bc:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <RCCEx_PLL3_Config+0x15c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0f0      	beq.n	80080aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	58024400 	.word	0x58024400
 80080d8:	ffff0007 	.word	0xffff0007

080080dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e042      	b.n	8008174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7f9 f8c5 	bl	8001290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2224      	movs	r2, #36	@ 0x24
 800810a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f022 0201 	bic.w	r2, r2, #1
 800811c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f001 fa4a 	bl	80095c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fcdf 	bl	8008af0 <UART_SetConfig>
 8008132:	4603      	mov	r3, r0
 8008134:	2b01      	cmp	r3, #1
 8008136:	d101      	bne.n	800813c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e01b      	b.n	8008174 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800814a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800815a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0201 	orr.w	r2, r2, #1
 800816a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f001 fac9 	bl	8009704 <UART_CheckIdleState>
 8008172:	4603      	mov	r3, r0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800817c:	b480      	push	{r7}
 800817e:	b091      	sub	sp, #68	@ 0x44
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008190:	2b20      	cmp	r3, #32
 8008192:	d178      	bne.n	8008286 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <HAL_UART_Transmit_IT+0x24>
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e071      	b.n	8008288 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	88fa      	ldrh	r2, [r7, #6]
 80081ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	88fa      	ldrh	r2, [r7, #6]
 80081b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2221      	movs	r2, #33	@ 0x21
 80081cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081d8:	d12a      	bne.n	8008230 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e2:	d107      	bne.n	80081f4 <HAL_UART_Transmit_IT+0x78>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d103      	bne.n	80081f4 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4a29      	ldr	r2, [pc, #164]	@ (8008294 <HAL_UART_Transmit_IT+0x118>)
 80081f0:	679a      	str	r2, [r3, #120]	@ 0x78
 80081f2:	e002      	b.n	80081fa <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4a28      	ldr	r2, [pc, #160]	@ (8008298 <HAL_UART_Transmit_IT+0x11c>)
 80081f8:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3308      	adds	r3, #8
 8008200:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008210:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800821a:	637a      	str	r2, [r7, #52]	@ 0x34
 800821c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <HAL_UART_Transmit_IT+0x7e>
 800822e:	e028      	b.n	8008282 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008238:	d107      	bne.n	800824a <HAL_UART_Transmit_IT+0xce>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4a15      	ldr	r2, [pc, #84]	@ (800829c <HAL_UART_Transmit_IT+0x120>)
 8008246:	679a      	str	r2, [r3, #120]	@ 0x78
 8008248:	e002      	b.n	8008250 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4a14      	ldr	r2, [pc, #80]	@ (80082a0 <HAL_UART_Transmit_IT+0x124>)
 800824e:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	613b      	str	r3, [r7, #16]
   return(result);
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008264:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800826e:	623b      	str	r3, [r7, #32]
 8008270:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	69f9      	ldr	r1, [r7, #28]
 8008274:	6a3a      	ldr	r2, [r7, #32]
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	61bb      	str	r3, [r7, #24]
   return(result);
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e6      	bne.n	8008250 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	e000      	b.n	8008288 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008286:	2302      	movs	r3, #2
  }
}
 8008288:	4618      	mov	r0, r3
 800828a:	3744      	adds	r7, #68	@ 0x44
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	08009ecb 	.word	0x08009ecb
 8008298:	08009deb 	.word	0x08009deb
 800829c:	08009d29 	.word	0x08009d29
 80082a0:	08009c71 	.word	0x08009c71

080082a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	@ 0x28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082b8:	2b20      	cmp	r3, #32
 80082ba:	d137      	bne.n	800832c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d002      	beq.n	80082c8 <HAL_UART_Receive_IT+0x24>
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e030      	b.n	800832e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a18      	ldr	r2, [pc, #96]	@ (8008338 <HAL_UART_Receive_IT+0x94>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d01f      	beq.n	800831c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d018      	beq.n	800831c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	e853 3f00 	ldrex	r3, [r3]
 80082f6:	613b      	str	r3, [r7, #16]
   return(result);
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	461a      	mov	r2, r3
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	623b      	str	r3, [r7, #32]
 800830a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	6a3a      	ldr	r2, [r7, #32]
 8008310:	e841 2300 	strex	r3, r2, [r1]
 8008314:	61bb      	str	r3, [r7, #24]
   return(result);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e6      	bne.n	80082ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800831c:	88fb      	ldrh	r3, [r7, #6]
 800831e:	461a      	mov	r2, r3
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f001 fb06 	bl	8009934 <UART_Start_Receive_IT>
 8008328:	4603      	mov	r3, r0
 800832a:	e000      	b.n	800832e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800832c:	2302      	movs	r3, #2
  }
}
 800832e:	4618      	mov	r0, r3
 8008330:	3728      	adds	r7, #40	@ 0x28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	58000c00 	.word	0x58000c00

0800833c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b0ba      	sub	sp, #232	@ 0xe8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008366:	f640 030f 	movw	r3, #2063	@ 0x80f
 800836a:	4013      	ands	r3, r2
 800836c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d11b      	bne.n	80083b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d015      	beq.n	80083b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	d105      	bne.n	800839c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d009      	beq.n	80083b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8377 	beq.w	8008a94 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	4798      	blx	r3
      }
      return;
 80083ae:	e371      	b.n	8008a94 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 8123 	beq.w	8008600 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80083ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80083be:	4b8d      	ldr	r3, [pc, #564]	@ (80085f4 <HAL_UART_IRQHandler+0x2b8>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80083c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80083ca:	4b8b      	ldr	r3, [pc, #556]	@ (80085f8 <HAL_UART_IRQHandler+0x2bc>)
 80083cc:	4013      	ands	r3, r2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8116 	beq.w	8008600 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d011      	beq.n	8008404 <HAL_UART_IRQHandler+0xc8>
 80083e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2201      	movs	r2, #1
 80083f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083fa:	f043 0201 	orr.w	r2, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d011      	beq.n	8008434 <HAL_UART_IRQHandler+0xf8>
 8008410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2202      	movs	r2, #2
 8008422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800842a:	f043 0204 	orr.w	r2, r3, #4
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008438:	f003 0304 	and.w	r3, r3, #4
 800843c:	2b00      	cmp	r3, #0
 800843e:	d011      	beq.n	8008464 <HAL_UART_IRQHandler+0x128>
 8008440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00b      	beq.n	8008464 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2204      	movs	r2, #4
 8008452:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800845a:	f043 0202 	orr.w	r2, r3, #2
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b00      	cmp	r3, #0
 800846e:	d017      	beq.n	80084a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d105      	bne.n	8008488 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800847c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008480:	4b5c      	ldr	r3, [pc, #368]	@ (80085f4 <HAL_UART_IRQHandler+0x2b8>)
 8008482:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2208      	movs	r2, #8
 800848e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008496:	f043 0208 	orr.w	r2, r3, #8
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d012      	beq.n	80084d2 <HAL_UART_IRQHandler+0x196>
 80084ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00c      	beq.n	80084d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c8:	f043 0220 	orr.w	r2, r3, #32
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 82dd 	beq.w	8008a98 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d013      	beq.n	8008512 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084ee:	f003 0320 	and.w	r3, r3, #32
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008526:	2b40      	cmp	r3, #64	@ 0x40
 8008528:	d005      	beq.n	8008536 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800852a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800852e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008532:	2b00      	cmp	r3, #0
 8008534:	d054      	beq.n	80085e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f001 fb1e 	bl	8009b78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008546:	2b40      	cmp	r3, #64	@ 0x40
 8008548:	d146      	bne.n	80085d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008560:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008564:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008568:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3308      	adds	r3, #8
 8008572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008576:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800857a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800858e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1d9      	bne.n	800854a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859c:	2b00      	cmp	r3, #0
 800859e:	d017      	beq.n	80085d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a6:	4a15      	ldr	r2, [pc, #84]	@ (80085fc <HAL_UART_IRQHandler+0x2c0>)
 80085a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f9 fd95 	bl	80020e0 <HAL_DMA_Abort_IT>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d019      	beq.n	80085f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80085ca:	4610      	mov	r0, r2
 80085cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ce:	e00f      	b.n	80085f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 fa77 	bl	8008ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d6:	e00b      	b.n	80085f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 fa73 	bl	8008ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085de:	e007      	b.n	80085f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fa6f 	bl	8008ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80085ee:	e253      	b.n	8008a98 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f0:	bf00      	nop
    return;
 80085f2:	e251      	b.n	8008a98 <HAL_UART_IRQHandler+0x75c>
 80085f4:	10000001 	.word	0x10000001
 80085f8:	04000120 	.word	0x04000120
 80085fc:	08009c45 	.word	0x08009c45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008604:	2b01      	cmp	r3, #1
 8008606:	f040 81e7 	bne.w	80089d8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800860a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800860e:	f003 0310 	and.w	r3, r3, #16
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 81e0 	beq.w	80089d8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 81d9 	beq.w	80089d8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2210      	movs	r2, #16
 800862c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008638:	2b40      	cmp	r3, #64	@ 0x40
 800863a:	f040 8151 	bne.w	80088e0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a96      	ldr	r2, [pc, #600]	@ (80088a0 <HAL_UART_IRQHandler+0x564>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d068      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a93      	ldr	r2, [pc, #588]	@ (80088a4 <HAL_UART_IRQHandler+0x568>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d061      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a91      	ldr	r2, [pc, #580]	@ (80088a8 <HAL_UART_IRQHandler+0x56c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d05a      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a8e      	ldr	r2, [pc, #568]	@ (80088ac <HAL_UART_IRQHandler+0x570>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d053      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a8c      	ldr	r2, [pc, #560]	@ (80088b0 <HAL_UART_IRQHandler+0x574>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d04c      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a89      	ldr	r2, [pc, #548]	@ (80088b4 <HAL_UART_IRQHandler+0x578>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d045      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a87      	ldr	r2, [pc, #540]	@ (80088b8 <HAL_UART_IRQHandler+0x57c>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d03e      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a84      	ldr	r2, [pc, #528]	@ (80088bc <HAL_UART_IRQHandler+0x580>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d037      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a82      	ldr	r2, [pc, #520]	@ (80088c0 <HAL_UART_IRQHandler+0x584>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d030      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a7f      	ldr	r2, [pc, #508]	@ (80088c4 <HAL_UART_IRQHandler+0x588>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d029      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a7d      	ldr	r2, [pc, #500]	@ (80088c8 <HAL_UART_IRQHandler+0x58c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d022      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a7a      	ldr	r2, [pc, #488]	@ (80088cc <HAL_UART_IRQHandler+0x590>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d01b      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a78      	ldr	r2, [pc, #480]	@ (80088d0 <HAL_UART_IRQHandler+0x594>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d014      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a75      	ldr	r2, [pc, #468]	@ (80088d4 <HAL_UART_IRQHandler+0x598>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d00d      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a73      	ldr	r2, [pc, #460]	@ (80088d8 <HAL_UART_IRQHandler+0x59c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d006      	beq.n	800871e <HAL_UART_IRQHandler+0x3e2>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a70      	ldr	r2, [pc, #448]	@ (80088dc <HAL_UART_IRQHandler+0x5a0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d106      	bne.n	800872c <HAL_UART_IRQHandler+0x3f0>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	b29b      	uxth	r3, r3
 800872a:	e005      	b.n	8008738 <HAL_UART_IRQHandler+0x3fc>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	b29b      	uxth	r3, r3
 8008738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800873c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 81ab 	beq.w	8008a9c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800874c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008750:	429a      	cmp	r2, r3
 8008752:	f080 81a3 	bcs.w	8008a9c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800875c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800876c:	f000 8087 	beq.w	800887e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008784:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008788:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800878c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	461a      	mov	r2, r3
 8008796:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800879a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800879e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80087a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1da      	bne.n	8008770 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e1      	bne.n	80087ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800880c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3308      	adds	r3, #8
 8008816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800881a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800881c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008820:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008828:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e3      	bne.n	80087f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2220      	movs	r2, #32
 8008832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800884a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800884c:	f023 0310 	bic.w	r3, r3, #16
 8008850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	461a      	mov	r2, r3
 800885a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800885e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008860:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800886c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e4      	bne.n	800883c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008878:	4618      	mov	r0, r3
 800887a:	f7f9 f913 	bl	8001aa4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2202      	movs	r2, #2
 8008882:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008890:	b29b      	uxth	r3, r3
 8008892:	1ad3      	subs	r3, r2, r3
 8008894:	b29b      	uxth	r3, r3
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f91d 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800889e:	e0fd      	b.n	8008a9c <HAL_UART_IRQHandler+0x760>
 80088a0:	40020010 	.word	0x40020010
 80088a4:	40020028 	.word	0x40020028
 80088a8:	40020040 	.word	0x40020040
 80088ac:	40020058 	.word	0x40020058
 80088b0:	40020070 	.word	0x40020070
 80088b4:	40020088 	.word	0x40020088
 80088b8:	400200a0 	.word	0x400200a0
 80088bc:	400200b8 	.word	0x400200b8
 80088c0:	40020410 	.word	0x40020410
 80088c4:	40020428 	.word	0x40020428
 80088c8:	40020440 	.word	0x40020440
 80088cc:	40020458 	.word	0x40020458
 80088d0:	40020470 	.word	0x40020470
 80088d4:	40020488 	.word	0x40020488
 80088d8:	400204a0 	.word	0x400204a0
 80088dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 80cf 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8008902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008906:	2b00      	cmp	r3, #0
 8008908:	f000 80ca 	beq.w	8008aa0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800891a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800891c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008920:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800892e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008930:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800893c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e4      	bne.n	800890c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	623b      	str	r3, [r7, #32]
   return(result);
 8008952:	6a3a      	ldr	r2, [r7, #32]
 8008954:	4b55      	ldr	r3, [pc, #340]	@ (8008aac <HAL_UART_IRQHandler+0x770>)
 8008956:	4013      	ands	r3, r2
 8008958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008966:	633a      	str	r2, [r7, #48]	@ 0x30
 8008968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800896c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e3      	bne.n	8008942 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	60fb      	str	r3, [r7, #12]
   return(result);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0310 	bic.w	r3, r3, #16
 80089a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80089b0:	61fb      	str	r3, [r7, #28]
 80089b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	69b9      	ldr	r1, [r7, #24]
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	617b      	str	r3, [r7, #20]
   return(result);
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e4      	bne.n	800898e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f881 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089d6:	e063      	b.n	8008aa0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00e      	beq.n	8008a02 <HAL_UART_IRQHandler+0x6c6>
 80089e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d008      	beq.n	8008a02 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80089f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f002 f822 	bl	800aa44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a00:	e051      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d014      	beq.n	8008a38 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d105      	bne.n	8008a26 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d008      	beq.n	8008a38 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d03a      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
    }
    return;
 8008a36:	e035      	b.n	8008aa4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d009      	beq.n	8008a58 <HAL_UART_IRQHandler+0x71c>
 8008a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 faaf 	bl	8009fb4 <UART_EndTransmit_IT>
    return;
 8008a56:	e026      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d009      	beq.n	8008a78 <HAL_UART_IRQHandler+0x73c>
 8008a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 fffb 	bl	800aa6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a76:	e016      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d010      	beq.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
 8008a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	da0c      	bge.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 ffe3 	bl	800aa58 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a92:	e008      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
      return;
 8008a94:	bf00      	nop
 8008a96:	e006      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
    return;
 8008a98:	bf00      	nop
 8008a9a:	e004      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
      return;
 8008a9c:	bf00      	nop
 8008a9e:	e002      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
      return;
 8008aa0:	bf00      	nop
 8008aa2:	e000      	b.n	8008aa6 <HAL_UART_IRQHandler+0x76a>
    return;
 8008aa4:	bf00      	nop
  }
}
 8008aa6:	37e8      	adds	r7, #232	@ 0xe8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	effffffe 	.word	0xeffffffe

08008ab0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008af4:	b092      	sub	sp, #72	@ 0x48
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	691b      	ldr	r3, [r3, #16]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4bbe      	ldr	r3, [pc, #760]	@ (8008e18 <UART_SetConfig+0x328>)
 8008b20:	4013      	ands	r3, r2
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	6812      	ldr	r2, [r2, #0]
 8008b26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4ab3      	ldr	r2, [pc, #716]	@ (8008e1c <UART_SetConfig+0x32c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d004      	beq.n	8008b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	4baf      	ldr	r3, [pc, #700]	@ (8008e20 <UART_SetConfig+0x330>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	6812      	ldr	r2, [r2, #0]
 8008b6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b6c:	430b      	orrs	r3, r1
 8008b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b76:	f023 010f 	bic.w	r1, r3, #15
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4aa6      	ldr	r2, [pc, #664]	@ (8008e24 <UART_SetConfig+0x334>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d177      	bne.n	8008c80 <UART_SetConfig+0x190>
 8008b90:	4ba5      	ldr	r3, [pc, #660]	@ (8008e28 <UART_SetConfig+0x338>)
 8008b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b98:	2b28      	cmp	r3, #40	@ 0x28
 8008b9a:	d86d      	bhi.n	8008c78 <UART_SetConfig+0x188>
 8008b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <UART_SetConfig+0xb4>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008c49 	.word	0x08008c49
 8008ba8:	08008c79 	.word	0x08008c79
 8008bac:	08008c79 	.word	0x08008c79
 8008bb0:	08008c79 	.word	0x08008c79
 8008bb4:	08008c79 	.word	0x08008c79
 8008bb8:	08008c79 	.word	0x08008c79
 8008bbc:	08008c79 	.word	0x08008c79
 8008bc0:	08008c79 	.word	0x08008c79
 8008bc4:	08008c51 	.word	0x08008c51
 8008bc8:	08008c79 	.word	0x08008c79
 8008bcc:	08008c79 	.word	0x08008c79
 8008bd0:	08008c79 	.word	0x08008c79
 8008bd4:	08008c79 	.word	0x08008c79
 8008bd8:	08008c79 	.word	0x08008c79
 8008bdc:	08008c79 	.word	0x08008c79
 8008be0:	08008c79 	.word	0x08008c79
 8008be4:	08008c59 	.word	0x08008c59
 8008be8:	08008c79 	.word	0x08008c79
 8008bec:	08008c79 	.word	0x08008c79
 8008bf0:	08008c79 	.word	0x08008c79
 8008bf4:	08008c79 	.word	0x08008c79
 8008bf8:	08008c79 	.word	0x08008c79
 8008bfc:	08008c79 	.word	0x08008c79
 8008c00:	08008c79 	.word	0x08008c79
 8008c04:	08008c61 	.word	0x08008c61
 8008c08:	08008c79 	.word	0x08008c79
 8008c0c:	08008c79 	.word	0x08008c79
 8008c10:	08008c79 	.word	0x08008c79
 8008c14:	08008c79 	.word	0x08008c79
 8008c18:	08008c79 	.word	0x08008c79
 8008c1c:	08008c79 	.word	0x08008c79
 8008c20:	08008c79 	.word	0x08008c79
 8008c24:	08008c69 	.word	0x08008c69
 8008c28:	08008c79 	.word	0x08008c79
 8008c2c:	08008c79 	.word	0x08008c79
 8008c30:	08008c79 	.word	0x08008c79
 8008c34:	08008c79 	.word	0x08008c79
 8008c38:	08008c79 	.word	0x08008c79
 8008c3c:	08008c79 	.word	0x08008c79
 8008c40:	08008c79 	.word	0x08008c79
 8008c44:	08008c71 	.word	0x08008c71
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4e:	e222      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008c50:	2304      	movs	r3, #4
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c56:	e21e      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008c58:	2308      	movs	r3, #8
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5e:	e21a      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008c60:	2310      	movs	r3, #16
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c66:	e216      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008c68:	2320      	movs	r3, #32
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c6e:	e212      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008c70:	2340      	movs	r3, #64	@ 0x40
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c76:	e20e      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008c78:	2380      	movs	r3, #128	@ 0x80
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e20a      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a69      	ldr	r2, [pc, #420]	@ (8008e2c <UART_SetConfig+0x33c>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d130      	bne.n	8008cec <UART_SetConfig+0x1fc>
 8008c8a:	4b67      	ldr	r3, [pc, #412]	@ (8008e28 <UART_SetConfig+0x338>)
 8008c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	d826      	bhi.n	8008ce4 <UART_SetConfig+0x1f4>
 8008c96:	a201      	add	r2, pc, #4	@ (adr r2, 8008c9c <UART_SetConfig+0x1ac>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cb5 	.word	0x08008cb5
 8008ca0:	08008cbd 	.word	0x08008cbd
 8008ca4:	08008cc5 	.word	0x08008cc5
 8008ca8:	08008ccd 	.word	0x08008ccd
 8008cac:	08008cd5 	.word	0x08008cd5
 8008cb0:	08008cdd 	.word	0x08008cdd
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cba:	e1ec      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008cbc:	2304      	movs	r3, #4
 8008cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc2:	e1e8      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cca:	e1e4      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd2:	e1e0      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cda:	e1dc      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008cdc:	2340      	movs	r3, #64	@ 0x40
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce2:	e1d8      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008ce4:	2380      	movs	r3, #128	@ 0x80
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e1d4      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a4f      	ldr	r2, [pc, #316]	@ (8008e30 <UART_SetConfig+0x340>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d130      	bne.n	8008d58 <UART_SetConfig+0x268>
 8008cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8008e28 <UART_SetConfig+0x338>)
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cfa:	f003 0307 	and.w	r3, r3, #7
 8008cfe:	2b05      	cmp	r3, #5
 8008d00:	d826      	bhi.n	8008d50 <UART_SetConfig+0x260>
 8008d02:	a201      	add	r2, pc, #4	@ (adr r2, 8008d08 <UART_SetConfig+0x218>)
 8008d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d08:	08008d21 	.word	0x08008d21
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	08008d31 	.word	0x08008d31
 8008d14:	08008d39 	.word	0x08008d39
 8008d18:	08008d41 	.word	0x08008d41
 8008d1c:	08008d49 	.word	0x08008d49
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d26:	e1b6      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d28:	2304      	movs	r3, #4
 8008d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2e:	e1b2      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d30:	2308      	movs	r3, #8
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d36:	e1ae      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d38:	2310      	movs	r3, #16
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3e:	e1aa      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d40:	2320      	movs	r3, #32
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d46:	e1a6      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d48:	2340      	movs	r3, #64	@ 0x40
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4e:	e1a2      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d50:	2380      	movs	r3, #128	@ 0x80
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d56:	e19e      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a35      	ldr	r2, [pc, #212]	@ (8008e34 <UART_SetConfig+0x344>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d130      	bne.n	8008dc4 <UART_SetConfig+0x2d4>
 8008d62:	4b31      	ldr	r3, [pc, #196]	@ (8008e28 <UART_SetConfig+0x338>)
 8008d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b05      	cmp	r3, #5
 8008d6c:	d826      	bhi.n	8008dbc <UART_SetConfig+0x2cc>
 8008d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d74 <UART_SetConfig+0x284>)
 8008d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d74:	08008d8d 	.word	0x08008d8d
 8008d78:	08008d95 	.word	0x08008d95
 8008d7c:	08008d9d 	.word	0x08008d9d
 8008d80:	08008da5 	.word	0x08008da5
 8008d84:	08008dad 	.word	0x08008dad
 8008d88:	08008db5 	.word	0x08008db5
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d92:	e180      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d94:	2304      	movs	r3, #4
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e17c      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008d9c:	2308      	movs	r3, #8
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e178      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008da4:	2310      	movs	r3, #16
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008daa:	e174      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008dac:	2320      	movs	r3, #32
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db2:	e170      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008db4:	2340      	movs	r3, #64	@ 0x40
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dba:	e16c      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008dbc:	2380      	movs	r3, #128	@ 0x80
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e168      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8008e38 <UART_SetConfig+0x348>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d142      	bne.n	8008e54 <UART_SetConfig+0x364>
 8008dce:	4b16      	ldr	r3, [pc, #88]	@ (8008e28 <UART_SetConfig+0x338>)
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	2b05      	cmp	r3, #5
 8008dd8:	d838      	bhi.n	8008e4c <UART_SetConfig+0x35c>
 8008dda:	a201      	add	r2, pc, #4	@ (adr r2, 8008de0 <UART_SetConfig+0x2f0>)
 8008ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de0:	08008df9 	.word	0x08008df9
 8008de4:	08008e01 	.word	0x08008e01
 8008de8:	08008e09 	.word	0x08008e09
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e3d 	.word	0x08008e3d
 8008df4:	08008e45 	.word	0x08008e45
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfe:	e14a      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008e00:	2304      	movs	r3, #4
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e06:	e146      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008e08:	2308      	movs	r3, #8
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0e:	e142      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008e10:	2310      	movs	r3, #16
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e16:	e13e      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008e18:	cfff69f3 	.word	0xcfff69f3
 8008e1c:	58000c00 	.word	0x58000c00
 8008e20:	11fff4ff 	.word	0x11fff4ff
 8008e24:	40011000 	.word	0x40011000
 8008e28:	58024400 	.word	0x58024400
 8008e2c:	40004400 	.word	0x40004400
 8008e30:	40004800 	.word	0x40004800
 8008e34:	40004c00 	.word	0x40004c00
 8008e38:	40005000 	.word	0x40005000
 8008e3c:	2320      	movs	r3, #32
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e42:	e128      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008e44:	2340      	movs	r3, #64	@ 0x40
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e4a:	e124      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008e4c:	2380      	movs	r3, #128	@ 0x80
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e52:	e120      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4acb      	ldr	r2, [pc, #812]	@ (8009188 <UART_SetConfig+0x698>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d176      	bne.n	8008f4c <UART_SetConfig+0x45c>
 8008e5e:	4bcb      	ldr	r3, [pc, #812]	@ (800918c <UART_SetConfig+0x69c>)
 8008e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e66:	2b28      	cmp	r3, #40	@ 0x28
 8008e68:	d86c      	bhi.n	8008f44 <UART_SetConfig+0x454>
 8008e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e70 <UART_SetConfig+0x380>)
 8008e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e70:	08008f15 	.word	0x08008f15
 8008e74:	08008f45 	.word	0x08008f45
 8008e78:	08008f45 	.word	0x08008f45
 8008e7c:	08008f45 	.word	0x08008f45
 8008e80:	08008f45 	.word	0x08008f45
 8008e84:	08008f45 	.word	0x08008f45
 8008e88:	08008f45 	.word	0x08008f45
 8008e8c:	08008f45 	.word	0x08008f45
 8008e90:	08008f1d 	.word	0x08008f1d
 8008e94:	08008f45 	.word	0x08008f45
 8008e98:	08008f45 	.word	0x08008f45
 8008e9c:	08008f45 	.word	0x08008f45
 8008ea0:	08008f45 	.word	0x08008f45
 8008ea4:	08008f45 	.word	0x08008f45
 8008ea8:	08008f45 	.word	0x08008f45
 8008eac:	08008f45 	.word	0x08008f45
 8008eb0:	08008f25 	.word	0x08008f25
 8008eb4:	08008f45 	.word	0x08008f45
 8008eb8:	08008f45 	.word	0x08008f45
 8008ebc:	08008f45 	.word	0x08008f45
 8008ec0:	08008f45 	.word	0x08008f45
 8008ec4:	08008f45 	.word	0x08008f45
 8008ec8:	08008f45 	.word	0x08008f45
 8008ecc:	08008f45 	.word	0x08008f45
 8008ed0:	08008f2d 	.word	0x08008f2d
 8008ed4:	08008f45 	.word	0x08008f45
 8008ed8:	08008f45 	.word	0x08008f45
 8008edc:	08008f45 	.word	0x08008f45
 8008ee0:	08008f45 	.word	0x08008f45
 8008ee4:	08008f45 	.word	0x08008f45
 8008ee8:	08008f45 	.word	0x08008f45
 8008eec:	08008f45 	.word	0x08008f45
 8008ef0:	08008f35 	.word	0x08008f35
 8008ef4:	08008f45 	.word	0x08008f45
 8008ef8:	08008f45 	.word	0x08008f45
 8008efc:	08008f45 	.word	0x08008f45
 8008f00:	08008f45 	.word	0x08008f45
 8008f04:	08008f45 	.word	0x08008f45
 8008f08:	08008f45 	.word	0x08008f45
 8008f0c:	08008f45 	.word	0x08008f45
 8008f10:	08008f3d 	.word	0x08008f3d
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e0bc      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f1c:	2304      	movs	r3, #4
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e0b8      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f24:	2308      	movs	r3, #8
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e0b4      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f2c:	2310      	movs	r3, #16
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e0b0      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f34:	2320      	movs	r3, #32
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e0ac      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f3c:	2340      	movs	r3, #64	@ 0x40
 8008f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f42:	e0a8      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e0a4      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a8f      	ldr	r2, [pc, #572]	@ (8009190 <UART_SetConfig+0x6a0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d130      	bne.n	8008fb8 <UART_SetConfig+0x4c8>
 8008f56:	4b8d      	ldr	r3, [pc, #564]	@ (800918c <UART_SetConfig+0x69c>)
 8008f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d826      	bhi.n	8008fb0 <UART_SetConfig+0x4c0>
 8008f62:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <UART_SetConfig+0x478>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008f81 	.word	0x08008f81
 8008f6c:	08008f89 	.word	0x08008f89
 8008f70:	08008f91 	.word	0x08008f91
 8008f74:	08008f99 	.word	0x08008f99
 8008f78:	08008fa1 	.word	0x08008fa1
 8008f7c:	08008fa9 	.word	0x08008fa9
 8008f80:	2300      	movs	r3, #0
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e086      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f88:	2304      	movs	r3, #4
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e082      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f90:	2308      	movs	r3, #8
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e07e      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008f98:	2310      	movs	r3, #16
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e07a      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008fa0:	2320      	movs	r3, #32
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa6:	e076      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008fa8:	2340      	movs	r3, #64	@ 0x40
 8008faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fae:	e072      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008fb0:	2380      	movs	r3, #128	@ 0x80
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e06e      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a75      	ldr	r2, [pc, #468]	@ (8009194 <UART_SetConfig+0x6a4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d130      	bne.n	8009024 <UART_SetConfig+0x534>
 8008fc2:	4b72      	ldr	r3, [pc, #456]	@ (800918c <UART_SetConfig+0x69c>)
 8008fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b05      	cmp	r3, #5
 8008fcc:	d826      	bhi.n	800901c <UART_SetConfig+0x52c>
 8008fce:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <UART_SetConfig+0x4e4>)
 8008fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd4:	08008fed 	.word	0x08008fed
 8008fd8:	08008ff5 	.word	0x08008ff5
 8008fdc:	08008ffd 	.word	0x08008ffd
 8008fe0:	08009005 	.word	0x08009005
 8008fe4:	0800900d 	.word	0x0800900d
 8008fe8:	08009015 	.word	0x08009015
 8008fec:	2300      	movs	r3, #0
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e050      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffa:	e04c      	b.n	8009096 <UART_SetConfig+0x5a6>
 8008ffc:	2308      	movs	r3, #8
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009002:	e048      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009004:	2310      	movs	r3, #16
 8009006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900a:	e044      	b.n	8009096 <UART_SetConfig+0x5a6>
 800900c:	2320      	movs	r3, #32
 800900e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009012:	e040      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009014:	2340      	movs	r3, #64	@ 0x40
 8009016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800901a:	e03c      	b.n	8009096 <UART_SetConfig+0x5a6>
 800901c:	2380      	movs	r3, #128	@ 0x80
 800901e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009022:	e038      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a5b      	ldr	r2, [pc, #364]	@ (8009198 <UART_SetConfig+0x6a8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d130      	bne.n	8009090 <UART_SetConfig+0x5a0>
 800902e:	4b57      	ldr	r3, [pc, #348]	@ (800918c <UART_SetConfig+0x69c>)
 8009030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009032:	f003 0307 	and.w	r3, r3, #7
 8009036:	2b05      	cmp	r3, #5
 8009038:	d826      	bhi.n	8009088 <UART_SetConfig+0x598>
 800903a:	a201      	add	r2, pc, #4	@ (adr r2, 8009040 <UART_SetConfig+0x550>)
 800903c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009040:	08009059 	.word	0x08009059
 8009044:	08009061 	.word	0x08009061
 8009048:	08009069 	.word	0x08009069
 800904c:	08009071 	.word	0x08009071
 8009050:	08009079 	.word	0x08009079
 8009054:	08009081 	.word	0x08009081
 8009058:	2302      	movs	r3, #2
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905e:	e01a      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009060:	2304      	movs	r3, #4
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009066:	e016      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009068:	2308      	movs	r3, #8
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e012      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009070:	2310      	movs	r3, #16
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e00e      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009078:	2320      	movs	r3, #32
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907e:	e00a      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009080:	2340      	movs	r3, #64	@ 0x40
 8009082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009086:	e006      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009088:	2380      	movs	r3, #128	@ 0x80
 800908a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800908e:	e002      	b.n	8009096 <UART_SetConfig+0x5a6>
 8009090:	2380      	movs	r3, #128	@ 0x80
 8009092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a3f      	ldr	r2, [pc, #252]	@ (8009198 <UART_SetConfig+0x6a8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	f040 80f8 	bne.w	8009292 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	dc46      	bgt.n	8009138 <UART_SetConfig+0x648>
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	f2c0 8082 	blt.w	80091b4 <UART_SetConfig+0x6c4>
 80090b0:	3b02      	subs	r3, #2
 80090b2:	2b1e      	cmp	r3, #30
 80090b4:	d87e      	bhi.n	80091b4 <UART_SetConfig+0x6c4>
 80090b6:	a201      	add	r2, pc, #4	@ (adr r2, 80090bc <UART_SetConfig+0x5cc>)
 80090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090bc:	0800913f 	.word	0x0800913f
 80090c0:	080091b5 	.word	0x080091b5
 80090c4:	08009147 	.word	0x08009147
 80090c8:	080091b5 	.word	0x080091b5
 80090cc:	080091b5 	.word	0x080091b5
 80090d0:	080091b5 	.word	0x080091b5
 80090d4:	08009157 	.word	0x08009157
 80090d8:	080091b5 	.word	0x080091b5
 80090dc:	080091b5 	.word	0x080091b5
 80090e0:	080091b5 	.word	0x080091b5
 80090e4:	080091b5 	.word	0x080091b5
 80090e8:	080091b5 	.word	0x080091b5
 80090ec:	080091b5 	.word	0x080091b5
 80090f0:	080091b5 	.word	0x080091b5
 80090f4:	08009167 	.word	0x08009167
 80090f8:	080091b5 	.word	0x080091b5
 80090fc:	080091b5 	.word	0x080091b5
 8009100:	080091b5 	.word	0x080091b5
 8009104:	080091b5 	.word	0x080091b5
 8009108:	080091b5 	.word	0x080091b5
 800910c:	080091b5 	.word	0x080091b5
 8009110:	080091b5 	.word	0x080091b5
 8009114:	080091b5 	.word	0x080091b5
 8009118:	080091b5 	.word	0x080091b5
 800911c:	080091b5 	.word	0x080091b5
 8009120:	080091b5 	.word	0x080091b5
 8009124:	080091b5 	.word	0x080091b5
 8009128:	080091b5 	.word	0x080091b5
 800912c:	080091b5 	.word	0x080091b5
 8009130:	080091b5 	.word	0x080091b5
 8009134:	080091a7 	.word	0x080091a7
 8009138:	2b40      	cmp	r3, #64	@ 0x40
 800913a:	d037      	beq.n	80091ac <UART_SetConfig+0x6bc>
 800913c:	e03a      	b.n	80091b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800913e:	f7fe fbab 	bl	8007898 <HAL_RCCEx_GetD3PCLK1Freq>
 8009142:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009144:	e03c      	b.n	80091c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800914a:	4618      	mov	r0, r3
 800914c:	f7fe fbba 	bl	80078c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009154:	e034      	b.n	80091c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009156:	f107 0318 	add.w	r3, r7, #24
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe fd06 	bl	8007b6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009164:	e02c      	b.n	80091c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009166:	4b09      	ldr	r3, [pc, #36]	@ (800918c <UART_SetConfig+0x69c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0320 	and.w	r3, r3, #32
 800916e:	2b00      	cmp	r3, #0
 8009170:	d016      	beq.n	80091a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009172:	4b06      	ldr	r3, [pc, #24]	@ (800918c <UART_SetConfig+0x69c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	08db      	lsrs	r3, r3, #3
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	4a07      	ldr	r2, [pc, #28]	@ (800919c <UART_SetConfig+0x6ac>)
 800917e:	fa22 f303 	lsr.w	r3, r2, r3
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009184:	e01c      	b.n	80091c0 <UART_SetConfig+0x6d0>
 8009186:	bf00      	nop
 8009188:	40011400 	.word	0x40011400
 800918c:	58024400 	.word	0x58024400
 8009190:	40007800 	.word	0x40007800
 8009194:	40007c00 	.word	0x40007c00
 8009198:	58000c00 	.word	0x58000c00
 800919c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80091a0:	4b9d      	ldr	r3, [pc, #628]	@ (8009418 <UART_SetConfig+0x928>)
 80091a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091a4:	e00c      	b.n	80091c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091a6:	4b9d      	ldr	r3, [pc, #628]	@ (800941c <UART_SetConfig+0x92c>)
 80091a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091aa:	e009      	b.n	80091c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091b2:	e005      	b.n	80091c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80091b4:	2300      	movs	r3, #0
 80091b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80091be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 81de 	beq.w	8009584 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091cc:	4a94      	ldr	r2, [pc, #592]	@ (8009420 <UART_SetConfig+0x930>)
 80091ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d2:	461a      	mov	r2, r3
 80091d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80091da:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	4613      	mov	r3, r2
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d305      	bcc.n	80091f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d903      	bls.n	8009200 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80091fe:	e1c1      	b.n	8009584 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009202:	2200      	movs	r2, #0
 8009204:	60bb      	str	r3, [r7, #8]
 8009206:	60fa      	str	r2, [r7, #12]
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920c:	4a84      	ldr	r2, [pc, #528]	@ (8009420 <UART_SetConfig+0x930>)
 800920e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009212:	b29b      	uxth	r3, r3
 8009214:	2200      	movs	r2, #0
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	607a      	str	r2, [r7, #4]
 800921a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800921e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009222:	f7f7 f8b5 	bl	8000390 <__aeabi_uldivmod>
 8009226:	4602      	mov	r2, r0
 8009228:	460b      	mov	r3, r1
 800922a:	4610      	mov	r0, r2
 800922c:	4619      	mov	r1, r3
 800922e:	f04f 0200 	mov.w	r2, #0
 8009232:	f04f 0300 	mov.w	r3, #0
 8009236:	020b      	lsls	r3, r1, #8
 8009238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800923c:	0202      	lsls	r2, r0, #8
 800923e:	6979      	ldr	r1, [r7, #20]
 8009240:	6849      	ldr	r1, [r1, #4]
 8009242:	0849      	lsrs	r1, r1, #1
 8009244:	2000      	movs	r0, #0
 8009246:	460c      	mov	r4, r1
 8009248:	4605      	mov	r5, r0
 800924a:	eb12 0804 	adds.w	r8, r2, r4
 800924e:	eb43 0905 	adc.w	r9, r3, r5
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	469a      	mov	sl, r3
 800925a:	4693      	mov	fp, r2
 800925c:	4652      	mov	r2, sl
 800925e:	465b      	mov	r3, fp
 8009260:	4640      	mov	r0, r8
 8009262:	4649      	mov	r1, r9
 8009264:	f7f7 f894 	bl	8000390 <__aeabi_uldivmod>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4613      	mov	r3, r2
 800926e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009276:	d308      	bcc.n	800928a <UART_SetConfig+0x79a>
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800927e:	d204      	bcs.n	800928a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009286:	60da      	str	r2, [r3, #12]
 8009288:	e17c      	b.n	8009584 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009290:	e178      	b.n	8009584 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800929a:	f040 80c5 	bne.w	8009428 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800929e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	dc48      	bgt.n	8009338 <UART_SetConfig+0x848>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	db7b      	blt.n	80093a2 <UART_SetConfig+0x8b2>
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d879      	bhi.n	80093a2 <UART_SetConfig+0x8b2>
 80092ae:	a201      	add	r2, pc, #4	@ (adr r2, 80092b4 <UART_SetConfig+0x7c4>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	0800933f 	.word	0x0800933f
 80092b8:	08009347 	.word	0x08009347
 80092bc:	080093a3 	.word	0x080093a3
 80092c0:	080093a3 	.word	0x080093a3
 80092c4:	0800934f 	.word	0x0800934f
 80092c8:	080093a3 	.word	0x080093a3
 80092cc:	080093a3 	.word	0x080093a3
 80092d0:	080093a3 	.word	0x080093a3
 80092d4:	0800935f 	.word	0x0800935f
 80092d8:	080093a3 	.word	0x080093a3
 80092dc:	080093a3 	.word	0x080093a3
 80092e0:	080093a3 	.word	0x080093a3
 80092e4:	080093a3 	.word	0x080093a3
 80092e8:	080093a3 	.word	0x080093a3
 80092ec:	080093a3 	.word	0x080093a3
 80092f0:	080093a3 	.word	0x080093a3
 80092f4:	0800936f 	.word	0x0800936f
 80092f8:	080093a3 	.word	0x080093a3
 80092fc:	080093a3 	.word	0x080093a3
 8009300:	080093a3 	.word	0x080093a3
 8009304:	080093a3 	.word	0x080093a3
 8009308:	080093a3 	.word	0x080093a3
 800930c:	080093a3 	.word	0x080093a3
 8009310:	080093a3 	.word	0x080093a3
 8009314:	080093a3 	.word	0x080093a3
 8009318:	080093a3 	.word	0x080093a3
 800931c:	080093a3 	.word	0x080093a3
 8009320:	080093a3 	.word	0x080093a3
 8009324:	080093a3 	.word	0x080093a3
 8009328:	080093a3 	.word	0x080093a3
 800932c:	080093a3 	.word	0x080093a3
 8009330:	080093a3 	.word	0x080093a3
 8009334:	08009395 	.word	0x08009395
 8009338:	2b40      	cmp	r3, #64	@ 0x40
 800933a:	d02e      	beq.n	800939a <UART_SetConfig+0x8aa>
 800933c:	e031      	b.n	80093a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800933e:	f7fd f875 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 8009342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009344:	e033      	b.n	80093ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009346:	f7fd f887 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
 800934a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800934c:	e02f      	b.n	80093ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800934e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009352:	4618      	mov	r0, r3
 8009354:	f7fe fab6 	bl	80078c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800935c:	e027      	b.n	80093ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800935e:	f107 0318 	add.w	r3, r7, #24
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fc02 	bl	8007b6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936c:	e01f      	b.n	80093ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800936e:	4b2d      	ldr	r3, [pc, #180]	@ (8009424 <UART_SetConfig+0x934>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0320 	and.w	r3, r3, #32
 8009376:	2b00      	cmp	r3, #0
 8009378:	d009      	beq.n	800938e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800937a:	4b2a      	ldr	r3, [pc, #168]	@ (8009424 <UART_SetConfig+0x934>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	f003 0303 	and.w	r3, r3, #3
 8009384:	4a24      	ldr	r2, [pc, #144]	@ (8009418 <UART_SetConfig+0x928>)
 8009386:	fa22 f303 	lsr.w	r3, r2, r3
 800938a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800938c:	e00f      	b.n	80093ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800938e:	4b22      	ldr	r3, [pc, #136]	@ (8009418 <UART_SetConfig+0x928>)
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009392:	e00c      	b.n	80093ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009394:	4b21      	ldr	r3, [pc, #132]	@ (800941c <UART_SetConfig+0x92c>)
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009398:	e009      	b.n	80093ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800939a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800939e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a0:	e005      	b.n	80093ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80093ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80e7 	beq.w	8009584 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ba:	4a19      	ldr	r2, [pc, #100]	@ (8009420 <UART_SetConfig+0x930>)
 80093bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c0:	461a      	mov	r2, r3
 80093c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093c8:	005a      	lsls	r2, r3, #1
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	085b      	lsrs	r3, r3, #1
 80093d0:	441a      	add	r2, r3
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	2b0f      	cmp	r3, #15
 80093e0:	d916      	bls.n	8009410 <UART_SetConfig+0x920>
 80093e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093e8:	d212      	bcs.n	8009410 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	f023 030f 	bic.w	r3, r3, #15
 80093f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	085b      	lsrs	r3, r3, #1
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	b29a      	uxth	r2, r3
 8009400:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009402:	4313      	orrs	r3, r2
 8009404:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	e0b9      	b.n	8009584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009416:	e0b5      	b.n	8009584 <UART_SetConfig+0xa94>
 8009418:	03d09000 	.word	0x03d09000
 800941c:	003d0900 	.word	0x003d0900
 8009420:	0800be54 	.word	0x0800be54
 8009424:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009428:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800942c:	2b20      	cmp	r3, #32
 800942e:	dc49      	bgt.n	80094c4 <UART_SetConfig+0x9d4>
 8009430:	2b00      	cmp	r3, #0
 8009432:	db7c      	blt.n	800952e <UART_SetConfig+0xa3e>
 8009434:	2b20      	cmp	r3, #32
 8009436:	d87a      	bhi.n	800952e <UART_SetConfig+0xa3e>
 8009438:	a201      	add	r2, pc, #4	@ (adr r2, 8009440 <UART_SetConfig+0x950>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	080094cb 	.word	0x080094cb
 8009444:	080094d3 	.word	0x080094d3
 8009448:	0800952f 	.word	0x0800952f
 800944c:	0800952f 	.word	0x0800952f
 8009450:	080094db 	.word	0x080094db
 8009454:	0800952f 	.word	0x0800952f
 8009458:	0800952f 	.word	0x0800952f
 800945c:	0800952f 	.word	0x0800952f
 8009460:	080094eb 	.word	0x080094eb
 8009464:	0800952f 	.word	0x0800952f
 8009468:	0800952f 	.word	0x0800952f
 800946c:	0800952f 	.word	0x0800952f
 8009470:	0800952f 	.word	0x0800952f
 8009474:	0800952f 	.word	0x0800952f
 8009478:	0800952f 	.word	0x0800952f
 800947c:	0800952f 	.word	0x0800952f
 8009480:	080094fb 	.word	0x080094fb
 8009484:	0800952f 	.word	0x0800952f
 8009488:	0800952f 	.word	0x0800952f
 800948c:	0800952f 	.word	0x0800952f
 8009490:	0800952f 	.word	0x0800952f
 8009494:	0800952f 	.word	0x0800952f
 8009498:	0800952f 	.word	0x0800952f
 800949c:	0800952f 	.word	0x0800952f
 80094a0:	0800952f 	.word	0x0800952f
 80094a4:	0800952f 	.word	0x0800952f
 80094a8:	0800952f 	.word	0x0800952f
 80094ac:	0800952f 	.word	0x0800952f
 80094b0:	0800952f 	.word	0x0800952f
 80094b4:	0800952f 	.word	0x0800952f
 80094b8:	0800952f 	.word	0x0800952f
 80094bc:	0800952f 	.word	0x0800952f
 80094c0:	08009521 	.word	0x08009521
 80094c4:	2b40      	cmp	r3, #64	@ 0x40
 80094c6:	d02e      	beq.n	8009526 <UART_SetConfig+0xa36>
 80094c8:	e031      	b.n	800952e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094ca:	f7fc ffaf 	bl	800642c <HAL_RCC_GetPCLK1Freq>
 80094ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094d0:	e033      	b.n	800953a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094d2:	f7fc ffc1 	bl	8006458 <HAL_RCC_GetPCLK2Freq>
 80094d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80094d8:	e02f      	b.n	800953a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe f9f0 	bl	80078c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094e8:	e027      	b.n	800953a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ea:	f107 0318 	add.w	r3, r7, #24
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fb3c 	bl	8007b6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f8:	e01f      	b.n	800953a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094fa:	4b2d      	ldr	r3, [pc, #180]	@ (80095b0 <UART_SetConfig+0xac0>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d009      	beq.n	800951a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009506:	4b2a      	ldr	r3, [pc, #168]	@ (80095b0 <UART_SetConfig+0xac0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	08db      	lsrs	r3, r3, #3
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	4a28      	ldr	r2, [pc, #160]	@ (80095b4 <UART_SetConfig+0xac4>)
 8009512:	fa22 f303 	lsr.w	r3, r2, r3
 8009516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009518:	e00f      	b.n	800953a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800951a:	4b26      	ldr	r3, [pc, #152]	@ (80095b4 <UART_SetConfig+0xac4>)
 800951c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800951e:	e00c      	b.n	800953a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009520:	4b25      	ldr	r3, [pc, #148]	@ (80095b8 <UART_SetConfig+0xac8>)
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009524:	e009      	b.n	800953a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800952a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800952c:	e005      	b.n	800953a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800952e:	2300      	movs	r3, #0
 8009530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009538:	bf00      	nop
    }

    if (pclk != 0U)
 800953a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d021      	beq.n	8009584 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009544:	4a1d      	ldr	r2, [pc, #116]	@ (80095bc <UART_SetConfig+0xacc>)
 8009546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800954a:	461a      	mov	r2, r3
 800954c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800954e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	085b      	lsrs	r3, r3, #1
 8009558:	441a      	add	r2, r3
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009562:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d909      	bls.n	800957e <UART_SetConfig+0xa8e>
 800956a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009570:	d205      	bcs.n	800957e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009574:	b29a      	uxth	r2, r3
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	60da      	str	r2, [r3, #12]
 800957c:	e002      	b.n	8009584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2201      	movs	r2, #1
 8009588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2201      	movs	r2, #1
 8009590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2200      	movs	r2, #0
 8009598:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2200      	movs	r2, #0
 800959e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80095a0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3748      	adds	r7, #72	@ 0x48
 80095a8:	46bd      	mov	sp, r7
 80095aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ae:	bf00      	nop
 80095b0:	58024400 	.word	0x58024400
 80095b4:	03d09000 	.word	0x03d09000
 80095b8:	003d0900 	.word	0x003d0900
 80095bc:	0800be54 	.word	0x0800be54

080095c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095cc:	f003 0308 	and.w	r3, r3, #8
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	f003 0302 	and.w	r3, r3, #2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00a      	beq.n	800962e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009632:	f003 0304 	and.w	r3, r3, #4
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	430a      	orrs	r2, r1
 800964e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009654:	f003 0310 	and.w	r3, r3, #16
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00a      	beq.n	8009672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01a      	beq.n	80096d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096be:	d10a      	bne.n	80096d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	605a      	str	r2, [r3, #4]
  }
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b098      	sub	sp, #96	@ 0x60
 8009708:	af02      	add	r7, sp, #8
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009714:	f7f8 f866 	bl	80017e4 <HAL_GetTick>
 8009718:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b08      	cmp	r3, #8
 8009726:	d12f      	bne.n	8009788 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009728:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009730:	2200      	movs	r2, #0
 8009732:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f88e 	bl	8009858 <UART_WaitOnFlagUntilTimeout>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d022      	beq.n	8009788 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009756:	653b      	str	r3, [r7, #80]	@ 0x50
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009760:	647b      	str	r3, [r7, #68]	@ 0x44
 8009762:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800976e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e6      	bne.n	8009742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e063      	b.n	8009850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0304 	and.w	r3, r3, #4
 8009792:	2b04      	cmp	r3, #4
 8009794:	d149      	bne.n	800982a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009796:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800979e:	2200      	movs	r2, #0
 80097a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f857 	bl	8009858 <UART_WaitOnFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d03c      	beq.n	800982a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	623b      	str	r3, [r7, #32]
   return(result);
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	461a      	mov	r2, r3
 80097cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80097d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e6      	bne.n	80097b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f023 0301 	bic.w	r3, r3, #1
 80097f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3308      	adds	r3, #8
 8009800:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009802:	61fa      	str	r2, [r7, #28]
 8009804:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	69b9      	ldr	r1, [r7, #24]
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	617b      	str	r3, [r7, #20]
   return(result);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e5      	bne.n	80097e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2220      	movs	r2, #32
 800981a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009826:	2303      	movs	r3, #3
 8009828:	e012      	b.n	8009850 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2220      	movs	r2, #32
 800982e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3758      	adds	r7, #88	@ 0x58
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009868:	e04f      	b.n	800990a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009870:	d04b      	beq.n	800990a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009872:	f7f7 ffb7 	bl	80017e4 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	69ba      	ldr	r2, [r7, #24]
 800987e:	429a      	cmp	r2, r3
 8009880:	d302      	bcc.n	8009888 <UART_WaitOnFlagUntilTimeout+0x30>
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e04e      	b.n	800992a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 0304 	and.w	r3, r3, #4
 8009896:	2b00      	cmp	r3, #0
 8009898:	d037      	beq.n	800990a <UART_WaitOnFlagUntilTimeout+0xb2>
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b80      	cmp	r3, #128	@ 0x80
 800989e:	d034      	beq.n	800990a <UART_WaitOnFlagUntilTimeout+0xb2>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b40      	cmp	r3, #64	@ 0x40
 80098a4:	d031      	beq.n	800990a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f003 0308 	and.w	r3, r3, #8
 80098b0:	2b08      	cmp	r3, #8
 80098b2:	d110      	bne.n	80098d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2208      	movs	r2, #8
 80098ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f000 f95b 	bl	8009b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2208      	movs	r2, #8
 80098c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e029      	b.n	800992a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098e4:	d111      	bne.n	800990a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80098ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 f941 	bl	8009b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e00f      	b.n	800992a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69da      	ldr	r2, [r3, #28]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4013      	ands	r3, r2
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	429a      	cmp	r2, r3
 8009918:	bf0c      	ite	eq
 800991a:	2301      	moveq	r3, #1
 800991c:	2300      	movne	r3, #0
 800991e:	b2db      	uxtb	r3, r3
 8009920:	461a      	mov	r2, r3
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	429a      	cmp	r2, r3
 8009926:	d0a0      	beq.n	800986a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009934:	b480      	push	{r7}
 8009936:	b0a3      	sub	sp, #140	@ 0x8c
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	88fa      	ldrh	r2, [r7, #6]
 800994c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	88fa      	ldrh	r2, [r7, #6]
 8009954:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	689b      	ldr	r3, [r3, #8]
 8009962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009966:	d10e      	bne.n	8009986 <UART_Start_Receive_IT+0x52>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	691b      	ldr	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d105      	bne.n	800997c <UART_Start_Receive_IT+0x48>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009976:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800997a:	e02d      	b.n	80099d8 <UART_Start_Receive_IT+0xa4>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	22ff      	movs	r2, #255	@ 0xff
 8009980:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009984:	e028      	b.n	80099d8 <UART_Start_Receive_IT+0xa4>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10d      	bne.n	80099aa <UART_Start_Receive_IT+0x76>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d104      	bne.n	80099a0 <UART_Start_Receive_IT+0x6c>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	22ff      	movs	r2, #255	@ 0xff
 800999a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800999e:	e01b      	b.n	80099d8 <UART_Start_Receive_IT+0xa4>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	227f      	movs	r2, #127	@ 0x7f
 80099a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099a8:	e016      	b.n	80099d8 <UART_Start_Receive_IT+0xa4>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099b2:	d10d      	bne.n	80099d0 <UART_Start_Receive_IT+0x9c>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d104      	bne.n	80099c6 <UART_Start_Receive_IT+0x92>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	227f      	movs	r2, #127	@ 0x7f
 80099c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099c4:	e008      	b.n	80099d8 <UART_Start_Receive_IT+0xa4>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	223f      	movs	r2, #63	@ 0x3f
 80099ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099ce:	e003      	b.n	80099d8 <UART_Start_Receive_IT+0xa4>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2222      	movs	r2, #34	@ 0x22
 80099e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3308      	adds	r3, #8
 80099ee:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80099f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099fa:	f043 0301 	orr.w	r3, r3, #1
 80099fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	3308      	adds	r3, #8
 8009a08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009a0c:	673a      	str	r2, [r7, #112]	@ 0x70
 8009a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009a12:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8009a1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e3      	bne.n	80099e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a28:	d14f      	bne.n	8009aca <UART_Start_Receive_IT+0x196>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a30:	88fa      	ldrh	r2, [r7, #6]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d349      	bcc.n	8009aca <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a3e:	d107      	bne.n	8009a50 <UART_Start_Receive_IT+0x11c>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d103      	bne.n	8009a50 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4a47      	ldr	r2, [pc, #284]	@ (8009b68 <UART_Start_Receive_IT+0x234>)
 8009a4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8009a4e:	e002      	b.n	8009a56 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a46      	ldr	r2, [pc, #280]	@ (8009b6c <UART_Start_Receive_IT+0x238>)
 8009a54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01a      	beq.n	8009a94 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a82:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009a86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009a8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e4      	bne.n	8009a5e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009ab4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009ab6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e5      	bne.n	8009a94 <UART_Start_Receive_IT+0x160>
 8009ac8:	e046      	b.n	8009b58 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ad2:	d107      	bne.n	8009ae4 <UART_Start_Receive_IT+0x1b0>
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d103      	bne.n	8009ae4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4a24      	ldr	r2, [pc, #144]	@ (8009b70 <UART_Start_Receive_IT+0x23c>)
 8009ae0:	675a      	str	r2, [r3, #116]	@ 0x74
 8009ae2:	e002      	b.n	8009aea <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4a23      	ldr	r2, [pc, #140]	@ (8009b74 <UART_Start_Receive_IT+0x240>)
 8009ae8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d019      	beq.n	8009b26 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009b06:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b12:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_Start_Receive_IT+0x1be>
 8009b24:	e018      	b.n	8009b58 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	613b      	str	r3, [r7, #16]
   return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f043 0320 	orr.w	r3, r3, #32
 8009b3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b44:	623b      	str	r3, [r7, #32]
 8009b46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	69f9      	ldr	r1, [r7, #28]
 8009b4a:	6a3a      	ldr	r2, [r7, #32]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e6      	bne.n	8009b26 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	378c      	adds	r7, #140	@ 0x8c
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	0800a6dd 	.word	0x0800a6dd
 8009b6c:	0800a37d 	.word	0x0800a37d
 8009b70:	0800a1c5 	.word	0x0800a1c5
 8009b74:	0800a00d 	.word	0x0800a00d

08009b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b095      	sub	sp, #84	@ 0x54
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ba0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e6      	bne.n	8009b80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bc2:	69fa      	ldr	r2, [r7, #28]
 8009bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8009c40 <UART_EndRxTransfer+0xc8>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3308      	adds	r3, #8
 8009bd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bda:	e841 2300 	strex	r3, r2, [r1]
 8009bde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1e5      	bne.n	8009bb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d118      	bne.n	8009c20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f023 0310 	bic.w	r3, r3, #16
 8009c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c0c:	61bb      	str	r3, [r7, #24]
 8009c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	6979      	ldr	r1, [r7, #20]
 8009c12:	69ba      	ldr	r2, [r7, #24]
 8009c14:	e841 2300 	strex	r3, r2, [r1]
 8009c18:	613b      	str	r3, [r7, #16]
   return(result);
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e6      	bne.n	8009bee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2220      	movs	r2, #32
 8009c24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c34:	bf00      	nop
 8009c36:	3754      	adds	r7, #84	@ 0x54
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr
 8009c40:	effffffe 	.word	0xeffffffe

08009c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7fe ff2e 	bl	8008ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c68:	bf00      	nop
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b08f      	sub	sp, #60	@ 0x3c
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c7e:	2b21      	cmp	r3, #33	@ 0x21
 8009c80:	d14c      	bne.n	8009d1c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d132      	bne.n	8009cf4 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e6      	bne.n	8009c8e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	61bb      	str	r3, [r7, #24]
 8009ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6979      	ldr	r1, [r7, #20]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	613b      	str	r3, [r7, #16]
   return(result);
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e6      	bne.n	8009cc0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009cf2:	e013      	b.n	8009d1c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009cf8:	781a      	ldrb	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	3b01      	subs	r3, #1
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009d1c:	bf00      	nop
 8009d1e:	373c      	adds	r7, #60	@ 0x3c
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b091      	sub	sp, #68	@ 0x44
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d36:	2b21      	cmp	r3, #33	@ 0x21
 8009d38:	d151      	bne.n	8009dde <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d132      	bne.n	8009dac <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	e853 3f00 	ldrex	r3, [r3]
 8009d52:	623b      	str	r3, [r7, #32]
   return(result);
 8009d54:	6a3b      	ldr	r3, [r7, #32]
 8009d56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d64:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d6c:	e841 2300 	strex	r3, r2, [r1]
 8009d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e6      	bne.n	8009d46 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	461a      	mov	r2, r3
 8009d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d96:	61fb      	str	r3, [r7, #28]
 8009d98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	69b9      	ldr	r1, [r7, #24]
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	617b      	str	r3, [r7, #20]
   return(result);
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e6      	bne.n	8009d78 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009daa:	e018      	b.n	8009dde <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dc0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dc6:	1c9a      	adds	r2, r3, #2
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009dde:	bf00      	nop
 8009de0:	3744      	adds	r7, #68	@ 0x44
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b091      	sub	sp, #68	@ 0x44
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009df8:	2b21      	cmp	r3, #33	@ 0x21
 8009dfa:	d160      	bne.n	8009ebe <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009e02:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009e04:	e057      	b.n	8009eb6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d133      	bne.n	8009e7a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3308      	adds	r3, #8
 8009e18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	623b      	str	r3, [r7, #32]
   return(result);
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009e28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3308      	adds	r3, #8
 8009e30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e32:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e3a:	e841 2300 	strex	r3, r2, [r1]
 8009e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1e5      	bne.n	8009e12 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	e853 3f00 	ldrex	r3, [r3]
 8009e52:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e64:	61fb      	str	r3, [r7, #28]
 8009e66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e68:	69b9      	ldr	r1, [r7, #24]
 8009e6a:	69fa      	ldr	r2, [r7, #28]
 8009e6c:	e841 2300 	strex	r3, r2, [r1]
 8009e70:	617b      	str	r3, [r7, #20]
   return(result);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d1e6      	bne.n	8009e46 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009e78:	e021      	b.n	8009ebe <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d013      	beq.n	8009eb0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e8c:	781a      	ldrb	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	3b01      	subs	r3, #1
 8009ea8:	b29a      	uxth	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009eb0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009eb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1a4      	bne.n	8009e06 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009ebc:	e7ff      	b.n	8009ebe <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009ebe:	bf00      	nop
 8009ec0:	3744      	adds	r7, #68	@ 0x44
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b091      	sub	sp, #68	@ 0x44
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ed8:	2b21      	cmp	r3, #33	@ 0x21
 8009eda:	d165      	bne.n	8009fa8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009ee2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009ee4:	e05c      	b.n	8009fa0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d133      	bne.n	8009f5a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	e853 3f00 	ldrex	r3, [r3]
 8009f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f1a:	e841 2300 	strex	r3, r2, [r1]
 8009f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d1e5      	bne.n	8009ef2 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	e853 3f00 	ldrex	r3, [r3]
 8009f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f44:	61bb      	str	r3, [r7, #24]
 8009f46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f48:	6979      	ldr	r1, [r7, #20]
 8009f4a:	69ba      	ldr	r2, [r7, #24]
 8009f4c:	e841 2300 	strex	r3, r2, [r1]
 8009f50:	613b      	str	r3, [r7, #16]
   return(result);
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e6      	bne.n	8009f26 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009f58:	e026      	b.n	8009fa8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69db      	ldr	r3, [r3, #28]
 8009f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d018      	beq.n	8009f9a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f7c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f82:	1c9a      	adds	r2, r3, #2
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	3b01      	subs	r3, #1
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009f9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009fa0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d19f      	bne.n	8009ee6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009fa6:	e7ff      	b.n	8009fa8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009fa8:	bf00      	nop
 8009faa:	3744      	adds	r7, #68	@ 0x44
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	e853 3f00 	ldrex	r3, [r3]
 8009fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fd0:	61fb      	str	r3, [r7, #28]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	61bb      	str	r3, [r7, #24]
 8009fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fde:	6979      	ldr	r1, [r7, #20]
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	e841 2300 	strex	r3, r2, [r1]
 8009fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d1e6      	bne.n	8009fbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7fe fd57 	bl	8008ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a002:	bf00      	nop
 800a004:	3720      	adds	r7, #32
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b09c      	sub	sp, #112	@ 0x70
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a01a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a024:	2b22      	cmp	r3, #34	@ 0x22
 800a026:	f040 80be 	bne.w	800a1a6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a030:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a034:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a038:	b2d9      	uxtb	r1, r3
 800a03a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a044:	400a      	ands	r2, r1
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a04e:	1c5a      	adds	r2, r3, #1
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29a      	uxth	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f040 80a1 	bne.w	800a1b6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a07a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a07c:	e853 3f00 	ldrex	r3, [r3]
 800a080:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a092:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a094:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a098:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e6      	bne.n	800a074 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3308      	adds	r3, #8
 800a0ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a0b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b8:	f023 0301 	bic.w	r3, r3, #1
 800a0bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a0c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a0c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a0cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a0d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e5      	bne.n	800a0a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a33      	ldr	r2, [pc, #204]	@ (800a1c0 <UART_RxISR_8BIT+0x1b4>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d01f      	beq.n	800a138 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d018      	beq.n	800a138 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a10e:	e853 3f00 	ldrex	r3, [r3]
 800a112:	623b      	str	r3, [r7, #32]
   return(result);
 800a114:	6a3b      	ldr	r3, [r7, #32]
 800a116:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a11a:	663b      	str	r3, [r7, #96]	@ 0x60
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	461a      	mov	r2, r3
 800a122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a124:	633b      	str	r3, [r7, #48]	@ 0x30
 800a126:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a128:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a12a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a12c:	e841 2300 	strex	r3, r2, [r1]
 800a130:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e6      	bne.n	800a106 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d12e      	bne.n	800a19e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	e853 3f00 	ldrex	r3, [r3]
 800a152:	60fb      	str	r3, [r7, #12]
   return(result);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0310 	bic.w	r3, r3, #16
 800a15a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a168:	69b9      	ldr	r1, [r7, #24]
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	e841 2300 	strex	r3, r2, [r1]
 800a170:	617b      	str	r3, [r7, #20]
   return(result);
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e6      	bne.n	800a146 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f003 0310 	and.w	r3, r3, #16
 800a182:	2b10      	cmp	r3, #16
 800a184:	d103      	bne.n	800a18e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2210      	movs	r2, #16
 800a18c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7fe fc9e 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a19c:	e00b      	b.n	800a1b6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7f6 feea 	bl	8000f78 <HAL_UART_RxCpltCallback>
}
 800a1a4:	e007      	b.n	800a1b6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	699a      	ldr	r2, [r3, #24]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f042 0208 	orr.w	r2, r2, #8
 800a1b4:	619a      	str	r2, [r3, #24]
}
 800a1b6:	bf00      	nop
 800a1b8:	3770      	adds	r7, #112	@ 0x70
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	58000c00 	.word	0x58000c00

0800a1c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b09c      	sub	sp, #112	@ 0x70
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a1d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1dc:	2b22      	cmp	r3, #34	@ 0x22
 800a1de:	f040 80be 	bne.w	800a35e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a1f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800a1f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a200:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a206:	1c9a      	adds	r2, r3, #2
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a224:	b29b      	uxth	r3, r3
 800a226:	2b00      	cmp	r3, #0
 800a228:	f040 80a1 	bne.w	800a36e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a23a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a23c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a240:	667b      	str	r3, [r7, #100]	@ 0x64
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a24a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a24c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a250:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e6      	bne.n	800a22c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3308      	adds	r3, #8
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	f023 0301 	bic.w	r3, r3, #1
 800a274:	663b      	str	r3, [r7, #96]	@ 0x60
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3308      	adds	r3, #8
 800a27c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a27e:	643a      	str	r2, [r7, #64]	@ 0x40
 800a280:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a284:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e5      	bne.n	800a25e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2220      	movs	r2, #32
 800a296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a33      	ldr	r2, [pc, #204]	@ (800a378 <UART_RxISR_16BIT+0x1b4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d01f      	beq.n	800a2f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d018      	beq.n	800a2f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	e853 3f00 	ldrex	r3, [r3]
 800a2ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2e4:	e841 2300 	strex	r3, r2, [r1]
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1e6      	bne.n	800a2be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d12e      	bne.n	800a356 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f023 0310 	bic.w	r3, r3, #16
 800a312:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	461a      	mov	r2, r3
 800a31a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a31c:	61bb      	str	r3, [r7, #24]
 800a31e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6979      	ldr	r1, [r7, #20]
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	613b      	str	r3, [r7, #16]
   return(result);
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e6      	bne.n	800a2fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	f003 0310 	and.w	r3, r3, #16
 800a33a:	2b10      	cmp	r3, #16
 800a33c:	d103      	bne.n	800a346 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2210      	movs	r2, #16
 800a344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fe fbc2 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a354:	e00b      	b.n	800a36e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7f6 fe0e 	bl	8000f78 <HAL_UART_RxCpltCallback>
}
 800a35c:	e007      	b.n	800a36e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0208 	orr.w	r2, r2, #8
 800a36c:	619a      	str	r2, [r3, #24]
}
 800a36e:	bf00      	nop
 800a370:	3770      	adds	r7, #112	@ 0x70
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	58000c00 	.word	0x58000c00

0800a37c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b0ac      	sub	sp, #176	@ 0xb0
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a38a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3b2:	2b22      	cmp	r3, #34	@ 0x22
 800a3b4:	f040 8180 	bne.w	800a6b8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a3be:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a3c2:	e123      	b.n	800a60c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a3ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800a3d2:	b2d9      	uxtb	r1, r3
 800a3d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3de:	400a      	ands	r2, r1
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	69db      	ldr	r3, [r3, #28]
 800a406:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a40a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	2b00      	cmp	r3, #0
 800a414:	d053      	beq.n	800a4be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d011      	beq.n	800a446 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00b      	beq.n	800a446 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2201      	movs	r2, #1
 800a434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a43c:	f043 0201 	orr.w	r2, r3, #1
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d011      	beq.n	800a476 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a452:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2202      	movs	r2, #2
 800a464:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a46c:	f043 0204 	orr.w	r2, r3, #4
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a47a:	f003 0304 	and.w	r3, r3, #4
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d011      	beq.n	800a4a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	2204      	movs	r2, #4
 800a494:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a49c:	f043 0202 	orr.w	r2, r3, #2
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d006      	beq.n	800a4be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7fe fb07 	bl	8008ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f040 80a0 	bne.w	800a60c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a4da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a4dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a4f0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a4f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a4f6:	e841 2300 	strex	r3, r2, [r1]
 800a4fa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a4fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e4      	bne.n	800a4cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a512:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a514:	4b6e      	ldr	r3, [pc, #440]	@ (800a6d0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800a516:	4013      	ands	r3, r2
 800a518:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3308      	adds	r3, #8
 800a522:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a526:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a528:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a52c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a534:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e3      	bne.n	800a502 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2220      	movs	r2, #32
 800a53e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a60      	ldr	r2, [pc, #384]	@ (800a6d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d021      	beq.n	800a59c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d01a      	beq.n	800a59c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a576:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a57a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a588:	657b      	str	r3, [r7, #84]	@ 0x54
 800a58a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a58e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a590:	e841 2300 	strex	r3, r2, [r1]
 800a594:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e4      	bne.n	800a566 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d130      	bne.n	800a606 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b2:	e853 3f00 	ldrex	r3, [r3]
 800a5b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	f023 0310 	bic.w	r3, r3, #16
 800a5be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a5ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5d4:	e841 2300 	strex	r3, r2, [r1]
 800a5d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e4      	bne.n	800a5aa <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	69db      	ldr	r3, [r3, #28]
 800a5e6:	f003 0310 	and.w	r3, r3, #16
 800a5ea:	2b10      	cmp	r3, #16
 800a5ec:	d103      	bne.n	800a5f6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2210      	movs	r2, #16
 800a5f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7fe fa6a 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
 800a604:	e002      	b.n	800a60c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7f6 fcb6 	bl	8000f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a60c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800a614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a618:	f003 0320 	and.w	r3, r3, #32
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f47f aed1 	bne.w	800a3c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a628:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a62c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a630:	2b00      	cmp	r3, #0
 800a632:	d049      	beq.n	800a6c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a63a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a63e:	429a      	cmp	r2, r3
 800a640:	d242      	bcs.n	800a6c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3308      	adds	r3, #8
 800a648:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	e853 3f00 	ldrex	r3, [r3]
 800a650:	61fb      	str	r3, [r7, #28]
   return(result);
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a658:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	3308      	adds	r3, #8
 800a662:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a666:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a668:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a66c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e3      	bne.n	800a642 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a16      	ldr	r2, [pc, #88]	@ (800a6d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a67e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	e853 3f00 	ldrex	r3, [r3]
 800a68c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f043 0320 	orr.w	r3, r3, #32
 800a694:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	461a      	mov	r2, r3
 800a69e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a6a2:	61bb      	str	r3, [r7, #24]
 800a6a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	6979      	ldr	r1, [r7, #20]
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	e841 2300 	strex	r3, r2, [r1]
 800a6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e4      	bne.n	800a680 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a6b6:	e007      	b.n	800a6c8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	699a      	ldr	r2, [r3, #24]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f042 0208 	orr.w	r2, r2, #8
 800a6c6:	619a      	str	r2, [r3, #24]
}
 800a6c8:	bf00      	nop
 800a6ca:	37b0      	adds	r7, #176	@ 0xb0
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	effffffe 	.word	0xeffffffe
 800a6d4:	58000c00 	.word	0x58000c00
 800a6d8:	0800a00d 	.word	0x0800a00d

0800a6dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b0ae      	sub	sp, #184	@ 0xb8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	69db      	ldr	r3, [r3, #28]
 800a6f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a712:	2b22      	cmp	r3, #34	@ 0x22
 800a714:	f040 8184 	bne.w	800aa20 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a71e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a722:	e127      	b.n	800a974 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a736:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a73a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a73e:	4013      	ands	r3, r2
 800a740:	b29a      	uxth	r2, r3
 800a742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a746:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a74c:	1c9a      	adds	r2, r3, #2
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3b01      	subs	r3, #1
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	69db      	ldr	r3, [r3, #28]
 800a76a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a76e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a772:	f003 0307 	and.w	r3, r3, #7
 800a776:	2b00      	cmp	r3, #0
 800a778:	d053      	beq.n	800a822 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a77a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d011      	beq.n	800a7aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800a786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a78a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2201      	movs	r2, #1
 800a798:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7a0:	f043 0201 	orr.w	r2, r3, #1
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d011      	beq.n	800a7da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a7b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a7ba:	f003 0301 	and.w	r3, r3, #1
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00b      	beq.n	800a7da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2202      	movs	r2, #2
 800a7c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7d0:	f043 0204 	orr.w	r2, r3, #4
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d011      	beq.n	800a80a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a7e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00b      	beq.n	800a80a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a800:	f043 0202 	orr.w	r2, r3, #2
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a810:	2b00      	cmp	r3, #0
 800a812:	d006      	beq.n	800a822 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7fe f955 	bl	8008ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a828:	b29b      	uxth	r3, r3
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	f040 80a2 	bne.w	800a974 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a83e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a840:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a844:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a852:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a856:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a858:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a85a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e2      	bne.n	800a830 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	3308      	adds	r3, #8
 800a870:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a874:	e853 3f00 	ldrex	r3, [r3]
 800a878:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a87a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a87c:	4b6e      	ldr	r3, [pc, #440]	@ (800aa38 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800a87e:	4013      	ands	r3, r2
 800a880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	3308      	adds	r3, #8
 800a88a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a88e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a890:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a894:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a89c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e3      	bne.n	800a86a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2220      	movs	r2, #32
 800a8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a60      	ldr	r2, [pc, #384]	@ (800aa3c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d021      	beq.n	800a904 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d01a      	beq.n	800a904 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8d6:	e853 3f00 	ldrex	r3, [r3]
 800a8da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a8e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a8f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a8f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8f8:	e841 2300 	strex	r3, r2, [r1]
 800a8fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1e4      	bne.n	800a8ce <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d130      	bne.n	800a96e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91a:	e853 3f00 	ldrex	r3, [r3]
 800a91e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a922:	f023 0310 	bic.w	r3, r3, #16
 800a926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	461a      	mov	r2, r3
 800a930:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a934:	647b      	str	r3, [r7, #68]	@ 0x44
 800a936:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a93a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a93c:	e841 2300 	strex	r3, r2, [r1]
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e4      	bne.n	800a912 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	f003 0310 	and.w	r3, r3, #16
 800a952:	2b10      	cmp	r3, #16
 800a954:	d103      	bne.n	800a95e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2210      	movs	r2, #16
 800a95c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7fe f8b6 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
 800a96c:	e002      	b.n	800a974 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f7f6 fb02 	bl	8000f78 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a974:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d006      	beq.n	800a98a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800a97c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a980:	f003 0320 	and.w	r3, r3, #32
 800a984:	2b00      	cmp	r3, #0
 800a986:	f47f aecd 	bne.w	800a724 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a990:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a994:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d049      	beq.n	800aa30 <UART_RxISR_16BIT_FIFOEN+0x354>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a9a2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d242      	bcs.n	800aa30 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	3308      	adds	r3, #8
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ba:	6a3b      	ldr	r3, [r7, #32]
 800a9bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	3308      	adds	r3, #8
 800a9ca:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a9ce:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9d6:	e841 2300 	strex	r3, r2, [r1]
 800a9da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e3      	bne.n	800a9aa <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a16      	ldr	r2, [pc, #88]	@ (800aa40 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a9e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	e853 3f00 	ldrex	r3, [r3]
 800a9f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f043 0320 	orr.w	r3, r3, #32
 800a9fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa0a:	61fb      	str	r3, [r7, #28]
 800aa0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	69b9      	ldr	r1, [r7, #24]
 800aa10:	69fa      	ldr	r2, [r7, #28]
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	617b      	str	r3, [r7, #20]
   return(result);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e4      	bne.n	800a9e8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa1e:	e007      	b.n	800aa30 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699a      	ldr	r2, [r3, #24]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f042 0208 	orr.w	r2, r2, #8
 800aa2e:	619a      	str	r2, [r3, #24]
}
 800aa30:	bf00      	nop
 800aa32:	37b8      	adds	r7, #184	@ 0xb8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	effffffe 	.word	0xeffffffe
 800aa3c:	58000c00 	.word	0x58000c00
 800aa40:	0800a1c5 	.word	0x0800a1c5

0800aa44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa92:	2302      	movs	r3, #2
 800aa94:	e027      	b.n	800aae6 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2201      	movs	r2, #1
 800aa9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2224      	movs	r2, #36	@ 0x24
 800aaa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f022 0201 	bic.w	r2, r2, #1
 800aabc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800aac4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2220      	movs	r2, #32
 800aad8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aae4:	2300      	movs	r3, #0
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b084      	sub	sp, #16
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d101      	bne.n	800ab0a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab06:	2302      	movs	r3, #2
 800ab08:	e02d      	b.n	800ab66 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2224      	movs	r2, #36	@ 0x24
 800ab16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f022 0201 	bic.w	r2, r2, #1
 800ab30:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689b      	ldr	r3, [r3, #8]
 800ab38:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	430a      	orrs	r2, r1
 800ab44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f850 	bl	800abec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2220      	movs	r2, #32
 800ab58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d101      	bne.n	800ab86 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab82:	2302      	movs	r3, #2
 800ab84:	e02d      	b.n	800abe2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2224      	movs	r2, #36	@ 0x24
 800ab92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f022 0201 	bic.w	r2, r2, #1
 800abac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	430a      	orrs	r2, r1
 800abc0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f812 	bl	800abec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2220      	movs	r2, #32
 800abd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d108      	bne.n	800ac0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac0c:	e031      	b.n	800ac72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac0e:	2310      	movs	r3, #16
 800ac10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac12:	2310      	movs	r3, #16
 800ac14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	0e5b      	lsrs	r3, r3, #25
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	f003 0307 	and.w	r3, r3, #7
 800ac24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	0f5b      	lsrs	r3, r3, #29
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	f003 0307 	and.w	r3, r3, #7
 800ac34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	7b3a      	ldrb	r2, [r7, #12]
 800ac3a:	4911      	ldr	r1, [pc, #68]	@ (800ac80 <UARTEx_SetNbDataToProcess+0x94>)
 800ac3c:	5c8a      	ldrb	r2, [r1, r2]
 800ac3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac42:	7b3a      	ldrb	r2, [r7, #12]
 800ac44:	490f      	ldr	r1, [pc, #60]	@ (800ac84 <UARTEx_SetNbDataToProcess+0x98>)
 800ac46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac48:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
 800ac56:	7b7a      	ldrb	r2, [r7, #13]
 800ac58:	4909      	ldr	r1, [pc, #36]	@ (800ac80 <UARTEx_SetNbDataToProcess+0x94>)
 800ac5a:	5c8a      	ldrb	r2, [r1, r2]
 800ac5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac60:	7b7a      	ldrb	r2, [r7, #13]
 800ac62:	4908      	ldr	r1, [pc, #32]	@ (800ac84 <UARTEx_SetNbDataToProcess+0x98>)
 800ac64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac66:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ac72:	bf00      	nop
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	0800be6c 	.word	0x0800be6c
 800ac84:	0800be74 	.word	0x0800be74

0800ac88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac88:	b084      	sub	sp, #16
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	f107 001c 	add.w	r0, r7, #28
 800ac96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d121      	bne.n	800ace6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	4b2c      	ldr	r3, [pc, #176]	@ (800ad64 <USB_CoreInit+0xdc>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	687a      	ldr	r2, [r7, #4]
 800acb8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800acca:	2b01      	cmp	r3, #1
 800accc:	d105      	bne.n	800acda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 faaa 	bl	800b234 <USB_CoreReset>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
 800ace4:	e01b      	b.n	800ad1e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa9e 	bl	800b234 <USB_CoreReset>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800acfc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d106      	bne.n	800ad12 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad10:	e005      	b.n	800ad1e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad1e:	7fbb      	ldrb	r3, [r7, #30]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d116      	bne.n	800ad52 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad32:	4b0d      	ldr	r3, [pc, #52]	@ (800ad68 <USB_CoreInit+0xe0>)
 800ad34:	4313      	orrs	r3, r2
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f043 0206 	orr.w	r2, r3, #6
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f043 0220 	orr.w	r2, r3, #32
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad5e:	b004      	add	sp, #16
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	ffbdffbf 	.word	0xffbdffbf
 800ad68:	03ee0000 	.word	0x03ee0000

0800ad6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b083      	sub	sp, #12
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	f023 0201 	bic.w	r2, r3, #1
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b084      	sub	sp, #16
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adaa:	78fb      	ldrb	r3, [r7, #3]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d115      	bne.n	800addc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800adbc:	200a      	movs	r0, #10
 800adbe:	f7f6 fd1d 	bl	80017fc <HAL_Delay>
      ms += 10U;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	330a      	adds	r3, #10
 800adc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fa25 	bl	800b218 <USB_GetMode>
 800adce:	4603      	mov	r3, r0
 800add0:	2b01      	cmp	r3, #1
 800add2:	d01e      	beq.n	800ae12 <USB_SetCurrentMode+0x84>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2bc7      	cmp	r3, #199	@ 0xc7
 800add8:	d9f0      	bls.n	800adbc <USB_SetCurrentMode+0x2e>
 800adda:	e01a      	b.n	800ae12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800addc:	78fb      	ldrb	r3, [r7, #3]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d115      	bne.n	800ae0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800adee:	200a      	movs	r0, #10
 800adf0:	f7f6 fd04 	bl	80017fc <HAL_Delay>
      ms += 10U;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	330a      	adds	r3, #10
 800adf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fa0c 	bl	800b218 <USB_GetMode>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <USB_SetCurrentMode+0x84>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae0a:	d9f0      	bls.n	800adee <USB_SetCurrentMode+0x60>
 800ae0c:	e001      	b.n	800ae12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e005      	b.n	800ae1e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2bc8      	cmp	r3, #200	@ 0xc8
 800ae16:	d101      	bne.n	800ae1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e000      	b.n	800ae1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae28:	b084      	sub	sp, #16
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b086      	sub	sp, #24
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ae36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	e009      	b.n	800ae5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	3340      	adds	r3, #64	@ 0x40
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	2200      	movs	r2, #0
 800ae54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	613b      	str	r3, [r7, #16]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	2b0e      	cmp	r3, #14
 800ae60:	d9f2      	bls.n	800ae48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae62:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d11c      	bne.n	800aea4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae78:	f043 0302 	orr.w	r3, r3, #2
 800ae7c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae82:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	e005      	b.n	800aeb0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	2300      	movs	r3, #0
 800aeba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aebc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d10d      	bne.n	800aee0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d104      	bne.n	800aed6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aecc:	2100      	movs	r1, #0
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f968 	bl	800b1a4 <USB_SetDevSpeed>
 800aed4:	e008      	b.n	800aee8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aed6:	2101      	movs	r1, #1
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f963 	bl	800b1a4 <USB_SetDevSpeed>
 800aede:	e003      	b.n	800aee8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aee0:	2103      	movs	r1, #3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f95e 	bl	800b1a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aee8:	2110      	movs	r1, #16
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f8fa 	bl	800b0e4 <USB_FlushTxFifo>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d001      	beq.n	800aefa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f924 	bl	800b148 <USB_FlushRxFifo>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af10:	461a      	mov	r2, r3
 800af12:	2300      	movs	r3, #0
 800af14:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af1c:	461a      	mov	r2, r3
 800af1e:	2300      	movs	r3, #0
 800af20:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af28:	461a      	mov	r2, r3
 800af2a:	2300      	movs	r3, #0
 800af2c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
 800af32:	e043      	b.n	800afbc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af4a:	d118      	bne.n	800af7e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af5e:	461a      	mov	r2, r3
 800af60:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800af64:	6013      	str	r3, [r2, #0]
 800af66:	e013      	b.n	800af90 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	015a      	lsls	r2, r3, #5
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4413      	add	r3, r2
 800af70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af74:	461a      	mov	r2, r3
 800af76:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800af7a:	6013      	str	r3, [r2, #0]
 800af7c:	e008      	b.n	800af90 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	4413      	add	r3, r2
 800af86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af8a:	461a      	mov	r2, r3
 800af8c:	2300      	movs	r3, #0
 800af8e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af9c:	461a      	mov	r2, r3
 800af9e:	2300      	movs	r3, #0
 800afa0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afae:	461a      	mov	r2, r3
 800afb0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800afb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	3301      	adds	r3, #1
 800afba:	613b      	str	r3, [r7, #16]
 800afbc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800afc0:	461a      	mov	r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d3b5      	bcc.n	800af34 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afc8:	2300      	movs	r3, #0
 800afca:	613b      	str	r3, [r7, #16]
 800afcc:	e043      	b.n	800b056 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	015a      	lsls	r2, r3, #5
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	4413      	add	r3, r2
 800afd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afe0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afe4:	d118      	bne.n	800b018 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d10a      	bne.n	800b002 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	015a      	lsls	r2, r3, #5
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4413      	add	r3, r2
 800aff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff8:	461a      	mov	r2, r3
 800affa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	e013      	b.n	800b02a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b00e:	461a      	mov	r2, r3
 800b010:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	e008      	b.n	800b02a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b024:	461a      	mov	r2, r3
 800b026:	2300      	movs	r3, #0
 800b028:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b036:	461a      	mov	r2, r3
 800b038:	2300      	movs	r3, #0
 800b03a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b048:	461a      	mov	r2, r3
 800b04a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b04e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	3301      	adds	r3, #1
 800b054:	613b      	str	r3, [r7, #16]
 800b056:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b05a:	461a      	mov	r2, r3
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	4293      	cmp	r3, r2
 800b060:	d3b5      	bcc.n	800afce <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b074:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b082:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b084:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d105      	bne.n	800b098 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	f043 0210 	orr.w	r2, r3, #16
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	699a      	ldr	r2, [r3, #24]
 800b09c:	4b0f      	ldr	r3, [pc, #60]	@ (800b0dc <USB_DevInit+0x2b4>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	687a      	ldr	r2, [r7, #4]
 800b0a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b0a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d005      	beq.n	800b0b8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	f043 0208 	orr.w	r2, r3, #8
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b0b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d105      	bne.n	800b0cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	699a      	ldr	r2, [r3, #24]
 800b0c4:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <USB_DevInit+0x2b8>)
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0d8:	b004      	add	sp, #16
 800b0da:	4770      	bx	lr
 800b0dc:	803c3800 	.word	0x803c3800
 800b0e0:	40000004 	.word	0x40000004

0800b0e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b0fe:	d901      	bls.n	800b104 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	e01b      	b.n	800b13c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	daf2      	bge.n	800b0f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	019b      	lsls	r3, r3, #6
 800b114:	f043 0220 	orr.w	r2, r3, #32
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3301      	adds	r3, #1
 800b120:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b128:	d901      	bls.n	800b12e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b12a:	2303      	movs	r3, #3
 800b12c:	e006      	b.n	800b13c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f003 0320 	and.w	r3, r3, #32
 800b136:	2b20      	cmp	r3, #32
 800b138:	d0f0      	beq.n	800b11c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b13a:	2300      	movs	r3, #0
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b150:	2300      	movs	r3, #0
 800b152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3301      	adds	r3, #1
 800b158:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b160:	d901      	bls.n	800b166 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b162:	2303      	movs	r3, #3
 800b164:	e018      	b.n	800b198 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	daf2      	bge.n	800b154 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2210      	movs	r2, #16
 800b176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3301      	adds	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b184:	d901      	bls.n	800b18a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e006      	b.n	800b198 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	2b10      	cmp	r3, #16
 800b194:	d0f0      	beq.n	800b178 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	68f9      	ldr	r1, [r7, #12]
 800b1c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b1f0:	f023 0303 	bic.w	r3, r3, #3
 800b1f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b204:	f043 0302 	orr.w	r3, r3, #2
 800b208:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b20a:	2300      	movs	r3, #0
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	f003 0301 	and.w	r3, r3, #1
}
 800b228:	4618      	mov	r0, r3
 800b22a:	370c      	adds	r7, #12
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b234:	b480      	push	{r7}
 800b236:	b085      	sub	sp, #20
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	3301      	adds	r3, #1
 800b244:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b24c:	d901      	bls.n	800b252 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b24e:	2303      	movs	r3, #3
 800b250:	e01b      	b.n	800b28a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	691b      	ldr	r3, [r3, #16]
 800b256:	2b00      	cmp	r3, #0
 800b258:	daf2      	bge.n	800b240 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	f043 0201 	orr.w	r2, r3, #1
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3301      	adds	r3, #1
 800b26e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b276:	d901      	bls.n	800b27c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b278:	2303      	movs	r3, #3
 800b27a:	e006      	b.n	800b28a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b01      	cmp	r3, #1
 800b286:	d0f0      	beq.n	800b26a <USB_CoreReset+0x36>

  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <atoi>:
 800b296:	220a      	movs	r2, #10
 800b298:	2100      	movs	r1, #0
 800b29a:	f000 b87b 	b.w	800b394 <strtol>
	...

0800b2a0 <_strtol_l.constprop.0>:
 800b2a0:	2b24      	cmp	r3, #36	@ 0x24
 800b2a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a6:	4686      	mov	lr, r0
 800b2a8:	4690      	mov	r8, r2
 800b2aa:	d801      	bhi.n	800b2b0 <_strtol_l.constprop.0+0x10>
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d106      	bne.n	800b2be <_strtol_l.constprop.0+0x1e>
 800b2b0:	f000 f8c8 	bl	800b444 <__errno>
 800b2b4:	2316      	movs	r3, #22
 800b2b6:	6003      	str	r3, [r0, #0]
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2be:	4834      	ldr	r0, [pc, #208]	@ (800b390 <_strtol_l.constprop.0+0xf0>)
 800b2c0:	460d      	mov	r5, r1
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2c8:	5d06      	ldrb	r6, [r0, r4]
 800b2ca:	f016 0608 	ands.w	r6, r6, #8
 800b2ce:	d1f8      	bne.n	800b2c2 <_strtol_l.constprop.0+0x22>
 800b2d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2d2:	d12d      	bne.n	800b330 <_strtol_l.constprop.0+0x90>
 800b2d4:	782c      	ldrb	r4, [r5, #0]
 800b2d6:	2601      	movs	r6, #1
 800b2d8:	1c95      	adds	r5, r2, #2
 800b2da:	f033 0210 	bics.w	r2, r3, #16
 800b2de:	d109      	bne.n	800b2f4 <_strtol_l.constprop.0+0x54>
 800b2e0:	2c30      	cmp	r4, #48	@ 0x30
 800b2e2:	d12a      	bne.n	800b33a <_strtol_l.constprop.0+0x9a>
 800b2e4:	782a      	ldrb	r2, [r5, #0]
 800b2e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b2ea:	2a58      	cmp	r2, #88	@ 0x58
 800b2ec:	d125      	bne.n	800b33a <_strtol_l.constprop.0+0x9a>
 800b2ee:	786c      	ldrb	r4, [r5, #1]
 800b2f0:	2310      	movs	r3, #16
 800b2f2:	3502      	adds	r5, #2
 800b2f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b2f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	fbbc f9f3 	udiv	r9, ip, r3
 800b302:	4610      	mov	r0, r2
 800b304:	fb03 ca19 	mls	sl, r3, r9, ip
 800b308:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b30c:	2f09      	cmp	r7, #9
 800b30e:	d81b      	bhi.n	800b348 <_strtol_l.constprop.0+0xa8>
 800b310:	463c      	mov	r4, r7
 800b312:	42a3      	cmp	r3, r4
 800b314:	dd27      	ble.n	800b366 <_strtol_l.constprop.0+0xc6>
 800b316:	1c57      	adds	r7, r2, #1
 800b318:	d007      	beq.n	800b32a <_strtol_l.constprop.0+0x8a>
 800b31a:	4581      	cmp	r9, r0
 800b31c:	d320      	bcc.n	800b360 <_strtol_l.constprop.0+0xc0>
 800b31e:	d101      	bne.n	800b324 <_strtol_l.constprop.0+0x84>
 800b320:	45a2      	cmp	sl, r4
 800b322:	db1d      	blt.n	800b360 <_strtol_l.constprop.0+0xc0>
 800b324:	fb00 4003 	mla	r0, r0, r3, r4
 800b328:	2201      	movs	r2, #1
 800b32a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b32e:	e7eb      	b.n	800b308 <_strtol_l.constprop.0+0x68>
 800b330:	2c2b      	cmp	r4, #43	@ 0x2b
 800b332:	bf04      	itt	eq
 800b334:	782c      	ldrbeq	r4, [r5, #0]
 800b336:	1c95      	addeq	r5, r2, #2
 800b338:	e7cf      	b.n	800b2da <_strtol_l.constprop.0+0x3a>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1da      	bne.n	800b2f4 <_strtol_l.constprop.0+0x54>
 800b33e:	2c30      	cmp	r4, #48	@ 0x30
 800b340:	bf0c      	ite	eq
 800b342:	2308      	moveq	r3, #8
 800b344:	230a      	movne	r3, #10
 800b346:	e7d5      	b.n	800b2f4 <_strtol_l.constprop.0+0x54>
 800b348:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b34c:	2f19      	cmp	r7, #25
 800b34e:	d801      	bhi.n	800b354 <_strtol_l.constprop.0+0xb4>
 800b350:	3c37      	subs	r4, #55	@ 0x37
 800b352:	e7de      	b.n	800b312 <_strtol_l.constprop.0+0x72>
 800b354:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b358:	2f19      	cmp	r7, #25
 800b35a:	d804      	bhi.n	800b366 <_strtol_l.constprop.0+0xc6>
 800b35c:	3c57      	subs	r4, #87	@ 0x57
 800b35e:	e7d8      	b.n	800b312 <_strtol_l.constprop.0+0x72>
 800b360:	f04f 32ff 	mov.w	r2, #4294967295
 800b364:	e7e1      	b.n	800b32a <_strtol_l.constprop.0+0x8a>
 800b366:	1c53      	adds	r3, r2, #1
 800b368:	d108      	bne.n	800b37c <_strtol_l.constprop.0+0xdc>
 800b36a:	2322      	movs	r3, #34	@ 0x22
 800b36c:	f8ce 3000 	str.w	r3, [lr]
 800b370:	4660      	mov	r0, ip
 800b372:	f1b8 0f00 	cmp.w	r8, #0
 800b376:	d0a0      	beq.n	800b2ba <_strtol_l.constprop.0+0x1a>
 800b378:	1e69      	subs	r1, r5, #1
 800b37a:	e006      	b.n	800b38a <_strtol_l.constprop.0+0xea>
 800b37c:	b106      	cbz	r6, 800b380 <_strtol_l.constprop.0+0xe0>
 800b37e:	4240      	negs	r0, r0
 800b380:	f1b8 0f00 	cmp.w	r8, #0
 800b384:	d099      	beq.n	800b2ba <_strtol_l.constprop.0+0x1a>
 800b386:	2a00      	cmp	r2, #0
 800b388:	d1f6      	bne.n	800b378 <_strtol_l.constprop.0+0xd8>
 800b38a:	f8c8 1000 	str.w	r1, [r8]
 800b38e:	e794      	b.n	800b2ba <_strtol_l.constprop.0+0x1a>
 800b390:	0800be7d 	.word	0x0800be7d

0800b394 <strtol>:
 800b394:	4613      	mov	r3, r2
 800b396:	460a      	mov	r2, r1
 800b398:	4601      	mov	r1, r0
 800b39a:	4802      	ldr	r0, [pc, #8]	@ (800b3a4 <strtol+0x10>)
 800b39c:	6800      	ldr	r0, [r0, #0]
 800b39e:	f7ff bf7f 	b.w	800b2a0 <_strtol_l.constprop.0>
 800b3a2:	bf00      	nop
 800b3a4:	24000010 	.word	0x24000010

0800b3a8 <siprintf>:
 800b3a8:	b40e      	push	{r1, r2, r3}
 800b3aa:	b500      	push	{lr}
 800b3ac:	b09c      	sub	sp, #112	@ 0x70
 800b3ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800b3b0:	9002      	str	r0, [sp, #8]
 800b3b2:	9006      	str	r0, [sp, #24]
 800b3b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b3b8:	4809      	ldr	r0, [pc, #36]	@ (800b3e0 <siprintf+0x38>)
 800b3ba:	9107      	str	r1, [sp, #28]
 800b3bc:	9104      	str	r1, [sp, #16]
 800b3be:	4909      	ldr	r1, [pc, #36]	@ (800b3e4 <siprintf+0x3c>)
 800b3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c4:	9105      	str	r1, [sp, #20]
 800b3c6:	6800      	ldr	r0, [r0, #0]
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	a902      	add	r1, sp, #8
 800b3cc:	f000 f9ba 	bl	800b744 <_svfiprintf_r>
 800b3d0:	9b02      	ldr	r3, [sp, #8]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	701a      	strb	r2, [r3, #0]
 800b3d6:	b01c      	add	sp, #112	@ 0x70
 800b3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3dc:	b003      	add	sp, #12
 800b3de:	4770      	bx	lr
 800b3e0:	24000010 	.word	0x24000010
 800b3e4:	ffff0208 	.word	0xffff0208

0800b3e8 <memset>:
 800b3e8:	4402      	add	r2, r0
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d100      	bne.n	800b3f2 <memset+0xa>
 800b3f0:	4770      	bx	lr
 800b3f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3f6:	e7f9      	b.n	800b3ec <memset+0x4>

0800b3f8 <strncmp>:
 800b3f8:	b510      	push	{r4, lr}
 800b3fa:	b16a      	cbz	r2, 800b418 <strncmp+0x20>
 800b3fc:	3901      	subs	r1, #1
 800b3fe:	1884      	adds	r4, r0, r2
 800b400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b404:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b408:	429a      	cmp	r2, r3
 800b40a:	d103      	bne.n	800b414 <strncmp+0x1c>
 800b40c:	42a0      	cmp	r0, r4
 800b40e:	d001      	beq.n	800b414 <strncmp+0x1c>
 800b410:	2a00      	cmp	r2, #0
 800b412:	d1f5      	bne.n	800b400 <strncmp+0x8>
 800b414:	1ad0      	subs	r0, r2, r3
 800b416:	bd10      	pop	{r4, pc}
 800b418:	4610      	mov	r0, r2
 800b41a:	e7fc      	b.n	800b416 <strncmp+0x1e>

0800b41c <strncpy>:
 800b41c:	b510      	push	{r4, lr}
 800b41e:	3901      	subs	r1, #1
 800b420:	4603      	mov	r3, r0
 800b422:	b132      	cbz	r2, 800b432 <strncpy+0x16>
 800b424:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b428:	f803 4b01 	strb.w	r4, [r3], #1
 800b42c:	3a01      	subs	r2, #1
 800b42e:	2c00      	cmp	r4, #0
 800b430:	d1f7      	bne.n	800b422 <strncpy+0x6>
 800b432:	441a      	add	r2, r3
 800b434:	2100      	movs	r1, #0
 800b436:	4293      	cmp	r3, r2
 800b438:	d100      	bne.n	800b43c <strncpy+0x20>
 800b43a:	bd10      	pop	{r4, pc}
 800b43c:	f803 1b01 	strb.w	r1, [r3], #1
 800b440:	e7f9      	b.n	800b436 <strncpy+0x1a>
	...

0800b444 <__errno>:
 800b444:	4b01      	ldr	r3, [pc, #4]	@ (800b44c <__errno+0x8>)
 800b446:	6818      	ldr	r0, [r3, #0]
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	24000010 	.word	0x24000010

0800b450 <__libc_init_array>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	4d0d      	ldr	r5, [pc, #52]	@ (800b488 <__libc_init_array+0x38>)
 800b454:	4c0d      	ldr	r4, [pc, #52]	@ (800b48c <__libc_init_array+0x3c>)
 800b456:	1b64      	subs	r4, r4, r5
 800b458:	10a4      	asrs	r4, r4, #2
 800b45a:	2600      	movs	r6, #0
 800b45c:	42a6      	cmp	r6, r4
 800b45e:	d109      	bne.n	800b474 <__libc_init_array+0x24>
 800b460:	4d0b      	ldr	r5, [pc, #44]	@ (800b490 <__libc_init_array+0x40>)
 800b462:	4c0c      	ldr	r4, [pc, #48]	@ (800b494 <__libc_init_array+0x44>)
 800b464:	f000 fc66 	bl	800bd34 <_init>
 800b468:	1b64      	subs	r4, r4, r5
 800b46a:	10a4      	asrs	r4, r4, #2
 800b46c:	2600      	movs	r6, #0
 800b46e:	42a6      	cmp	r6, r4
 800b470:	d105      	bne.n	800b47e <__libc_init_array+0x2e>
 800b472:	bd70      	pop	{r4, r5, r6, pc}
 800b474:	f855 3b04 	ldr.w	r3, [r5], #4
 800b478:	4798      	blx	r3
 800b47a:	3601      	adds	r6, #1
 800b47c:	e7ee      	b.n	800b45c <__libc_init_array+0xc>
 800b47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b482:	4798      	blx	r3
 800b484:	3601      	adds	r6, #1
 800b486:	e7f2      	b.n	800b46e <__libc_init_array+0x1e>
 800b488:	0800bfb8 	.word	0x0800bfb8
 800b48c:	0800bfb8 	.word	0x0800bfb8
 800b490:	0800bfb8 	.word	0x0800bfb8
 800b494:	0800bfbc 	.word	0x0800bfbc

0800b498 <__retarget_lock_acquire_recursive>:
 800b498:	4770      	bx	lr

0800b49a <__retarget_lock_release_recursive>:
 800b49a:	4770      	bx	lr

0800b49c <_free_r>:
 800b49c:	b538      	push	{r3, r4, r5, lr}
 800b49e:	4605      	mov	r5, r0
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	d041      	beq.n	800b528 <_free_r+0x8c>
 800b4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4a8:	1f0c      	subs	r4, r1, #4
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	bfb8      	it	lt
 800b4ae:	18e4      	addlt	r4, r4, r3
 800b4b0:	f000 f8e0 	bl	800b674 <__malloc_lock>
 800b4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b52c <_free_r+0x90>)
 800b4b6:	6813      	ldr	r3, [r2, #0]
 800b4b8:	b933      	cbnz	r3, 800b4c8 <_free_r+0x2c>
 800b4ba:	6063      	str	r3, [r4, #4]
 800b4bc:	6014      	str	r4, [r2, #0]
 800b4be:	4628      	mov	r0, r5
 800b4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c4:	f000 b8dc 	b.w	800b680 <__malloc_unlock>
 800b4c8:	42a3      	cmp	r3, r4
 800b4ca:	d908      	bls.n	800b4de <_free_r+0x42>
 800b4cc:	6820      	ldr	r0, [r4, #0]
 800b4ce:	1821      	adds	r1, r4, r0
 800b4d0:	428b      	cmp	r3, r1
 800b4d2:	bf01      	itttt	eq
 800b4d4:	6819      	ldreq	r1, [r3, #0]
 800b4d6:	685b      	ldreq	r3, [r3, #4]
 800b4d8:	1809      	addeq	r1, r1, r0
 800b4da:	6021      	streq	r1, [r4, #0]
 800b4dc:	e7ed      	b.n	800b4ba <_free_r+0x1e>
 800b4de:	461a      	mov	r2, r3
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	b10b      	cbz	r3, 800b4e8 <_free_r+0x4c>
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d9fa      	bls.n	800b4de <_free_r+0x42>
 800b4e8:	6811      	ldr	r1, [r2, #0]
 800b4ea:	1850      	adds	r0, r2, r1
 800b4ec:	42a0      	cmp	r0, r4
 800b4ee:	d10b      	bne.n	800b508 <_free_r+0x6c>
 800b4f0:	6820      	ldr	r0, [r4, #0]
 800b4f2:	4401      	add	r1, r0
 800b4f4:	1850      	adds	r0, r2, r1
 800b4f6:	4283      	cmp	r3, r0
 800b4f8:	6011      	str	r1, [r2, #0]
 800b4fa:	d1e0      	bne.n	800b4be <_free_r+0x22>
 800b4fc:	6818      	ldr	r0, [r3, #0]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	6053      	str	r3, [r2, #4]
 800b502:	4408      	add	r0, r1
 800b504:	6010      	str	r0, [r2, #0]
 800b506:	e7da      	b.n	800b4be <_free_r+0x22>
 800b508:	d902      	bls.n	800b510 <_free_r+0x74>
 800b50a:	230c      	movs	r3, #12
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	e7d6      	b.n	800b4be <_free_r+0x22>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	1821      	adds	r1, r4, r0
 800b514:	428b      	cmp	r3, r1
 800b516:	bf04      	itt	eq
 800b518:	6819      	ldreq	r1, [r3, #0]
 800b51a:	685b      	ldreq	r3, [r3, #4]
 800b51c:	6063      	str	r3, [r4, #4]
 800b51e:	bf04      	itt	eq
 800b520:	1809      	addeq	r1, r1, r0
 800b522:	6021      	streq	r1, [r4, #0]
 800b524:	6054      	str	r4, [r2, #4]
 800b526:	e7ca      	b.n	800b4be <_free_r+0x22>
 800b528:	bd38      	pop	{r3, r4, r5, pc}
 800b52a:	bf00      	nop
 800b52c:	2400095c 	.word	0x2400095c

0800b530 <sbrk_aligned>:
 800b530:	b570      	push	{r4, r5, r6, lr}
 800b532:	4e0f      	ldr	r6, [pc, #60]	@ (800b570 <sbrk_aligned+0x40>)
 800b534:	460c      	mov	r4, r1
 800b536:	6831      	ldr	r1, [r6, #0]
 800b538:	4605      	mov	r5, r0
 800b53a:	b911      	cbnz	r1, 800b542 <sbrk_aligned+0x12>
 800b53c:	f000 fba6 	bl	800bc8c <_sbrk_r>
 800b540:	6030      	str	r0, [r6, #0]
 800b542:	4621      	mov	r1, r4
 800b544:	4628      	mov	r0, r5
 800b546:	f000 fba1 	bl	800bc8c <_sbrk_r>
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	d103      	bne.n	800b556 <sbrk_aligned+0x26>
 800b54e:	f04f 34ff 	mov.w	r4, #4294967295
 800b552:	4620      	mov	r0, r4
 800b554:	bd70      	pop	{r4, r5, r6, pc}
 800b556:	1cc4      	adds	r4, r0, #3
 800b558:	f024 0403 	bic.w	r4, r4, #3
 800b55c:	42a0      	cmp	r0, r4
 800b55e:	d0f8      	beq.n	800b552 <sbrk_aligned+0x22>
 800b560:	1a21      	subs	r1, r4, r0
 800b562:	4628      	mov	r0, r5
 800b564:	f000 fb92 	bl	800bc8c <_sbrk_r>
 800b568:	3001      	adds	r0, #1
 800b56a:	d1f2      	bne.n	800b552 <sbrk_aligned+0x22>
 800b56c:	e7ef      	b.n	800b54e <sbrk_aligned+0x1e>
 800b56e:	bf00      	nop
 800b570:	24000958 	.word	0x24000958

0800b574 <_malloc_r>:
 800b574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b578:	1ccd      	adds	r5, r1, #3
 800b57a:	f025 0503 	bic.w	r5, r5, #3
 800b57e:	3508      	adds	r5, #8
 800b580:	2d0c      	cmp	r5, #12
 800b582:	bf38      	it	cc
 800b584:	250c      	movcc	r5, #12
 800b586:	2d00      	cmp	r5, #0
 800b588:	4606      	mov	r6, r0
 800b58a:	db01      	blt.n	800b590 <_malloc_r+0x1c>
 800b58c:	42a9      	cmp	r1, r5
 800b58e:	d904      	bls.n	800b59a <_malloc_r+0x26>
 800b590:	230c      	movs	r3, #12
 800b592:	6033      	str	r3, [r6, #0]
 800b594:	2000      	movs	r0, #0
 800b596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b670 <_malloc_r+0xfc>
 800b59e:	f000 f869 	bl	800b674 <__malloc_lock>
 800b5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a6:	461c      	mov	r4, r3
 800b5a8:	bb44      	cbnz	r4, 800b5fc <_malloc_r+0x88>
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f7ff ffbf 	bl	800b530 <sbrk_aligned>
 800b5b2:	1c43      	adds	r3, r0, #1
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	d158      	bne.n	800b66a <_malloc_r+0xf6>
 800b5b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b5bc:	4627      	mov	r7, r4
 800b5be:	2f00      	cmp	r7, #0
 800b5c0:	d143      	bne.n	800b64a <_malloc_r+0xd6>
 800b5c2:	2c00      	cmp	r4, #0
 800b5c4:	d04b      	beq.n	800b65e <_malloc_r+0xea>
 800b5c6:	6823      	ldr	r3, [r4, #0]
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	eb04 0903 	add.w	r9, r4, r3
 800b5d0:	f000 fb5c 	bl	800bc8c <_sbrk_r>
 800b5d4:	4581      	cmp	r9, r0
 800b5d6:	d142      	bne.n	800b65e <_malloc_r+0xea>
 800b5d8:	6821      	ldr	r1, [r4, #0]
 800b5da:	1a6d      	subs	r5, r5, r1
 800b5dc:	4629      	mov	r1, r5
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f7ff ffa6 	bl	800b530 <sbrk_aligned>
 800b5e4:	3001      	adds	r0, #1
 800b5e6:	d03a      	beq.n	800b65e <_malloc_r+0xea>
 800b5e8:	6823      	ldr	r3, [r4, #0]
 800b5ea:	442b      	add	r3, r5
 800b5ec:	6023      	str	r3, [r4, #0]
 800b5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f2:	685a      	ldr	r2, [r3, #4]
 800b5f4:	bb62      	cbnz	r2, 800b650 <_malloc_r+0xdc>
 800b5f6:	f8c8 7000 	str.w	r7, [r8]
 800b5fa:	e00f      	b.n	800b61c <_malloc_r+0xa8>
 800b5fc:	6822      	ldr	r2, [r4, #0]
 800b5fe:	1b52      	subs	r2, r2, r5
 800b600:	d420      	bmi.n	800b644 <_malloc_r+0xd0>
 800b602:	2a0b      	cmp	r2, #11
 800b604:	d917      	bls.n	800b636 <_malloc_r+0xc2>
 800b606:	1961      	adds	r1, r4, r5
 800b608:	42a3      	cmp	r3, r4
 800b60a:	6025      	str	r5, [r4, #0]
 800b60c:	bf18      	it	ne
 800b60e:	6059      	strne	r1, [r3, #4]
 800b610:	6863      	ldr	r3, [r4, #4]
 800b612:	bf08      	it	eq
 800b614:	f8c8 1000 	streq.w	r1, [r8]
 800b618:	5162      	str	r2, [r4, r5]
 800b61a:	604b      	str	r3, [r1, #4]
 800b61c:	4630      	mov	r0, r6
 800b61e:	f000 f82f 	bl	800b680 <__malloc_unlock>
 800b622:	f104 000b 	add.w	r0, r4, #11
 800b626:	1d23      	adds	r3, r4, #4
 800b628:	f020 0007 	bic.w	r0, r0, #7
 800b62c:	1ac2      	subs	r2, r0, r3
 800b62e:	bf1c      	itt	ne
 800b630:	1a1b      	subne	r3, r3, r0
 800b632:	50a3      	strne	r3, [r4, r2]
 800b634:	e7af      	b.n	800b596 <_malloc_r+0x22>
 800b636:	6862      	ldr	r2, [r4, #4]
 800b638:	42a3      	cmp	r3, r4
 800b63a:	bf0c      	ite	eq
 800b63c:	f8c8 2000 	streq.w	r2, [r8]
 800b640:	605a      	strne	r2, [r3, #4]
 800b642:	e7eb      	b.n	800b61c <_malloc_r+0xa8>
 800b644:	4623      	mov	r3, r4
 800b646:	6864      	ldr	r4, [r4, #4]
 800b648:	e7ae      	b.n	800b5a8 <_malloc_r+0x34>
 800b64a:	463c      	mov	r4, r7
 800b64c:	687f      	ldr	r7, [r7, #4]
 800b64e:	e7b6      	b.n	800b5be <_malloc_r+0x4a>
 800b650:	461a      	mov	r2, r3
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	42a3      	cmp	r3, r4
 800b656:	d1fb      	bne.n	800b650 <_malloc_r+0xdc>
 800b658:	2300      	movs	r3, #0
 800b65a:	6053      	str	r3, [r2, #4]
 800b65c:	e7de      	b.n	800b61c <_malloc_r+0xa8>
 800b65e:	230c      	movs	r3, #12
 800b660:	6033      	str	r3, [r6, #0]
 800b662:	4630      	mov	r0, r6
 800b664:	f000 f80c 	bl	800b680 <__malloc_unlock>
 800b668:	e794      	b.n	800b594 <_malloc_r+0x20>
 800b66a:	6005      	str	r5, [r0, #0]
 800b66c:	e7d6      	b.n	800b61c <_malloc_r+0xa8>
 800b66e:	bf00      	nop
 800b670:	2400095c 	.word	0x2400095c

0800b674 <__malloc_lock>:
 800b674:	4801      	ldr	r0, [pc, #4]	@ (800b67c <__malloc_lock+0x8>)
 800b676:	f7ff bf0f 	b.w	800b498 <__retarget_lock_acquire_recursive>
 800b67a:	bf00      	nop
 800b67c:	24000954 	.word	0x24000954

0800b680 <__malloc_unlock>:
 800b680:	4801      	ldr	r0, [pc, #4]	@ (800b688 <__malloc_unlock+0x8>)
 800b682:	f7ff bf0a 	b.w	800b49a <__retarget_lock_release_recursive>
 800b686:	bf00      	nop
 800b688:	24000954 	.word	0x24000954

0800b68c <__ssputs_r>:
 800b68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b690:	688e      	ldr	r6, [r1, #8]
 800b692:	461f      	mov	r7, r3
 800b694:	42be      	cmp	r6, r7
 800b696:	680b      	ldr	r3, [r1, #0]
 800b698:	4682      	mov	sl, r0
 800b69a:	460c      	mov	r4, r1
 800b69c:	4690      	mov	r8, r2
 800b69e:	d82d      	bhi.n	800b6fc <__ssputs_r+0x70>
 800b6a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b6a8:	d026      	beq.n	800b6f8 <__ssputs_r+0x6c>
 800b6aa:	6965      	ldr	r5, [r4, #20]
 800b6ac:	6909      	ldr	r1, [r1, #16]
 800b6ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6b2:	eba3 0901 	sub.w	r9, r3, r1
 800b6b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6ba:	1c7b      	adds	r3, r7, #1
 800b6bc:	444b      	add	r3, r9
 800b6be:	106d      	asrs	r5, r5, #1
 800b6c0:	429d      	cmp	r5, r3
 800b6c2:	bf38      	it	cc
 800b6c4:	461d      	movcc	r5, r3
 800b6c6:	0553      	lsls	r3, r2, #21
 800b6c8:	d527      	bpl.n	800b71a <__ssputs_r+0x8e>
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7ff ff52 	bl	800b574 <_malloc_r>
 800b6d0:	4606      	mov	r6, r0
 800b6d2:	b360      	cbz	r0, 800b72e <__ssputs_r+0xa2>
 800b6d4:	6921      	ldr	r1, [r4, #16]
 800b6d6:	464a      	mov	r2, r9
 800b6d8:	f000 fae8 	bl	800bcac <memcpy>
 800b6dc:	89a3      	ldrh	r3, [r4, #12]
 800b6de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b6e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6e6:	81a3      	strh	r3, [r4, #12]
 800b6e8:	6126      	str	r6, [r4, #16]
 800b6ea:	6165      	str	r5, [r4, #20]
 800b6ec:	444e      	add	r6, r9
 800b6ee:	eba5 0509 	sub.w	r5, r5, r9
 800b6f2:	6026      	str	r6, [r4, #0]
 800b6f4:	60a5      	str	r5, [r4, #8]
 800b6f6:	463e      	mov	r6, r7
 800b6f8:	42be      	cmp	r6, r7
 800b6fa:	d900      	bls.n	800b6fe <__ssputs_r+0x72>
 800b6fc:	463e      	mov	r6, r7
 800b6fe:	6820      	ldr	r0, [r4, #0]
 800b700:	4632      	mov	r2, r6
 800b702:	4641      	mov	r1, r8
 800b704:	f000 faa8 	bl	800bc58 <memmove>
 800b708:	68a3      	ldr	r3, [r4, #8]
 800b70a:	1b9b      	subs	r3, r3, r6
 800b70c:	60a3      	str	r3, [r4, #8]
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	4433      	add	r3, r6
 800b712:	6023      	str	r3, [r4, #0]
 800b714:	2000      	movs	r0, #0
 800b716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b71a:	462a      	mov	r2, r5
 800b71c:	f000 fad4 	bl	800bcc8 <_realloc_r>
 800b720:	4606      	mov	r6, r0
 800b722:	2800      	cmp	r0, #0
 800b724:	d1e0      	bne.n	800b6e8 <__ssputs_r+0x5c>
 800b726:	6921      	ldr	r1, [r4, #16]
 800b728:	4650      	mov	r0, sl
 800b72a:	f7ff feb7 	bl	800b49c <_free_r>
 800b72e:	230c      	movs	r3, #12
 800b730:	f8ca 3000 	str.w	r3, [sl]
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73a:	81a3      	strh	r3, [r4, #12]
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295
 800b740:	e7e9      	b.n	800b716 <__ssputs_r+0x8a>
	...

0800b744 <_svfiprintf_r>:
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	4698      	mov	r8, r3
 800b74a:	898b      	ldrh	r3, [r1, #12]
 800b74c:	061b      	lsls	r3, r3, #24
 800b74e:	b09d      	sub	sp, #116	@ 0x74
 800b750:	4607      	mov	r7, r0
 800b752:	460d      	mov	r5, r1
 800b754:	4614      	mov	r4, r2
 800b756:	d510      	bpl.n	800b77a <_svfiprintf_r+0x36>
 800b758:	690b      	ldr	r3, [r1, #16]
 800b75a:	b973      	cbnz	r3, 800b77a <_svfiprintf_r+0x36>
 800b75c:	2140      	movs	r1, #64	@ 0x40
 800b75e:	f7ff ff09 	bl	800b574 <_malloc_r>
 800b762:	6028      	str	r0, [r5, #0]
 800b764:	6128      	str	r0, [r5, #16]
 800b766:	b930      	cbnz	r0, 800b776 <_svfiprintf_r+0x32>
 800b768:	230c      	movs	r3, #12
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	b01d      	add	sp, #116	@ 0x74
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b776:	2340      	movs	r3, #64	@ 0x40
 800b778:	616b      	str	r3, [r5, #20]
 800b77a:	2300      	movs	r3, #0
 800b77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b77e:	2320      	movs	r3, #32
 800b780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b784:	f8cd 800c 	str.w	r8, [sp, #12]
 800b788:	2330      	movs	r3, #48	@ 0x30
 800b78a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b928 <_svfiprintf_r+0x1e4>
 800b78e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b792:	f04f 0901 	mov.w	r9, #1
 800b796:	4623      	mov	r3, r4
 800b798:	469a      	mov	sl, r3
 800b79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b79e:	b10a      	cbz	r2, 800b7a4 <_svfiprintf_r+0x60>
 800b7a0:	2a25      	cmp	r2, #37	@ 0x25
 800b7a2:	d1f9      	bne.n	800b798 <_svfiprintf_r+0x54>
 800b7a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b7a8:	d00b      	beq.n	800b7c2 <_svfiprintf_r+0x7e>
 800b7aa:	465b      	mov	r3, fp
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f7ff ff6b 	bl	800b68c <__ssputs_r>
 800b7b6:	3001      	adds	r0, #1
 800b7b8:	f000 80a7 	beq.w	800b90a <_svfiprintf_r+0x1c6>
 800b7bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7be:	445a      	add	r2, fp
 800b7c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 809f 	beq.w	800b90a <_svfiprintf_r+0x1c6>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b7d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d6:	f10a 0a01 	add.w	sl, sl, #1
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	9307      	str	r3, [sp, #28]
 800b7de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7e4:	4654      	mov	r4, sl
 800b7e6:	2205      	movs	r2, #5
 800b7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ec:	484e      	ldr	r0, [pc, #312]	@ (800b928 <_svfiprintf_r+0x1e4>)
 800b7ee:	f7f4 fd7f 	bl	80002f0 <memchr>
 800b7f2:	9a04      	ldr	r2, [sp, #16]
 800b7f4:	b9d8      	cbnz	r0, 800b82e <_svfiprintf_r+0xea>
 800b7f6:	06d0      	lsls	r0, r2, #27
 800b7f8:	bf44      	itt	mi
 800b7fa:	2320      	movmi	r3, #32
 800b7fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b800:	0711      	lsls	r1, r2, #28
 800b802:	bf44      	itt	mi
 800b804:	232b      	movmi	r3, #43	@ 0x2b
 800b806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b80a:	f89a 3000 	ldrb.w	r3, [sl]
 800b80e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b810:	d015      	beq.n	800b83e <_svfiprintf_r+0xfa>
 800b812:	9a07      	ldr	r2, [sp, #28]
 800b814:	4654      	mov	r4, sl
 800b816:	2000      	movs	r0, #0
 800b818:	f04f 0c0a 	mov.w	ip, #10
 800b81c:	4621      	mov	r1, r4
 800b81e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b822:	3b30      	subs	r3, #48	@ 0x30
 800b824:	2b09      	cmp	r3, #9
 800b826:	d94b      	bls.n	800b8c0 <_svfiprintf_r+0x17c>
 800b828:	b1b0      	cbz	r0, 800b858 <_svfiprintf_r+0x114>
 800b82a:	9207      	str	r2, [sp, #28]
 800b82c:	e014      	b.n	800b858 <_svfiprintf_r+0x114>
 800b82e:	eba0 0308 	sub.w	r3, r0, r8
 800b832:	fa09 f303 	lsl.w	r3, r9, r3
 800b836:	4313      	orrs	r3, r2
 800b838:	9304      	str	r3, [sp, #16]
 800b83a:	46a2      	mov	sl, r4
 800b83c:	e7d2      	b.n	800b7e4 <_svfiprintf_r+0xa0>
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	1d19      	adds	r1, r3, #4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	9103      	str	r1, [sp, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	bfbb      	ittet	lt
 800b84a:	425b      	neglt	r3, r3
 800b84c:	f042 0202 	orrlt.w	r2, r2, #2
 800b850:	9307      	strge	r3, [sp, #28]
 800b852:	9307      	strlt	r3, [sp, #28]
 800b854:	bfb8      	it	lt
 800b856:	9204      	strlt	r2, [sp, #16]
 800b858:	7823      	ldrb	r3, [r4, #0]
 800b85a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b85c:	d10a      	bne.n	800b874 <_svfiprintf_r+0x130>
 800b85e:	7863      	ldrb	r3, [r4, #1]
 800b860:	2b2a      	cmp	r3, #42	@ 0x2a
 800b862:	d132      	bne.n	800b8ca <_svfiprintf_r+0x186>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	1d1a      	adds	r2, r3, #4
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	9203      	str	r2, [sp, #12]
 800b86c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b870:	3402      	adds	r4, #2
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b938 <_svfiprintf_r+0x1f4>
 800b878:	7821      	ldrb	r1, [r4, #0]
 800b87a:	2203      	movs	r2, #3
 800b87c:	4650      	mov	r0, sl
 800b87e:	f7f4 fd37 	bl	80002f0 <memchr>
 800b882:	b138      	cbz	r0, 800b894 <_svfiprintf_r+0x150>
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	eba0 000a 	sub.w	r0, r0, sl
 800b88a:	2240      	movs	r2, #64	@ 0x40
 800b88c:	4082      	lsls	r2, r0
 800b88e:	4313      	orrs	r3, r2
 800b890:	3401      	adds	r4, #1
 800b892:	9304      	str	r3, [sp, #16]
 800b894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b898:	4824      	ldr	r0, [pc, #144]	@ (800b92c <_svfiprintf_r+0x1e8>)
 800b89a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b89e:	2206      	movs	r2, #6
 800b8a0:	f7f4 fd26 	bl	80002f0 <memchr>
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	d036      	beq.n	800b916 <_svfiprintf_r+0x1d2>
 800b8a8:	4b21      	ldr	r3, [pc, #132]	@ (800b930 <_svfiprintf_r+0x1ec>)
 800b8aa:	bb1b      	cbnz	r3, 800b8f4 <_svfiprintf_r+0x1b0>
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	3307      	adds	r3, #7
 800b8b0:	f023 0307 	bic.w	r3, r3, #7
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	9303      	str	r3, [sp, #12]
 800b8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ba:	4433      	add	r3, r6
 800b8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8be:	e76a      	b.n	800b796 <_svfiprintf_r+0x52>
 800b8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c4:	460c      	mov	r4, r1
 800b8c6:	2001      	movs	r0, #1
 800b8c8:	e7a8      	b.n	800b81c <_svfiprintf_r+0xd8>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	3401      	adds	r4, #1
 800b8ce:	9305      	str	r3, [sp, #20]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	f04f 0c0a 	mov.w	ip, #10
 800b8d6:	4620      	mov	r0, r4
 800b8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8dc:	3a30      	subs	r2, #48	@ 0x30
 800b8de:	2a09      	cmp	r2, #9
 800b8e0:	d903      	bls.n	800b8ea <_svfiprintf_r+0x1a6>
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d0c6      	beq.n	800b874 <_svfiprintf_r+0x130>
 800b8e6:	9105      	str	r1, [sp, #20]
 800b8e8:	e7c4      	b.n	800b874 <_svfiprintf_r+0x130>
 800b8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e7f0      	b.n	800b8d6 <_svfiprintf_r+0x192>
 800b8f4:	ab03      	add	r3, sp, #12
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b934 <_svfiprintf_r+0x1f0>)
 800b8fc:	a904      	add	r1, sp, #16
 800b8fe:	4638      	mov	r0, r7
 800b900:	f3af 8000 	nop.w
 800b904:	1c42      	adds	r2, r0, #1
 800b906:	4606      	mov	r6, r0
 800b908:	d1d6      	bne.n	800b8b8 <_svfiprintf_r+0x174>
 800b90a:	89ab      	ldrh	r3, [r5, #12]
 800b90c:	065b      	lsls	r3, r3, #25
 800b90e:	f53f af2d 	bmi.w	800b76c <_svfiprintf_r+0x28>
 800b912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b914:	e72c      	b.n	800b770 <_svfiprintf_r+0x2c>
 800b916:	ab03      	add	r3, sp, #12
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	462a      	mov	r2, r5
 800b91c:	4b05      	ldr	r3, [pc, #20]	@ (800b934 <_svfiprintf_r+0x1f0>)
 800b91e:	a904      	add	r1, sp, #16
 800b920:	4638      	mov	r0, r7
 800b922:	f000 f879 	bl	800ba18 <_printf_i>
 800b926:	e7ed      	b.n	800b904 <_svfiprintf_r+0x1c0>
 800b928:	0800bf7d 	.word	0x0800bf7d
 800b92c:	0800bf87 	.word	0x0800bf87
 800b930:	00000000 	.word	0x00000000
 800b934:	0800b68d 	.word	0x0800b68d
 800b938:	0800bf83 	.word	0x0800bf83

0800b93c <_printf_common>:
 800b93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b940:	4616      	mov	r6, r2
 800b942:	4698      	mov	r8, r3
 800b944:	688a      	ldr	r2, [r1, #8]
 800b946:	690b      	ldr	r3, [r1, #16]
 800b948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b94c:	4293      	cmp	r3, r2
 800b94e:	bfb8      	it	lt
 800b950:	4613      	movlt	r3, r2
 800b952:	6033      	str	r3, [r6, #0]
 800b954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b958:	4607      	mov	r7, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	b10a      	cbz	r2, 800b962 <_printf_common+0x26>
 800b95e:	3301      	adds	r3, #1
 800b960:	6033      	str	r3, [r6, #0]
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	0699      	lsls	r1, r3, #26
 800b966:	bf42      	ittt	mi
 800b968:	6833      	ldrmi	r3, [r6, #0]
 800b96a:	3302      	addmi	r3, #2
 800b96c:	6033      	strmi	r3, [r6, #0]
 800b96e:	6825      	ldr	r5, [r4, #0]
 800b970:	f015 0506 	ands.w	r5, r5, #6
 800b974:	d106      	bne.n	800b984 <_printf_common+0x48>
 800b976:	f104 0a19 	add.w	sl, r4, #25
 800b97a:	68e3      	ldr	r3, [r4, #12]
 800b97c:	6832      	ldr	r2, [r6, #0]
 800b97e:	1a9b      	subs	r3, r3, r2
 800b980:	42ab      	cmp	r3, r5
 800b982:	dc26      	bgt.n	800b9d2 <_printf_common+0x96>
 800b984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b988:	6822      	ldr	r2, [r4, #0]
 800b98a:	3b00      	subs	r3, #0
 800b98c:	bf18      	it	ne
 800b98e:	2301      	movne	r3, #1
 800b990:	0692      	lsls	r2, r2, #26
 800b992:	d42b      	bmi.n	800b9ec <_printf_common+0xb0>
 800b994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b998:	4641      	mov	r1, r8
 800b99a:	4638      	mov	r0, r7
 800b99c:	47c8      	blx	r9
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d01e      	beq.n	800b9e0 <_printf_common+0xa4>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	6922      	ldr	r2, [r4, #16]
 800b9a6:	f003 0306 	and.w	r3, r3, #6
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	bf02      	ittt	eq
 800b9ae:	68e5      	ldreq	r5, [r4, #12]
 800b9b0:	6833      	ldreq	r3, [r6, #0]
 800b9b2:	1aed      	subeq	r5, r5, r3
 800b9b4:	68a3      	ldr	r3, [r4, #8]
 800b9b6:	bf0c      	ite	eq
 800b9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9bc:	2500      	movne	r5, #0
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	bfc4      	itt	gt
 800b9c2:	1a9b      	subgt	r3, r3, r2
 800b9c4:	18ed      	addgt	r5, r5, r3
 800b9c6:	2600      	movs	r6, #0
 800b9c8:	341a      	adds	r4, #26
 800b9ca:	42b5      	cmp	r5, r6
 800b9cc:	d11a      	bne.n	800ba04 <_printf_common+0xc8>
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	e008      	b.n	800b9e4 <_printf_common+0xa8>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	4641      	mov	r1, r8
 800b9d8:	4638      	mov	r0, r7
 800b9da:	47c8      	blx	r9
 800b9dc:	3001      	adds	r0, #1
 800b9de:	d103      	bne.n	800b9e8 <_printf_common+0xac>
 800b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9e8:	3501      	adds	r5, #1
 800b9ea:	e7c6      	b.n	800b97a <_printf_common+0x3e>
 800b9ec:	18e1      	adds	r1, r4, r3
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	2030      	movs	r0, #48	@ 0x30
 800b9f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9f6:	4422      	add	r2, r4
 800b9f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba00:	3302      	adds	r3, #2
 800ba02:	e7c7      	b.n	800b994 <_printf_common+0x58>
 800ba04:	2301      	movs	r3, #1
 800ba06:	4622      	mov	r2, r4
 800ba08:	4641      	mov	r1, r8
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	47c8      	blx	r9
 800ba0e:	3001      	adds	r0, #1
 800ba10:	d0e6      	beq.n	800b9e0 <_printf_common+0xa4>
 800ba12:	3601      	adds	r6, #1
 800ba14:	e7d9      	b.n	800b9ca <_printf_common+0x8e>
	...

0800ba18 <_printf_i>:
 800ba18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba1c:	7e0f      	ldrb	r7, [r1, #24]
 800ba1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba20:	2f78      	cmp	r7, #120	@ 0x78
 800ba22:	4691      	mov	r9, r2
 800ba24:	4680      	mov	r8, r0
 800ba26:	460c      	mov	r4, r1
 800ba28:	469a      	mov	sl, r3
 800ba2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba2e:	d807      	bhi.n	800ba40 <_printf_i+0x28>
 800ba30:	2f62      	cmp	r7, #98	@ 0x62
 800ba32:	d80a      	bhi.n	800ba4a <_printf_i+0x32>
 800ba34:	2f00      	cmp	r7, #0
 800ba36:	f000 80d2 	beq.w	800bbde <_printf_i+0x1c6>
 800ba3a:	2f58      	cmp	r7, #88	@ 0x58
 800ba3c:	f000 80b9 	beq.w	800bbb2 <_printf_i+0x19a>
 800ba40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba48:	e03a      	b.n	800bac0 <_printf_i+0xa8>
 800ba4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba4e:	2b15      	cmp	r3, #21
 800ba50:	d8f6      	bhi.n	800ba40 <_printf_i+0x28>
 800ba52:	a101      	add	r1, pc, #4	@ (adr r1, 800ba58 <_printf_i+0x40>)
 800ba54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba58:	0800bab1 	.word	0x0800bab1
 800ba5c:	0800bac5 	.word	0x0800bac5
 800ba60:	0800ba41 	.word	0x0800ba41
 800ba64:	0800ba41 	.word	0x0800ba41
 800ba68:	0800ba41 	.word	0x0800ba41
 800ba6c:	0800ba41 	.word	0x0800ba41
 800ba70:	0800bac5 	.word	0x0800bac5
 800ba74:	0800ba41 	.word	0x0800ba41
 800ba78:	0800ba41 	.word	0x0800ba41
 800ba7c:	0800ba41 	.word	0x0800ba41
 800ba80:	0800ba41 	.word	0x0800ba41
 800ba84:	0800bbc5 	.word	0x0800bbc5
 800ba88:	0800baef 	.word	0x0800baef
 800ba8c:	0800bb7f 	.word	0x0800bb7f
 800ba90:	0800ba41 	.word	0x0800ba41
 800ba94:	0800ba41 	.word	0x0800ba41
 800ba98:	0800bbe7 	.word	0x0800bbe7
 800ba9c:	0800ba41 	.word	0x0800ba41
 800baa0:	0800baef 	.word	0x0800baef
 800baa4:	0800ba41 	.word	0x0800ba41
 800baa8:	0800ba41 	.word	0x0800ba41
 800baac:	0800bb87 	.word	0x0800bb87
 800bab0:	6833      	ldr	r3, [r6, #0]
 800bab2:	1d1a      	adds	r2, r3, #4
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6032      	str	r2, [r6, #0]
 800bab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800babc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bac0:	2301      	movs	r3, #1
 800bac2:	e09d      	b.n	800bc00 <_printf_i+0x1e8>
 800bac4:	6833      	ldr	r3, [r6, #0]
 800bac6:	6820      	ldr	r0, [r4, #0]
 800bac8:	1d19      	adds	r1, r3, #4
 800baca:	6031      	str	r1, [r6, #0]
 800bacc:	0606      	lsls	r6, r0, #24
 800bace:	d501      	bpl.n	800bad4 <_printf_i+0xbc>
 800bad0:	681d      	ldr	r5, [r3, #0]
 800bad2:	e003      	b.n	800badc <_printf_i+0xc4>
 800bad4:	0645      	lsls	r5, r0, #25
 800bad6:	d5fb      	bpl.n	800bad0 <_printf_i+0xb8>
 800bad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800badc:	2d00      	cmp	r5, #0
 800bade:	da03      	bge.n	800bae8 <_printf_i+0xd0>
 800bae0:	232d      	movs	r3, #45	@ 0x2d
 800bae2:	426d      	negs	r5, r5
 800bae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bae8:	4859      	ldr	r0, [pc, #356]	@ (800bc50 <_printf_i+0x238>)
 800baea:	230a      	movs	r3, #10
 800baec:	e011      	b.n	800bb12 <_printf_i+0xfa>
 800baee:	6821      	ldr	r1, [r4, #0]
 800baf0:	6833      	ldr	r3, [r6, #0]
 800baf2:	0608      	lsls	r0, r1, #24
 800baf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800baf8:	d402      	bmi.n	800bb00 <_printf_i+0xe8>
 800bafa:	0649      	lsls	r1, r1, #25
 800bafc:	bf48      	it	mi
 800bafe:	b2ad      	uxthmi	r5, r5
 800bb00:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb02:	4853      	ldr	r0, [pc, #332]	@ (800bc50 <_printf_i+0x238>)
 800bb04:	6033      	str	r3, [r6, #0]
 800bb06:	bf14      	ite	ne
 800bb08:	230a      	movne	r3, #10
 800bb0a:	2308      	moveq	r3, #8
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb12:	6866      	ldr	r6, [r4, #4]
 800bb14:	60a6      	str	r6, [r4, #8]
 800bb16:	2e00      	cmp	r6, #0
 800bb18:	bfa2      	ittt	ge
 800bb1a:	6821      	ldrge	r1, [r4, #0]
 800bb1c:	f021 0104 	bicge.w	r1, r1, #4
 800bb20:	6021      	strge	r1, [r4, #0]
 800bb22:	b90d      	cbnz	r5, 800bb28 <_printf_i+0x110>
 800bb24:	2e00      	cmp	r6, #0
 800bb26:	d04b      	beq.n	800bbc0 <_printf_i+0x1a8>
 800bb28:	4616      	mov	r6, r2
 800bb2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb2e:	fb03 5711 	mls	r7, r3, r1, r5
 800bb32:	5dc7      	ldrb	r7, [r0, r7]
 800bb34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb38:	462f      	mov	r7, r5
 800bb3a:	42bb      	cmp	r3, r7
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	d9f4      	bls.n	800bb2a <_printf_i+0x112>
 800bb40:	2b08      	cmp	r3, #8
 800bb42:	d10b      	bne.n	800bb5c <_printf_i+0x144>
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	07df      	lsls	r7, r3, #31
 800bb48:	d508      	bpl.n	800bb5c <_printf_i+0x144>
 800bb4a:	6923      	ldr	r3, [r4, #16]
 800bb4c:	6861      	ldr	r1, [r4, #4]
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	bfde      	ittt	le
 800bb52:	2330      	movle	r3, #48	@ 0x30
 800bb54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb5c:	1b92      	subs	r2, r2, r6
 800bb5e:	6122      	str	r2, [r4, #16]
 800bb60:	f8cd a000 	str.w	sl, [sp]
 800bb64:	464b      	mov	r3, r9
 800bb66:	aa03      	add	r2, sp, #12
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	f7ff fee6 	bl	800b93c <_printf_common>
 800bb70:	3001      	adds	r0, #1
 800bb72:	d14a      	bne.n	800bc0a <_printf_i+0x1f2>
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	b004      	add	sp, #16
 800bb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb7e:	6823      	ldr	r3, [r4, #0]
 800bb80:	f043 0320 	orr.w	r3, r3, #32
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	4833      	ldr	r0, [pc, #204]	@ (800bc54 <_printf_i+0x23c>)
 800bb88:	2778      	movs	r7, #120	@ 0x78
 800bb8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	6831      	ldr	r1, [r6, #0]
 800bb92:	061f      	lsls	r7, r3, #24
 800bb94:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb98:	d402      	bmi.n	800bba0 <_printf_i+0x188>
 800bb9a:	065f      	lsls	r7, r3, #25
 800bb9c:	bf48      	it	mi
 800bb9e:	b2ad      	uxthmi	r5, r5
 800bba0:	6031      	str	r1, [r6, #0]
 800bba2:	07d9      	lsls	r1, r3, #31
 800bba4:	bf44      	itt	mi
 800bba6:	f043 0320 	orrmi.w	r3, r3, #32
 800bbaa:	6023      	strmi	r3, [r4, #0]
 800bbac:	b11d      	cbz	r5, 800bbb6 <_printf_i+0x19e>
 800bbae:	2310      	movs	r3, #16
 800bbb0:	e7ac      	b.n	800bb0c <_printf_i+0xf4>
 800bbb2:	4827      	ldr	r0, [pc, #156]	@ (800bc50 <_printf_i+0x238>)
 800bbb4:	e7e9      	b.n	800bb8a <_printf_i+0x172>
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	f023 0320 	bic.w	r3, r3, #32
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	e7f6      	b.n	800bbae <_printf_i+0x196>
 800bbc0:	4616      	mov	r6, r2
 800bbc2:	e7bd      	b.n	800bb40 <_printf_i+0x128>
 800bbc4:	6833      	ldr	r3, [r6, #0]
 800bbc6:	6825      	ldr	r5, [r4, #0]
 800bbc8:	6961      	ldr	r1, [r4, #20]
 800bbca:	1d18      	adds	r0, r3, #4
 800bbcc:	6030      	str	r0, [r6, #0]
 800bbce:	062e      	lsls	r6, r5, #24
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	d501      	bpl.n	800bbd8 <_printf_i+0x1c0>
 800bbd4:	6019      	str	r1, [r3, #0]
 800bbd6:	e002      	b.n	800bbde <_printf_i+0x1c6>
 800bbd8:	0668      	lsls	r0, r5, #25
 800bbda:	d5fb      	bpl.n	800bbd4 <_printf_i+0x1bc>
 800bbdc:	8019      	strh	r1, [r3, #0]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	6123      	str	r3, [r4, #16]
 800bbe2:	4616      	mov	r6, r2
 800bbe4:	e7bc      	b.n	800bb60 <_printf_i+0x148>
 800bbe6:	6833      	ldr	r3, [r6, #0]
 800bbe8:	1d1a      	adds	r2, r3, #4
 800bbea:	6032      	str	r2, [r6, #0]
 800bbec:	681e      	ldr	r6, [r3, #0]
 800bbee:	6862      	ldr	r2, [r4, #4]
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	f7f4 fb7c 	bl	80002f0 <memchr>
 800bbf8:	b108      	cbz	r0, 800bbfe <_printf_i+0x1e6>
 800bbfa:	1b80      	subs	r0, r0, r6
 800bbfc:	6060      	str	r0, [r4, #4]
 800bbfe:	6863      	ldr	r3, [r4, #4]
 800bc00:	6123      	str	r3, [r4, #16]
 800bc02:	2300      	movs	r3, #0
 800bc04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc08:	e7aa      	b.n	800bb60 <_printf_i+0x148>
 800bc0a:	6923      	ldr	r3, [r4, #16]
 800bc0c:	4632      	mov	r2, r6
 800bc0e:	4649      	mov	r1, r9
 800bc10:	4640      	mov	r0, r8
 800bc12:	47d0      	blx	sl
 800bc14:	3001      	adds	r0, #1
 800bc16:	d0ad      	beq.n	800bb74 <_printf_i+0x15c>
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	079b      	lsls	r3, r3, #30
 800bc1c:	d413      	bmi.n	800bc46 <_printf_i+0x22e>
 800bc1e:	68e0      	ldr	r0, [r4, #12]
 800bc20:	9b03      	ldr	r3, [sp, #12]
 800bc22:	4298      	cmp	r0, r3
 800bc24:	bfb8      	it	lt
 800bc26:	4618      	movlt	r0, r3
 800bc28:	e7a6      	b.n	800bb78 <_printf_i+0x160>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	4632      	mov	r2, r6
 800bc2e:	4649      	mov	r1, r9
 800bc30:	4640      	mov	r0, r8
 800bc32:	47d0      	blx	sl
 800bc34:	3001      	adds	r0, #1
 800bc36:	d09d      	beq.n	800bb74 <_printf_i+0x15c>
 800bc38:	3501      	adds	r5, #1
 800bc3a:	68e3      	ldr	r3, [r4, #12]
 800bc3c:	9903      	ldr	r1, [sp, #12]
 800bc3e:	1a5b      	subs	r3, r3, r1
 800bc40:	42ab      	cmp	r3, r5
 800bc42:	dcf2      	bgt.n	800bc2a <_printf_i+0x212>
 800bc44:	e7eb      	b.n	800bc1e <_printf_i+0x206>
 800bc46:	2500      	movs	r5, #0
 800bc48:	f104 0619 	add.w	r6, r4, #25
 800bc4c:	e7f5      	b.n	800bc3a <_printf_i+0x222>
 800bc4e:	bf00      	nop
 800bc50:	0800bf8e 	.word	0x0800bf8e
 800bc54:	0800bf9f 	.word	0x0800bf9f

0800bc58 <memmove>:
 800bc58:	4288      	cmp	r0, r1
 800bc5a:	b510      	push	{r4, lr}
 800bc5c:	eb01 0402 	add.w	r4, r1, r2
 800bc60:	d902      	bls.n	800bc68 <memmove+0x10>
 800bc62:	4284      	cmp	r4, r0
 800bc64:	4623      	mov	r3, r4
 800bc66:	d807      	bhi.n	800bc78 <memmove+0x20>
 800bc68:	1e43      	subs	r3, r0, #1
 800bc6a:	42a1      	cmp	r1, r4
 800bc6c:	d008      	beq.n	800bc80 <memmove+0x28>
 800bc6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc76:	e7f8      	b.n	800bc6a <memmove+0x12>
 800bc78:	4402      	add	r2, r0
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	428a      	cmp	r2, r1
 800bc7e:	d100      	bne.n	800bc82 <memmove+0x2a>
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc8a:	e7f7      	b.n	800bc7c <memmove+0x24>

0800bc8c <_sbrk_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4d06      	ldr	r5, [pc, #24]	@ (800bca8 <_sbrk_r+0x1c>)
 800bc90:	2300      	movs	r3, #0
 800bc92:	4604      	mov	r4, r0
 800bc94:	4608      	mov	r0, r1
 800bc96:	602b      	str	r3, [r5, #0]
 800bc98:	f7f5 fc36 	bl	8001508 <_sbrk>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_sbrk_r+0x1a>
 800bca0:	682b      	ldr	r3, [r5, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_sbrk_r+0x1a>
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	24000950 	.word	0x24000950

0800bcac <memcpy>:
 800bcac:	440a      	add	r2, r1
 800bcae:	4291      	cmp	r1, r2
 800bcb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcb4:	d100      	bne.n	800bcb8 <memcpy+0xc>
 800bcb6:	4770      	bx	lr
 800bcb8:	b510      	push	{r4, lr}
 800bcba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc2:	4291      	cmp	r1, r2
 800bcc4:	d1f9      	bne.n	800bcba <memcpy+0xe>
 800bcc6:	bd10      	pop	{r4, pc}

0800bcc8 <_realloc_r>:
 800bcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bccc:	4680      	mov	r8, r0
 800bcce:	4615      	mov	r5, r2
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	b921      	cbnz	r1, 800bcde <_realloc_r+0x16>
 800bcd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd8:	4611      	mov	r1, r2
 800bcda:	f7ff bc4b 	b.w	800b574 <_malloc_r>
 800bcde:	b92a      	cbnz	r2, 800bcec <_realloc_r+0x24>
 800bce0:	f7ff fbdc 	bl	800b49c <_free_r>
 800bce4:	2400      	movs	r4, #0
 800bce6:	4620      	mov	r0, r4
 800bce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcec:	f000 f81a 	bl	800bd24 <_malloc_usable_size_r>
 800bcf0:	4285      	cmp	r5, r0
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	d802      	bhi.n	800bcfc <_realloc_r+0x34>
 800bcf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bcfa:	d8f4      	bhi.n	800bce6 <_realloc_r+0x1e>
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4640      	mov	r0, r8
 800bd00:	f7ff fc38 	bl	800b574 <_malloc_r>
 800bd04:	4607      	mov	r7, r0
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d0ec      	beq.n	800bce4 <_realloc_r+0x1c>
 800bd0a:	42b5      	cmp	r5, r6
 800bd0c:	462a      	mov	r2, r5
 800bd0e:	4621      	mov	r1, r4
 800bd10:	bf28      	it	cs
 800bd12:	4632      	movcs	r2, r6
 800bd14:	f7ff ffca 	bl	800bcac <memcpy>
 800bd18:	4621      	mov	r1, r4
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	f7ff fbbe 	bl	800b49c <_free_r>
 800bd20:	463c      	mov	r4, r7
 800bd22:	e7e0      	b.n	800bce6 <_realloc_r+0x1e>

0800bd24 <_malloc_usable_size_r>:
 800bd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd28:	1f18      	subs	r0, r3, #4
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	bfbc      	itt	lt
 800bd2e:	580b      	ldrlt	r3, [r1, r0]
 800bd30:	18c0      	addlt	r0, r0, r3
 800bd32:	4770      	bx	lr

0800bd34 <_init>:
 800bd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd36:	bf00      	nop
 800bd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3a:	bc08      	pop	{r3}
 800bd3c:	469e      	mov	lr, r3
 800bd3e:	4770      	bx	lr

0800bd40 <_fini>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	bf00      	nop
 800bd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd46:	bc08      	pop	{r3}
 800bd48:	469e      	mov	lr, r3
 800bd4a:	4770      	bx	lr
