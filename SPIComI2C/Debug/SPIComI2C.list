
SPIComI2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af10  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  0800b1b0  0800b1b0  0000c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b3cc  0800b3cc  0000c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b3d4  0800b3d4  0000c3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b3d8  0800b3d8  0000c3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800b3dc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007e0  24000060  0800b43c  0000d060  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000840  0800b43c  0000d840  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a6f8  00000000  00000000  0000d08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003141  00000000  00000000  00027786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  0002a8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eea  00000000  00000000  0002bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00003bbe  00000000  00000000  0002cada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c969  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001601bf  00000000  00000000  0004d001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ad1c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000581c  00000000  00000000  001ad204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  001b2a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b198 	.word	0x0800b198

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	0800b198 	.word	0x0800b198

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MAX7219_SendData.2>:
  MX_USB_OTG_FS_PCD_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  	  	  void MAX7219_SendData(uint8_t reg, uint8_t data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
 8000690:	f8c7 c000 	str.w	ip, [r7]
  	  	  uint8_t txData[2] = {reg, data};
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	733b      	strb	r3, [r7, #12]
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	737b      	strb	r3, [r7, #13]
  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); // Pull CS low
 800069c:	2200      	movs	r2, #0
 800069e:	2140      	movs	r1, #64	@ 0x40
 80006a0:	480d      	ldr	r0, [pc, #52]	@ (80006d8 <MAX7219_SendData.2+0x58>)
 80006a2:	f001 fe7f 	bl	80023a4 <HAL_GPIO_WritePin>
  	  	  HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f001 f938 	bl	800191c <HAL_Delay>
  	  	  HAL_SPI_Transmit_IT(&hspi1, txData, 2); // Transmit register and data
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2202      	movs	r2, #2
 80006b2:	4619      	mov	r1, r3
 80006b4:	4809      	ldr	r0, [pc, #36]	@ (80006dc <MAX7219_SendData.2+0x5c>)
 80006b6:	f006 ff5f 	bl	8007578 <HAL_SPI_Transmit_IT>
  	  	  HAL_Delay(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f001 f92e 	bl	800191c <HAL_Delay>
  	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); // Pull CS high
 80006c0:	2201      	movs	r2, #1
 80006c2:	2140      	movs	r1, #64	@ 0x40
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MAX7219_SendData.2+0x58>)
 80006c6:	f001 fe6d 	bl	80023a4 <HAL_GPIO_WritePin>
  	  	  HAL_Delay(10);
 80006ca:	200a      	movs	r0, #10
 80006cc:	f001 f926 	bl	800191c <HAL_Delay>
  	  	  }
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58020000 	.word	0x58020000
 80006dc:	240000d0 	.word	0x240000d0

080006e0 <main>:
{
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
int main(void)
 80006e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_Init();
 80006ec:	f001 f884 	bl	80017f8 <HAL_Init>
  SystemClock_Config();
 80006f0:	f000 f994 	bl	8000a1c <SystemClock_Config>
  MX_GPIO_Init();
 80006f4:	f000 fb28 	bl	8000d48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006f8:	f000 faa8 	bl	8000c4c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006fc:	f000 faf2 	bl	8000ce4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000700:	f000 fa0c 	bl	8000b1c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000704:	f000 fa4a 	bl	8000b9c <MX_SPI1_Init>
  	  			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, GPIO_PIN_RESET);
  	  			HAL_Delay(10);
  	  		}
  	  	}

  	  	MAX72_Init_F();
 8000708:	f107 0318 	add.w	r3, r7, #24
 800070c:	469c      	mov	ip, r3
 800070e:	f000 f93d 	bl	800098c <MAX72_Init_F.0>



  	  char welcomeMsg[] = "Digite um comando:\r\n";
 8000712:	4b7a      	ldr	r3, [pc, #488]	@ (80008fc <main+0x21c>)
 8000714:	463c      	mov	r4, r7
 8000716:	461d      	mov	r5, r3
 8000718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000720:	6020      	str	r0, [r4, #0]
 8000722:	3404      	adds	r4, #4
 8000724:	7021      	strb	r1, [r4, #0]
  	  HAL_UART_Transmit_IT(&huart3, (uint8_t *)welcomeMsg, strlen(welcomeMsg));
 8000726:	463b      	mov	r3, r7
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fdd9 	bl	80002e0 <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4872      	ldr	r0, [pc, #456]	@ (8000900 <main+0x220>)
 8000738:	f007 fb76 	bl	8007e28 <HAL_UART_Transmit_IT>
  	  //Receive_IT inicial para permitir que a placa receba um
  	  HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 800073c:	220c      	movs	r2, #12
 800073e:	4971      	ldr	r1, [pc, #452]	@ (8000904 <main+0x224>)
 8000740:	486f      	ldr	r0, [pc, #444]	@ (8000900 <main+0x220>)
 8000742:	f007 fc05 	bl	8007f50 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_Delay(100);
 8000746:	2064      	movs	r0, #100	@ 0x64
 8000748:	f001 f8e8 	bl	800191c <HAL_Delay>
	  	  strncpy(stringBuffer, rxBuffer, 12);
 800074c:	220c      	movs	r2, #12
 800074e:	496d      	ldr	r1, [pc, #436]	@ (8000904 <main+0x224>)
 8000750:	486d      	ldr	r0, [pc, #436]	@ (8000908 <main+0x228>)
 8000752:	f00a f895 	bl	800a880 <strncpy>


	  	  //Func para checar o valor no sensor de canal 0
	  	  if(strncmp(stringBuffer,"Read_AIN0",9) == 0){
 8000756:	2209      	movs	r2, #9
 8000758:	496c      	ldr	r1, [pc, #432]	@ (800090c <main+0x22c>)
 800075a:	486b      	ldr	r0, [pc, #428]	@ (8000908 <main+0x228>)
 800075c:	f00a f87e 	bl	800a85c <strncmp>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d109      	bne.n	800077a <main+0x9a>
	  		  LDR = PCF8591_ReadAnalog(0);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 fc14 	bl	8000f94 <PCF8591_ReadAnalog>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b67      	ldr	r3, [pc, #412]	@ (8000910 <main+0x230>)
 8000772:	701a      	strb	r2, [r3, #0]
	  		  HAL_Delay(100);
 8000774:	2064      	movs	r0, #100	@ 0x64
 8000776:	f001 f8d1 	bl	800191c <HAL_Delay>

	  	  }

	  	//Func para pegar o valor de voltagem e exibir qual o simbolo represent esse valor e se é maior ou menor que 128
	  	  if(strncmp(stringBuffer,"LDR",3) == 0){
 800077a:	2203      	movs	r2, #3
 800077c:	4965      	ldr	r1, [pc, #404]	@ (8000914 <main+0x234>)
 800077e:	4862      	ldr	r0, [pc, #392]	@ (8000908 <main+0x228>)
 8000780:	f00a f86c 	bl	800a85c <strncmp>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d123      	bne.n	80007d2 <main+0xf2>
	  		DisplayCharacter(' ' +2);
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	469c      	mov	ip, r3
 8000790:	2022      	movs	r0, #34	@ 0x22
 8000792:	f000 f8d1 	bl	8000938 <DisplayCharacter.1>
	  		HAL_Delay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800079a:	f001 f8bf 	bl	800191c <HAL_Delay>
	  		if(LDR<128){
 800079e:	4b5c      	ldr	r3, [pc, #368]	@ (8000910 <main+0x230>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	db0a      	blt.n	80007be <main+0xde>
	  			DisplayCharacter(' ' +3);
 80007a8:	f107 0318 	add.w	r3, r7, #24
 80007ac:	469c      	mov	ip, r3
 80007ae:	2023      	movs	r0, #35	@ 0x23
 80007b0:	f000 f8c2 	bl	8000938 <DisplayCharacter.1>
	  		    HAL_Delay(400);
 80007b4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007b8:	f001 f8b0 	bl	800191c <HAL_Delay>
 80007bc:	e009      	b.n	80007d2 <main+0xf2>
	  		}else{
	  			DisplayCharacter(' ' +4);
 80007be:	f107 0318 	add.w	r3, r7, #24
 80007c2:	469c      	mov	ip, r3
 80007c4:	2024      	movs	r0, #36	@ 0x24
 80007c6:	f000 f8b7 	bl	8000938 <DisplayCharacter.1>
	  			HAL_Delay(400);
 80007ca:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80007ce:	f001 f8a5 	bl	800191c <HAL_Delay>
	  		}
	  	  }


	  	  //Func para checar o valor no sensor de canal 1
	  	  if(strncmp(stringBuffer,"Read_AIN1",9) == 0){
 80007d2:	2209      	movs	r2, #9
 80007d4:	4950      	ldr	r1, [pc, #320]	@ (8000918 <main+0x238>)
 80007d6:	484c      	ldr	r0, [pc, #304]	@ (8000908 <main+0x228>)
 80007d8:	f00a f840 	bl	800a85c <strncmp>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d109      	bne.n	80007f6 <main+0x116>
	  		  Temp = PCF8591_ReadAnalog(1);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f000 fbd6 	bl	8000f94 <PCF8591_ReadAnalog>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b4b      	ldr	r3, [pc, #300]	@ (800091c <main+0x23c>)
 80007ee:	701a      	strb	r2, [r3, #0]
	  		  HAL_Delay(100);
 80007f0:	2064      	movs	r0, #100	@ 0x64
 80007f2:	f001 f893 	bl	800191c <HAL_Delay>
	  	  }

	  	//Func para pegar o valor de voltagem e exibir qual o simbolo represent esse valor e se é maior ou menor que 128
	  	  if(strncmp(stringBuffer,"Temp",4) == 0){
 80007f6:	2204      	movs	r2, #4
 80007f8:	4949      	ldr	r1, [pc, #292]	@ (8000920 <main+0x240>)
 80007fa:	4843      	ldr	r0, [pc, #268]	@ (8000908 <main+0x228>)
 80007fc:	f00a f82e 	bl	800a85c <strncmp>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d123      	bne.n	800084e <main+0x16e>
		  		DisplayCharacter(' ' +1);
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	469c      	mov	ip, r3
 800080c:	2021      	movs	r0, #33	@ 0x21
 800080e:	f000 f893 	bl	8000938 <DisplayCharacter.1>
		  		HAL_Delay(500);
 8000812:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000816:	f001 f881 	bl	800191c <HAL_Delay>
		  		if(LDR<128){
 800081a:	4b3d      	ldr	r3, [pc, #244]	@ (8000910 <main+0x230>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	b25b      	sxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	db0a      	blt.n	800083a <main+0x15a>
		  			DisplayCharacter(' ' +3);
 8000824:	f107 0318 	add.w	r3, r7, #24
 8000828:	469c      	mov	ip, r3
 800082a:	2023      	movs	r0, #35	@ 0x23
 800082c:	f000 f884 	bl	8000938 <DisplayCharacter.1>
		  		    HAL_Delay(400);
 8000830:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000834:	f001 f872 	bl	800191c <HAL_Delay>
 8000838:	e009      	b.n	800084e <main+0x16e>
		  		}else{
		  			DisplayCharacter(' ' +4);
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	469c      	mov	ip, r3
 8000840:	2024      	movs	r0, #36	@ 0x24
 8000842:	f000 f879 	bl	8000938 <DisplayCharacter.1>
		  			HAL_Delay(400);
 8000846:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800084a:	f001 f867 	bl	800191c <HAL_Delay>
		  		}

	  	  }

	  	  //Func para checar o valor no sensor de canal 3
	  	  if(strncmp(stringBuffer,"Read_AIN3",9) == 0){
 800084e:	2209      	movs	r2, #9
 8000850:	4934      	ldr	r1, [pc, #208]	@ (8000924 <main+0x244>)
 8000852:	482d      	ldr	r0, [pc, #180]	@ (8000908 <main+0x228>)
 8000854:	f00a f802 	bl	800a85c <strncmp>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d109      	bne.n	8000872 <main+0x192>
	  		  Pot = PCF8591_ReadAnalog(3);
 800085e:	2003      	movs	r0, #3
 8000860:	f000 fb98 	bl	8000f94 <PCF8591_ReadAnalog>
 8000864:	4603      	mov	r3, r0
 8000866:	461a      	mov	r2, r3
 8000868:	4b2f      	ldr	r3, [pc, #188]	@ (8000928 <main+0x248>)
 800086a:	701a      	strb	r2, [r3, #0]
	  		  HAL_Delay(100);
 800086c:	2064      	movs	r0, #100	@ 0x64
 800086e:	f001 f855 	bl	800191c <HAL_Delay>
	  	  }

	  	  //Func para pegar o valor de voltagem e exibir qual o simbolo represent esse valor e se é maior ou menor que 128
	  	  if(strncmp(stringBuffer,"Volt",4) == 0){
 8000872:	2204      	movs	r2, #4
 8000874:	492d      	ldr	r1, [pc, #180]	@ (800092c <main+0x24c>)
 8000876:	4824      	ldr	r0, [pc, #144]	@ (8000908 <main+0x228>)
 8000878:	f009 fff0 	bl	800a85c <strncmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d123      	bne.n	80008ca <main+0x1ea>
		  		DisplayCharacter(' ');
 8000882:	f107 0318 	add.w	r3, r7, #24
 8000886:	469c      	mov	ip, r3
 8000888:	2020      	movs	r0, #32
 800088a:	f000 f855 	bl	8000938 <DisplayCharacter.1>
		  		HAL_Delay(500);
 800088e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000892:	f001 f843 	bl	800191c <HAL_Delay>
		  		if(LDR<128){
 8000896:	4b1e      	ldr	r3, [pc, #120]	@ (8000910 <main+0x230>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b25b      	sxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	db0a      	blt.n	80008b6 <main+0x1d6>
		  			DisplayCharacter(' ' +3);
 80008a0:	f107 0318 	add.w	r3, r7, #24
 80008a4:	469c      	mov	ip, r3
 80008a6:	2023      	movs	r0, #35	@ 0x23
 80008a8:	f000 f846 	bl	8000938 <DisplayCharacter.1>
		  		    HAL_Delay(400);
 80008ac:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80008b0:	f001 f834 	bl	800191c <HAL_Delay>
 80008b4:	e009      	b.n	80008ca <main+0x1ea>
		  		}else{
		  			DisplayCharacter(' ' +4);
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	469c      	mov	ip, r3
 80008bc:	2024      	movs	r0, #36	@ 0x24
 80008be:	f000 f83b 	bl	8000938 <DisplayCharacter.1>
		  			HAL_Delay(400);
 80008c2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80008c6:	f001 f829 	bl	800191c <HAL_Delay>
		  		}
	  	  }


	  	  if(strncmp(stringBuffer,"Set_DAC_",8)==0){
 80008ca:	2208      	movs	r2, #8
 80008cc:	4918      	ldr	r1, [pc, #96]	@ (8000930 <main+0x250>)
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <main+0x228>)
 80008d0:	f009 ffc4 	bl	800a85c <strncmp>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d108      	bne.n	80008ec <main+0x20c>
	  		  uint8_t value = (uint8_t)atoi((char*)&stringBuffer[8]);
 80008da:	4816      	ldr	r0, [pc, #88]	@ (8000934 <main+0x254>)
 80008dc:	f009 ff0d 	bl	800a6fa <atoi>
 80008e0:	4603      	mov	r3, r0
 80008e2:	77fb      	strb	r3, [r7, #31]
	  		  set_dac(value);
 80008e4:	7ffb      	ldrb	r3, [r7, #31]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fbb4 	bl	8001054 <set_dac>
	  	  }

	  	huart3.pRxBuffPtr = rxBuffer;
 80008ec:	4b04      	ldr	r3, [pc, #16]	@ (8000900 <main+0x220>)
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <main+0x224>)
 80008f0:	659a      	str	r2, [r3, #88]	@ 0x58
	    huart3.RxXferCount = 0;
 80008f2:	4b03      	ldr	r3, [pc, #12]	@ (8000900 <main+0x220>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  {
 80008fa:	e724      	b.n	8000746 <main+0x66>
 80008fc:	0800b1f4 	.word	0x0800b1f4
 8000900:	24000158 	.word	0x24000158
 8000904:	240006d8 	.word	0x240006d8
 8000908:	240006e4 	.word	0x240006e4
 800090c:	0800b1b0 	.word	0x0800b1b0
 8000910:	240006d2 	.word	0x240006d2
 8000914:	0800b1bc 	.word	0x0800b1bc
 8000918:	0800b1c0 	.word	0x0800b1c0
 800091c:	240006d3 	.word	0x240006d3
 8000920:	0800b1cc 	.word	0x0800b1cc
 8000924:	0800b1d4 	.word	0x0800b1d4
 8000928:	240006d4 	.word	0x240006d4
 800092c:	0800b1e0 	.word	0x0800b1e0
 8000930:	0800b1e8 	.word	0x0800b1e8
 8000934:	240006ec 	.word	0x240006ec

08000938 <DisplayCharacter.1>:
  	  	  void DisplayCharacter(uint8_t character) {
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
 8000942:	4664      	mov	r4, ip
 8000944:	f8c7 c000 	str.w	ip, [r7]
  	  	  uint8_t charIndex = character - 32; // ASCII offset
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	3b20      	subs	r3, #32
 800094c:	72fb      	strb	r3, [r7, #11]
  	  	  for (int i = 0; i < 8; i++) {
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e011      	b.n	8000978 <DisplayCharacter.1+0x40>
  	  	  MAX7219_SendData(MAX7219_REG_DIGIT0 + i, ascii_font[charIndex][i]);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	b2db      	uxtb	r3, r3
 8000958:	3301      	adds	r3, #1
 800095a:	b2d8      	uxtb	r0, r3
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	4a0a      	ldr	r2, [pc, #40]	@ (8000988 <DisplayCharacter.1+0x50>)
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	441a      	add	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	46a4      	mov	ip, r4
 800096c:	4619      	mov	r1, r3
 800096e:	f7ff fe87 	bl	8000680 <MAX7219_SendData.2>
  	  	  for (int i = 0; i < 8; i++) {
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	3301      	adds	r3, #1
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	2b07      	cmp	r3, #7
 800097c:	ddea      	ble.n	8000954 <DisplayCharacter.1+0x1c>
  	  	  }
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	0800b22c 	.word	0x0800b22c

0800098c <MAX72_Init_F.0>:
  	  	{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	f8c7 c004 	str.w	ip, [r7, #4]
  	  		uint8_t i=0;
 8000996:	2300      	movs	r3, #0
 8000998:	73fb      	strb	r3, [r7, #15]
  	  		for(i=0;i<5;i++)
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e02c      	b.n	80009fa <MAX72_Init_F.0+0x6e>
  	  			shutDown[0]=Init_Commands[i][0];
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
 80009a2:	4a1a      	ldr	r2, [pc, #104]	@ (8000a0c <MAX72_Init_F.0+0x80>)
 80009a4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <MAX72_Init_F.0+0x84>)
 80009aa:	701a      	strb	r2, [r3, #0]
  	  			shutDown[1]=Init_Commands[i][1];
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	4a17      	ldr	r2, [pc, #92]	@ (8000a0c <MAX72_Init_F.0+0x80>)
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	785a      	ldrb	r2, [r3, #1]
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MAX72_Init_F.0+0x84>)
 80009b8:	705a      	strb	r2, [r3, #1]
  	  			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2140      	movs	r1, #64	@ 0x40
 80009be:	4815      	ldr	r0, [pc, #84]	@ (8000a14 <MAX72_Init_F.0+0x88>)
 80009c0:	f001 fcf0 	bl	80023a4 <HAL_GPIO_WritePin>
  	  			HAL_SPI_Transmit_IT(&hspi1,shutDown,2);
 80009c4:	2202      	movs	r2, #2
 80009c6:	4912      	ldr	r1, [pc, #72]	@ (8000a10 <MAX72_Init_F.0+0x84>)
 80009c8:	4813      	ldr	r0, [pc, #76]	@ (8000a18 <MAX72_Init_F.0+0x8c>)
 80009ca:	f006 fdd5 	bl	8007578 <HAL_SPI_Transmit_IT>
  	  			HAL_Delay(10);
 80009ce:	200a      	movs	r0, #10
 80009d0:	f000 ffa4 	bl	800191c <HAL_Delay>
  	  			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, GPIO_PIN_SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	2140      	movs	r1, #64	@ 0x40
 80009d8:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <MAX72_Init_F.0+0x88>)
 80009da:	f001 fce3 	bl	80023a4 <HAL_GPIO_WritePin>
  	  			HAL_Delay(10);
 80009de:	200a      	movs	r0, #10
 80009e0:	f000 ff9c 	bl	800191c <HAL_Delay>
  	  			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2140      	movs	r1, #64	@ 0x40
 80009e8:	480a      	ldr	r0, [pc, #40]	@ (8000a14 <MAX72_Init_F.0+0x88>)
 80009ea:	f001 fcdb 	bl	80023a4 <HAL_GPIO_WritePin>
  	  			HAL_Delay(10);
 80009ee:	200a      	movs	r0, #10
 80009f0:	f000 ff94 	bl	800191c <HAL_Delay>
  	  		for(i=0;i<5;i++)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	3301      	adds	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	2b04      	cmp	r3, #4
 80009fe:	d9cf      	bls.n	80009a0 <MAX72_Init_F.0+0x14>
  	  	}
 8000a00:	bf00      	nop
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	0800b254 	.word	0x0800b254
 8000a10:	240006d0 	.word	0x240006d0
 8000a14:	58020000 	.word	0x58020000
 8000a18:	240000d0 	.word	0x240000d0

08000a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b09c      	sub	sp, #112	@ 0x70
 8000a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a26:	224c      	movs	r2, #76	@ 0x4c
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f009 ff0e 	bl	800a84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	2220      	movs	r2, #32
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f009 ff08 	bl	800a84c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a3c:	2002      	movs	r0, #2
 8000a3e:	f003 fe1b 	bl	8004678 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b33      	ldr	r3, [pc, #204]	@ (8000b14 <SystemClock_Config+0xf8>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4a:	4a32      	ldr	r2, [pc, #200]	@ (8000b14 <SystemClock_Config+0xf8>)
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a52:	4b30      	ldr	r3, [pc, #192]	@ (8000b14 <SystemClock_Config+0xf8>)
 8000a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b18 <SystemClock_Config+0xfc>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a64:	4a2c      	ldr	r2, [pc, #176]	@ (8000b18 <SystemClock_Config+0xfc>)
 8000a66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <SystemClock_Config+0xfc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a78:	bf00      	nop
 8000a7a:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <SystemClock_Config+0xfc>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a86:	d1f8      	bne.n	8000a7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a8c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a96:	2340      	movs	r3, #64	@ 0x40
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000aa6:	2313      	movs	r3, #19
 8000aa8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000aba:	2302      	movs	r3, #2
 8000abc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 fe20 	bl	800470c <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ad2:	f000 fb33 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	233f      	movs	r3, #63	@ 0x3f
 8000ad8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2101      	movs	r1, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fa60 	bl	8004fc0 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b06:	f000 fb19 	bl	800113c <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3770      	adds	r7, #112	@ 0x70
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	58000400 	.word	0x58000400
 8000b18:	58024800 	.word	0x58024800

08000b1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <MX_I2C1_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b28:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <MX_I2C1_Init+0x7c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b58:	f001 fc3e 	bl	80023d8 <HAL_I2C_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b62:	f000 faeb 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b6a:	f003 fbbd 	bl	80042e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b74:	f000 fae2 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_I2C1_Init+0x74>)
 8000b7c:	f003 fbff 	bl	800437e <HAL_I2CEx_ConfigDigitalFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 fad9 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400007c 	.word	0x2400007c
 8000b94:	40005400 	.word	0x40005400
 8000b98:	10707dbc 	.word	0x10707dbc

08000b9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ba0:	4b28      	ldr	r3, [pc, #160]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000ba2:	4a29      	ldr	r2, [pc, #164]	@ (8000c48 <MX_SPI1_Init+0xac>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b27      	ldr	r3, [pc, #156]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000ba8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000bae:	4b25      	ldr	r3, [pc, #148]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bb0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bb4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bbc:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bca:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000bce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bd2:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000bd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be4:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bf6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_SPI1_Init+0xa8>)
 8000c30:	f006 fb7e 	bl	8007330 <HAL_SPI_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000c3a:	f000 fa7f 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	240000d0 	.word	0x240000d0
 8000c48:	40013000 	.word	0x40013000

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c96:	f007 f876 	bl	8007d86 <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 fa4c 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000ca8:	f009 f955 	bl	8009f56 <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 fa43 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cba:	f009 f98a 	bl	8009fd2 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 fa3a 	bl	800113c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cca:	f009 f90b 	bl	8009ee4 <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fa32 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	24000158 	.word	0x24000158
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ce8:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cea:	4a16      	ldr	r2, [pc, #88]	@ (8000d44 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000cec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf0:	2209      	movs	r2, #9
 8000cf2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d18:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d24:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	@ (8000d40 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2c:	f003 fb73 	bl	8004416 <HAL_PCD_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d36:	f000 fa01 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	240001ec 	.word	0x240001ec
 8000d44:	40080000 	.word	0x40080000

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	@ 0x30
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b86      	ldr	r3, [pc, #536]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	4a84      	ldr	r2, [pc, #528]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6e:	4b82      	ldr	r3, [pc, #520]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	4a7d      	ldr	r2, [pc, #500]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b77      	ldr	r3, [pc, #476]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	4a75      	ldr	r2, [pc, #468]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000daa:	4b73      	ldr	r3, [pc, #460]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b6f      	ldr	r3, [pc, #444]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	4a6e      	ldr	r2, [pc, #440]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	4b68      	ldr	r3, [pc, #416]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ddc:	4a66      	ldr	r2, [pc, #408]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de6:	4b64      	ldr	r3, [pc, #400]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dec:	f003 0308 	and.w	r3, r3, #8
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df4:	4b60      	ldr	r3, [pc, #384]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfa:	4a5f      	ldr	r2, [pc, #380]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e04:	4b5c      	ldr	r3, [pc, #368]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e12:	4b59      	ldr	r3, [pc, #356]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	4a57      	ldr	r2, [pc, #348]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e22:	4b55      	ldr	r3, [pc, #340]	@ (8000f78 <MX_GPIO_Init+0x230>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	f003 0310 	and.w	r3, r3, #16
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2140      	movs	r1, #64	@ 0x40
 8000e34:	4851      	ldr	r0, [pc, #324]	@ (8000f7c <MX_GPIO_Init+0x234>)
 8000e36:	f001 fab5 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000e40:	484f      	ldr	r0, [pc, #316]	@ (8000f80 <MX_GPIO_Init+0x238>)
 8000e42:	f001 faaf 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e4c:	484d      	ldr	r0, [pc, #308]	@ (8000f84 <MX_GPIO_Init+0x23c>)
 8000e4e:	f001 faa9 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	2102      	movs	r1, #2
 8000e56:	484c      	ldr	r0, [pc, #304]	@ (8000f88 <MX_GPIO_Init+0x240>)
 8000e58:	f001 faa4 	bl	80023a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4846      	ldr	r0, [pc, #280]	@ (8000f8c <MX_GPIO_Init+0x244>)
 8000e72:	f001 f8e7 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e76:	2332      	movs	r3, #50	@ 0x32
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e86:	230b      	movs	r3, #11
 8000e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	f107 031c 	add.w	r3, r7, #28
 8000e8e:	4619      	mov	r1, r3
 8000e90:	483e      	ldr	r0, [pc, #248]	@ (8000f8c <MX_GPIO_Init+0x244>)
 8000e92:	f001 f8d7 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000e96:	2306      	movs	r3, #6
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4832      	ldr	r0, [pc, #200]	@ (8000f7c <MX_GPIO_Init+0x234>)
 8000eb2:	f001 f8c7 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb6:	2340      	movs	r3, #64	@ 0x40
 8000eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	482b      	ldr	r0, [pc, #172]	@ (8000f7c <MX_GPIO_Init+0x234>)
 8000ece:	f001 f8b9 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ed2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4825      	ldr	r0, [pc, #148]	@ (8000f80 <MX_GPIO_Init+0x238>)
 8000eec:	f001 f8aa 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f02:	230b      	movs	r3, #11
 8000f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	481c      	ldr	r0, [pc, #112]	@ (8000f80 <MX_GPIO_Init+0x238>)
 8000f0e:	f001 f899 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4816      	ldr	r0, [pc, #88]	@ (8000f84 <MX_GPIO_Init+0x23c>)
 8000f2c:	f001 f88a 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f30:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f42:	230b      	movs	r3, #11
 8000f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4810      	ldr	r0, [pc, #64]	@ (8000f90 <MX_GPIO_Init+0x248>)
 8000f4e:	f001 f879 	bl	8002044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <MX_GPIO_Init+0x240>)
 8000f6a:	f001 f86b 	bl	8002044 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	@ 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020000 	.word	0x58020000
 8000f80:	58020400 	.word	0x58020400
 8000f84:	58020c00 	.word	0x58020c00
 8000f88:	58021000 	.word	0x58021000
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58021800 	.word	0x58021800

08000f94 <PCF8591_ReadAnalog>:

/* USER CODE BEGIN 4 */
uint8_t PCF8591_ReadAnalog(uint8_t channel){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]

	uint8_t config_byte = 0x40 | (channel & 0x03);
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	77fb      	strb	r3, [r7, #31]
	uint8_t analog_data[2];

	//Transmitir comando para o sensor
	HAL_I2C_Master_Transmit_IT(&hi2c1,PCF8591_ADDRESS, &config_byte, 1);
 8000fb2:	f107 021f 	add.w	r2, r7, #31
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2190      	movs	r1, #144	@ 0x90
 8000fba:	4821      	ldr	r0, [pc, #132]	@ (8001040 <PCF8591_ReadAnalog+0xac>)
 8000fbc:	f001 faa8 	bl	8002510 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(100);
 8000fc0:	2064      	movs	r0, #100	@ 0x64
 8000fc2:	f000 fcab 	bl	800191c <HAL_Delay>
	//Receber informação sobre o canal escolhido
	HAL_I2C_Master_Receive_IT(&hi2c1,PCF8591_ADDRESS, analog_data, 2);
 8000fc6:	f107 021c 	add.w	r2, r7, #28
 8000fca:	2302      	movs	r3, #2
 8000fcc:	2190      	movs	r1, #144	@ 0x90
 8000fce:	481c      	ldr	r0, [pc, #112]	@ (8001040 <PCF8591_ReadAnalog+0xac>)
 8000fd0:	f001 fb36 	bl	8002640 <HAL_I2C_Master_Receive_IT>
	HAL_Delay(100);
 8000fd4:	2064      	movs	r0, #100	@ 0x64
 8000fd6:	f000 fca1 	bl	800191c <HAL_Delay>

	//Criar mensagem que será exibida no terminal
	char string[15];
	sprintf(string, "AIN%d: %d\n", channel, analog_data[1]);
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	7f7b      	ldrb	r3, [r7, #29]
 8000fde:	f107 000c 	add.w	r0, r7, #12
 8000fe2:	4918      	ldr	r1, [pc, #96]	@ (8001044 <PCF8591_ReadAnalog+0xb0>)
 8000fe4:	f009 fc12 	bl	800a80c <siprintf>
	//Enviar mensagem
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)string, strlen(string));
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f977 	bl	80002e0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4812      	ldr	r0, [pc, #72]	@ (8001048 <PCF8591_ReadAnalog+0xb4>)
 8000ffe:	f006 ff13 	bl	8007e28 <HAL_UART_Transmit_IT>
   HAL_Delay(100);
 8001002:	2064      	movs	r0, #100	@ 0x64
 8001004:	f000 fc8a 	bl	800191c <HAL_Delay>

   // Limpar a memoria do buffer
   memset(rxBuffer, 0, 12);
 8001008:	220c      	movs	r2, #12
 800100a:	2100      	movs	r1, #0
 800100c:	480f      	ldr	r0, [pc, #60]	@ (800104c <PCF8591_ReadAnalog+0xb8>)
 800100e:	f009 fc1d 	bl	800a84c <memset>

   // Resetar pointeiro e counter
   huart3.pRxBuffPtr = rxBuffer;
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <PCF8591_ReadAnalog+0xb4>)
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <PCF8591_ReadAnalog+0xb8>)
 8001016:	659a      	str	r2, [r3, #88]	@ 0x58
   huart3.RxXferCount = 0; //
 8001018:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <PCF8591_ReadAnalog+0xb4>)
 800101a:	2200      	movs	r2, #0
 800101c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
   memset(stringBuffer, 0, 12);
 8001020:	220c      	movs	r2, #12
 8001022:	2100      	movs	r1, #0
 8001024:	480a      	ldr	r0, [pc, #40]	@ (8001050 <PCF8591_ReadAnalog+0xbc>)
 8001026:	f009 fc11 	bl	800a84c <memset>
   HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 800102a:	220c      	movs	r2, #12
 800102c:	4907      	ldr	r1, [pc, #28]	@ (800104c <PCF8591_ReadAnalog+0xb8>)
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <PCF8591_ReadAnalog+0xb4>)
 8001030:	f006 ff8e 	bl	8007f50 <HAL_UART_Receive_IT>
	return analog_data[1];
 8001034:	7f7b      	ldrb	r3, [r7, #29]

}
 8001036:	4618      	mov	r0, r3
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2400007c 	.word	0x2400007c
 8001044:	0800b20c 	.word	0x0800b20c
 8001048:	24000158 	.word	0x24000158
 800104c:	240006d8 	.word	0x240006d8
 8001050:	240006e4 	.word	0x240006e4

08001054 <set_dac>:

void set_dac(uint8_t value){
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	 uint8_t config_byte = 0x40;
 800105e:	2340      	movs	r3, #64	@ 0x40
 8001060:	77fb      	strb	r3, [r7, #31]
	 uint8_t analog_data[2] = {config_byte, value};
 8001062:	7ffb      	ldrb	r3, [r7, #31]
 8001064:	773b      	strb	r3, [r7, #28]
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	777b      	strb	r3, [r7, #29]
	 //Transmitir comando para o sensor
	 HAL_I2C_Master_Transmit_IT(&hi2c1,(uint16_t)PCF8591_ADDRESS, analog_data, 2);
 800106a:	f107 021c 	add.w	r2, r7, #28
 800106e:	2302      	movs	r3, #2
 8001070:	2190      	movs	r1, #144	@ 0x90
 8001072:	481b      	ldr	r0, [pc, #108]	@ (80010e0 <set_dac+0x8c>)
 8001074:	f001 fa4c 	bl	8002510 <HAL_I2C_Master_Transmit_IT>
	 HAL_Delay(100);
 8001078:	2064      	movs	r0, #100	@ 0x64
 800107a:	f000 fc4f 	bl	800191c <HAL_Delay>

	 //Criar mensagem que será exibida no terminal
	 char string[15];
	 sprintf(string, "Valor do DAC: %d\n", value);
 800107e:	79fa      	ldrb	r2, [r7, #7]
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	4917      	ldr	r1, [pc, #92]	@ (80010e4 <set_dac+0x90>)
 8001086:	4618      	mov	r0, r3
 8001088:	f009 fbc0 	bl	800a80c <siprintf>
	 //Enviar mensagem
	 HAL_UART_Transmit_IT(&huart3, (uint8_t*)string, strlen(string));
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff f925 	bl	80002e0 <strlen>
 8001096:	4603      	mov	r3, r0
 8001098:	b29a      	uxth	r2, r3
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <set_dac+0x94>)
 80010a2:	f006 fec1 	bl	8007e28 <HAL_UART_Transmit_IT>
	 HAL_Delay(100);
 80010a6:	2064      	movs	r0, #100	@ 0x64
 80010a8:	f000 fc38 	bl	800191c <HAL_Delay>

	 // Limpar a memoria do buffer
	  memset(rxBuffer, 0, 12);
 80010ac:	220c      	movs	r2, #12
 80010ae:	2100      	movs	r1, #0
 80010b0:	480e      	ldr	r0, [pc, #56]	@ (80010ec <set_dac+0x98>)
 80010b2:	f009 fbcb 	bl	800a84c <memset>
	 // Resetar o contador e o ponteiro do usart3
	  huart3.pRxBuffPtr = rxBuffer;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <set_dac+0x94>)
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <set_dac+0x98>)
 80010ba:	659a      	str	r2, [r3, #88]	@ 0x58
	  huart3.RxXferCount = 0;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <set_dac+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
	  memset(stringBuffer, 0, 12);
 80010c4:	220c      	movs	r2, #12
 80010c6:	2100      	movs	r1, #0
 80010c8:	4809      	ldr	r0, [pc, #36]	@ (80010f0 <set_dac+0x9c>)
 80010ca:	f009 fbbf 	bl	800a84c <memset>
	  HAL_UART_Receive_IT(&huart3, rxBuffer, 12);
 80010ce:	220c      	movs	r2, #12
 80010d0:	4906      	ldr	r1, [pc, #24]	@ (80010ec <set_dac+0x98>)
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <set_dac+0x94>)
 80010d4:	f006 ff3c 	bl	8007f50 <HAL_UART_Receive_IT>
}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2400007c 	.word	0x2400007c
 80010e4:	0800b218 	.word	0x0800b218
 80010e8:	24000158 	.word	0x24000158
 80010ec:	240006d8 	.word	0x240006d8
 80010f0:	240006e4 	.word	0x240006e4

080010f4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
		 // Limpar a memoria do buffer
		 memset(rxBuffer, 0, 12);
 80010fc:	220c      	movs	r2, #12
 80010fe:	2100      	movs	r1, #0
 8001100:	480b      	ldr	r0, [pc, #44]	@ (8001130 <HAL_UART_RxCpltCallback+0x3c>)
 8001102:	f009 fba3 	bl	800a84c <memset>
	    // Resetar o contador e o ponteiro do usart3
 	    huart3.pRxBuffPtr = rxBuffer;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_UART_RxCpltCallback+0x40>)
 8001108:	4a09      	ldr	r2, [pc, #36]	@ (8001130 <HAL_UART_RxCpltCallback+0x3c>)
 800110a:	659a      	str	r2, [r3, #88]	@ 0x58
 	    huart3.RxXferCount = 0;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <HAL_UART_RxCpltCallback+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
 	    memset(stringBuffer, 0, 12);
 8001114:	220c      	movs	r2, #12
 8001116:	2100      	movs	r1, #0
 8001118:	4807      	ldr	r0, [pc, #28]	@ (8001138 <HAL_UART_RxCpltCallback+0x44>)
 800111a:	f009 fb97 	bl	800a84c <memset>
		HAL_UART_Receive_IT(&huart3, rxBuffer, 12); // Reinicia a recepção
 800111e:	220c      	movs	r2, #12
 8001120:	4903      	ldr	r1, [pc, #12]	@ (8001130 <HAL_UART_RxCpltCallback+0x3c>)
 8001122:	4804      	ldr	r0, [pc, #16]	@ (8001134 <HAL_UART_RxCpltCallback+0x40>)
 8001124:	f006 ff14 	bl	8007f50 <HAL_UART_Receive_IT>

	 }
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	240006d8 	.word	0x240006d8
 8001134:	24000158 	.word	0x24000158
 8001138:	240006e4 	.word	0x240006e4

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_MspInit+0x30>)
 8001150:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001154:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_MspInit+0x30>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_MspInit+0x30>)
 8001160:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	58024400 	.word	0x58024400

0800117c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b0ba      	sub	sp, #232	@ 0xe8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	22c0      	movs	r2, #192	@ 0xc0
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f009 fb55 	bl	800a84c <memset>
  if(hi2c->Instance==I2C1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001264 <HAL_I2C_MspInit+0xe8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d156      	bne.n	800125a <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011ac:	f04f 0208 	mov.w	r2, #8
 80011b0:	f04f 0300 	mov.w	r3, #0
 80011b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fa88 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011ce:	f7ff ffb5 	bl	800113c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <HAL_I2C_MspInit+0xec>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d8:	4a23      	ldr	r2, [pc, #140]	@ (8001268 <HAL_I2C_MspInit+0xec>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e2:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <HAL_I2C_MspInit+0xec>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800120a:	2304      	movs	r3, #4
 800120c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001214:	4619      	mov	r1, r3
 8001216:	4815      	ldr	r0, [pc, #84]	@ (800126c <HAL_I2C_MspInit+0xf0>)
 8001218:	f000 ff14 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_I2C_MspInit+0xec>)
 800121e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001222:	4a11      	ldr	r2, [pc, #68]	@ (8001268 <HAL_I2C_MspInit+0xec>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001228:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_I2C_MspInit+0xec>)
 800122e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001232:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	201f      	movs	r0, #31
 8001240:	f000 fc77 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001244:	201f      	movs	r0, #31
 8001246:	f000 fc8e 	bl	8001b66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	2020      	movs	r0, #32
 8001250:	f000 fc6f 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001254:	2020      	movs	r0, #32
 8001256:	f000 fc86 	bl	8001b66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800125a:	bf00      	nop
 800125c:	37e8      	adds	r7, #232	@ 0xe8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40005400 	.word	0x40005400
 8001268:	58024400 	.word	0x58024400
 800126c:	58020400 	.word	0x58020400

08001270 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0bc      	sub	sp, #240	@ 0xf0
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	22c0      	movs	r2, #192	@ 0xc0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f009 fadb 	bl	800a84c <memset>
  if(hspi->Instance==SPI1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a45      	ldr	r2, [pc, #276]	@ (80013b0 <HAL_SPI_MspInit+0x140>)
 800129c:	4293      	cmp	r3, r2
 800129e:	f040 8083 	bne.w	80013a8 <HAL_SPI_MspInit+0x138>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 32;
 80012b2:	2320      	movs	r3, #32
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012c2:	23c0      	movs	r3, #192	@ 0xc0
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 2048;
 80012ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012d6:	f107 0318 	add.w	r3, r7, #24
 80012da:	4618      	mov	r0, r3
 80012dc:	f004 f9fc 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_SPI_MspInit+0x7a>
    {
      Error_Handler();
 80012e6:	f7ff ff29 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ea:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 80012ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012f0:	4a30      	ldr	r2, [pc, #192]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 80012f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012fa:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 80012fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	4a29      	ldr	r2, [pc, #164]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001318:	4b26      	ldr	r3, [pc, #152]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	4a21      	ldr	r2, [pc, #132]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 800132e:	f043 0302 	orr.w	r3, r3, #2
 8001332:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <HAL_SPI_MspInit+0x144>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001344:	2320      	movs	r3, #32
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135c:	2305      	movs	r3, #5
 800135e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001366:	4619      	mov	r1, r3
 8001368:	4813      	ldr	r0, [pc, #76]	@ (80013b8 <HAL_SPI_MspInit+0x148>)
 800136a:	f000 fe6b 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800136e:	2320      	movs	r3, #32
 8001370:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001386:	2305      	movs	r3, #5
 8001388:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001390:	4619      	mov	r1, r3
 8001392:	480a      	ldr	r0, [pc, #40]	@ (80013bc <HAL_SPI_MspInit+0x14c>)
 8001394:	f000 fe56 	bl	8002044 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2023      	movs	r0, #35	@ 0x23
 800139e:	f000 fbc8 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013a2:	2023      	movs	r0, #35	@ 0x23
 80013a4:	f000 fbdf 	bl	8001b66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013a8:	bf00      	nop
 80013aa:	37f0      	adds	r7, #240	@ 0xf0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40013000 	.word	0x40013000
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58020000 	.word	0x58020000
 80013bc:	58020400 	.word	0x58020400

080013c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0ba      	sub	sp, #232	@ 0xe8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 0310 	add.w	r3, r7, #16
 80013dc:	22c0      	movs	r2, #192	@ 0xc0
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 fa33 	bl	800a84c <memset>
  if(huart->Instance==USART3)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a27      	ldr	r2, [pc, #156]	@ (8001488 <HAL_UART_MspInit+0xc8>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d146      	bne.n	800147e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013f0:	f04f 0202 	mov.w	r2, #2
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4618      	mov	r0, r3
 8001408:	f004 f966 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001412:	f7ff fe93 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <HAL_UART_MspInit+0xcc>)
 8001418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800141c:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <HAL_UART_MspInit+0xcc>)
 800141e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001422:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_UART_MspInit+0xcc>)
 8001428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800142c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001434:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_UART_MspInit+0xcc>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <HAL_UART_MspInit+0xcc>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <HAL_UART_MspInit+0xcc>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001452:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800146c:	2307      	movs	r3, #7
 800146e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001472:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	@ (8001490 <HAL_UART_MspInit+0xd0>)
 800147a:	f000 fde3 	bl	8002044 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800147e:	bf00      	nop
 8001480:	37e8      	adds	r7, #232	@ 0xe8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40004800 	.word	0x40004800
 800148c:	58024400 	.word	0x58024400
 8001490:	58020c00 	.word	0x58020c00

08001494 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0ba      	sub	sp, #232	@ 0xe8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	22c0      	movs	r2, #192	@ 0xc0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f009 f9c9 	bl	800a84c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a30      	ldr	r2, [pc, #192]	@ (8001580 <HAL_PCD_MspInit+0xec>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d159      	bne.n	8001578 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80014c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80014d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d8:	f107 0310 	add.w	r3, r7, #16
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 f8fb 	bl	80056d8 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80014e8:	f7ff fe28 	bl	800113c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80014ec:	f003 f8fe 	bl	80046ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <HAL_PCD_MspInit+0xf0>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f6:	4a23      	ldr	r2, [pc, #140]	@ (8001584 <HAL_PCD_MspInit+0xf0>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001500:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <HAL_PCD_MspInit+0xf0>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800150e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001528:	230a      	movs	r3, #10
 800152a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001532:	4619      	mov	r1, r3
 8001534:	4814      	ldr	r0, [pc, #80]	@ (8001588 <HAL_PCD_MspInit+0xf4>)
 8001536:	f000 fd85 	bl	8002044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800153a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800153e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	@ (8001588 <HAL_PCD_MspInit+0xf4>)
 8001556:	f000 fd75 	bl	8002044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_PCD_MspInit+0xf0>)
 800155c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001560:	4a08      	ldr	r2, [pc, #32]	@ (8001584 <HAL_PCD_MspInit+0xf0>)
 8001562:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001566:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800156a:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_PCD_MspInit+0xf0>)
 800156c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001578:	bf00      	nop
 800157a:	37e8      	adds	r7, #232	@ 0xe8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40080000 	.word	0x40080000
 8001584:	58024400 	.word	0x58024400
 8001588:	58020000 	.word	0x58020000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <NMI_Handler+0x4>

08001594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <MemManage_Handler+0x4>

080015a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e2:	f000 f97b 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015f0:	4802      	ldr	r0, [pc, #8]	@ (80015fc <I2C1_EV_IRQHandler+0x10>)
 80015f2:	f001 f895 	bl	8002720 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400007c 	.word	0x2400007c

08001600 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <I2C1_ER_IRQHandler+0x10>)
 8001606:	f001 f8a5 	bl	8002754 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2400007c 	.word	0x2400007c

08001614 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <SPI1_IRQHandler+0x10>)
 800161a:	f006 f857 	bl	80076cc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	240000d0 	.word	0x240000d0

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f009 f926 	bl	800a8a8 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	24080000 	.word	0x24080000
 8001688:	00000400 	.word	0x00000400
 800168c:	240006f0 	.word	0x240006f0
 8001690:	24000840 	.word	0x24000840

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001698:	4b37      	ldr	r3, [pc, #220]	@ (8001778 <SystemInit+0xe4>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a36      	ldr	r2, [pc, #216]	@ (8001778 <SystemInit+0xe4>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016a8:	4b34      	ldr	r3, [pc, #208]	@ (800177c <SystemInit+0xe8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 030f 	and.w	r3, r3, #15
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	d807      	bhi.n	80016c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016b4:	4b31      	ldr	r3, [pc, #196]	@ (800177c <SystemInit+0xe8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 030f 	bic.w	r3, r3, #15
 80016bc:	4a2f      	ldr	r2, [pc, #188]	@ (800177c <SystemInit+0xe8>)
 80016be:	f043 0307 	orr.w	r3, r3, #7
 80016c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <SystemInit+0xec>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a2d      	ldr	r2, [pc, #180]	@ (8001780 <SystemInit+0xec>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001780 <SystemInit+0xec>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <SystemInit+0xec>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	4929      	ldr	r1, [pc, #164]	@ (8001780 <SystemInit+0xec>)
 80016dc:	4b29      	ldr	r3, [pc, #164]	@ (8001784 <SystemInit+0xf0>)
 80016de:	4013      	ands	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016e2:	4b26      	ldr	r3, [pc, #152]	@ (800177c <SystemInit+0xe8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d007      	beq.n	80016fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ee:	4b23      	ldr	r3, [pc, #140]	@ (800177c <SystemInit+0xe8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 030f 	bic.w	r3, r3, #15
 80016f6:	4a21      	ldr	r2, [pc, #132]	@ (800177c <SystemInit+0xe8>)
 80016f8:	f043 0307 	orr.w	r3, r3, #7
 80016fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <SystemInit+0xec>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001704:	4b1e      	ldr	r3, [pc, #120]	@ (8001780 <SystemInit+0xec>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <SystemInit+0xec>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <SystemInit+0xec>)
 8001712:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <SystemInit+0xf4>)
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <SystemInit+0xec>)
 8001718:	4a1c      	ldr	r2, [pc, #112]	@ (800178c <SystemInit+0xf8>)
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <SystemInit+0xec>)
 800171e:	4a1c      	ldr	r2, [pc, #112]	@ (8001790 <SystemInit+0xfc>)
 8001720:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <SystemInit+0xec>)
 8001724:	2200      	movs	r2, #0
 8001726:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <SystemInit+0xec>)
 800172a:	4a19      	ldr	r2, [pc, #100]	@ (8001790 <SystemInit+0xfc>)
 800172c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <SystemInit+0xec>)
 8001730:	2200      	movs	r2, #0
 8001732:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <SystemInit+0xec>)
 8001736:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <SystemInit+0xfc>)
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <SystemInit+0xec>)
 800173c:	2200      	movs	r2, #0
 800173e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <SystemInit+0xec>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0e      	ldr	r2, [pc, #56]	@ (8001780 <SystemInit+0xec>)
 8001746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800174a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800174c:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <SystemInit+0xec>)
 800174e:	2200      	movs	r2, #0
 8001750:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <SystemInit+0x100>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <SystemInit+0x104>)
 8001758:	4013      	ands	r3, r2
 800175a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800175e:	d202      	bcs.n	8001766 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <SystemInit+0x108>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <SystemInit+0x10c>)
 8001768:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800176c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	52002000 	.word	0x52002000
 8001780:	58024400 	.word	0x58024400
 8001784:	eaf6ed7f 	.word	0xeaf6ed7f
 8001788:	02020200 	.word	0x02020200
 800178c:	01ff0000 	.word	0x01ff0000
 8001790:	01010280 	.word	0x01010280
 8001794:	5c001000 	.word	0x5c001000
 8001798:	ffff0000 	.word	0xffff0000
 800179c:	51008108 	.word	0x51008108
 80017a0:	52004000 	.word	0x52004000

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a8:	f7ff ff74 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	@ (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	@ (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	@ (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f009 f86f 	bl	800a8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7fe ff83 	bl	80006e0 <main>
  bx  lr
 80017da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017e4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80017e8:	0800b3dc 	.word	0x0800b3dc
  ldr r2, =_sbss
 80017ec:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80017f0:	24000840 	.word	0x24000840

080017f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC3_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fe:	2003      	movs	r0, #3
 8001800:	f000 f98c 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001804:	f003 fd92 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8001808:	4602      	mov	r2, r0
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_Init+0x68>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	4913      	ldr	r1, [pc, #76]	@ (8001864 <HAL_Init+0x6c>)
 8001816:	5ccb      	ldrb	r3, [r1, r3]
 8001818:	f003 031f 	and.w	r3, r3, #31
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001822:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <HAL_Init+0x68>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	4a0e      	ldr	r2, [pc, #56]	@ (8001864 <HAL_Init+0x6c>)
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	fa22 f303 	lsr.w	r3, r2, r3
 8001838:	4a0b      	ldr	r2, [pc, #44]	@ (8001868 <HAL_Init+0x70>)
 800183a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800183c:	4a0b      	ldr	r2, [pc, #44]	@ (800186c <HAL_Init+0x74>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f814 	bl	8001870 <HAL_InitTick>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e002      	b.n	8001858 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001852:	f7ff fc79 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	58024400 	.word	0x58024400
 8001864:	0800b260 	.word	0x0800b260
 8001868:	24000004 	.word	0x24000004
 800186c:	24000000 	.word	0x24000000

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001878:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <HAL_InitTick+0x60>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e021      	b.n	80018c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001884:	4b13      	ldr	r3, [pc, #76]	@ (80018d4 <HAL_InitTick+0x64>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <HAL_InitTick+0x60>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f971 	bl	8001b82 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 f93b 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_InitTick+0x68>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	2400000c 	.word	0x2400000c
 80018d4:	24000000 	.word	0x24000000
 80018d8:	24000008 	.word	0x24000008

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	2400000c 	.word	0x2400000c
 8001900:	240006f4 	.word	0x240006f4

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	240006f4 	.word	0x240006f4

0800191c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001924:	f7ff ffee 	bl	8001904 <HAL_GetTick>
 8001928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d005      	beq.n	8001942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001936:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <HAL_Delay+0x44>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001942:	bf00      	nop
 8001944:	f7ff ffde 	bl	8001904 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	429a      	cmp	r2, r3
 8001952:	d8f7      	bhi.n	8001944 <HAL_Delay+0x28>
  {
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2400000c 	.word	0x2400000c

08001964 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <HAL_GetREVID+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	0c1b      	lsrs	r3, r3, #16
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	5c001000 	.word	0x5c001000

0800197c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <__NVIC_SetPriorityGrouping+0x40>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <__NVIC_SetPriorityGrouping+0x40>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00
 80019c0:	05fa0000 	.word	0x05fa0000

080019c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db0b      	blt.n	8001a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	f003 021f 	and.w	r2, r3, #31
 80019f8:	4907      	ldr	r1, [pc, #28]	@ (8001a18 <__NVIC_EnableIRQ+0x38>)
 80019fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	2001      	movs	r0, #1
 8001a02:	fa00 f202 	lsl.w	r2, r0, r2
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	e000e100 	.word	0xe000e100

08001a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	db0a      	blt.n	8001a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	490c      	ldr	r1, [pc, #48]	@ (8001a68 <__NVIC_SetPriority+0x4c>)
 8001a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3a:	0112      	lsls	r2, r2, #4
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a44:	e00a      	b.n	8001a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4908      	ldr	r1, [pc, #32]	@ (8001a6c <__NVIC_SetPriority+0x50>)
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	3b04      	subs	r3, #4
 8001a54:	0112      	lsls	r2, r2, #4
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	440b      	add	r3, r1
 8001a5a:	761a      	strb	r2, [r3, #24]
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	@ 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f1c3 0307 	rsb	r3, r3, #7
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	bf28      	it	cs
 8001a8e:	2304      	movcs	r3, #4
 8001a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3304      	adds	r3, #4
 8001a96:	2b06      	cmp	r3, #6
 8001a98:	d902      	bls.n	8001aa0 <NVIC_EncodePriority+0x30>
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3b03      	subs	r3, #3
 8001a9e:	e000      	b.n	8001aa2 <NVIC_EncodePriority+0x32>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	4313      	orrs	r3, r2
         );
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3724      	adds	r7, #36	@ 0x24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff8e 	bl	8001a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff29 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b40:	f7ff ff40 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	6978      	ldr	r0, [r7, #20]
 8001b4c:	f7ff ff90 	bl	8001a70 <NVIC_EncodePriority>
 8001b50:	4602      	mov	r2, r0
 8001b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff5f 	bl	8001a1c <__NVIC_SetPriority>
}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff33 	bl	80019e0 <__NVIC_EnableIRQ>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffa4 	bl	8001ad8 <SysTick_Config>
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e237      	b.n	800201e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2280      	movs	r2, #128	@ 0x80
 8001bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e22c      	b.n	800201e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d3c <HAL_DMA_Abort_IT+0x1a0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d04a      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8001d40 <HAL_DMA_Abort_IT+0x1a4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d045      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a59      	ldr	r2, [pc, #356]	@ (8001d44 <HAL_DMA_Abort_IT+0x1a8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d040      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a58      	ldr	r2, [pc, #352]	@ (8001d48 <HAL_DMA_Abort_IT+0x1ac>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d03b      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a56      	ldr	r2, [pc, #344]	@ (8001d4c <HAL_DMA_Abort_IT+0x1b0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d036      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a55      	ldr	r2, [pc, #340]	@ (8001d50 <HAL_DMA_Abort_IT+0x1b4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d031      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a53      	ldr	r2, [pc, #332]	@ (8001d54 <HAL_DMA_Abort_IT+0x1b8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d02c      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a52      	ldr	r2, [pc, #328]	@ (8001d58 <HAL_DMA_Abort_IT+0x1bc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d027      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a50      	ldr	r2, [pc, #320]	@ (8001d5c <HAL_DMA_Abort_IT+0x1c0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d022      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a4f      	ldr	r2, [pc, #316]	@ (8001d60 <HAL_DMA_Abort_IT+0x1c4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d01d      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d64 <HAL_DMA_Abort_IT+0x1c8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a4c      	ldr	r2, [pc, #304]	@ (8001d68 <HAL_DMA_Abort_IT+0x1cc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	@ (8001d6c <HAL_DMA_Abort_IT+0x1d0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a49      	ldr	r2, [pc, #292]	@ (8001d70 <HAL_DMA_Abort_IT+0x1d4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a47      	ldr	r2, [pc, #284]	@ (8001d74 <HAL_DMA_Abort_IT+0x1d8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_DMA_Abort_IT+0xc8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a46      	ldr	r2, [pc, #280]	@ (8001d78 <HAL_DMA_Abort_IT+0x1dc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_DMA_Abort_IT+0xcc>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_DMA_Abort_IT+0xce>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8086 	beq.w	8001d7c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8001d3c <HAL_DMA_Abort_IT+0x1a0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d04a      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2e      	ldr	r2, [pc, #184]	@ (8001d40 <HAL_DMA_Abort_IT+0x1a4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d045      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2c      	ldr	r2, [pc, #176]	@ (8001d44 <HAL_DMA_Abort_IT+0x1a8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d040      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <HAL_DMA_Abort_IT+0x1ac>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d03b      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a29      	ldr	r2, [pc, #164]	@ (8001d4c <HAL_DMA_Abort_IT+0x1b0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d036      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a28      	ldr	r2, [pc, #160]	@ (8001d50 <HAL_DMA_Abort_IT+0x1b4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d031      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a26      	ldr	r2, [pc, #152]	@ (8001d54 <HAL_DMA_Abort_IT+0x1b8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d02c      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a25      	ldr	r2, [pc, #148]	@ (8001d58 <HAL_DMA_Abort_IT+0x1bc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d027      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a23      	ldr	r2, [pc, #140]	@ (8001d5c <HAL_DMA_Abort_IT+0x1c0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d022      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a22      	ldr	r2, [pc, #136]	@ (8001d60 <HAL_DMA_Abort_IT+0x1c4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d01d      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a20      	ldr	r2, [pc, #128]	@ (8001d64 <HAL_DMA_Abort_IT+0x1c8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a1f      	ldr	r2, [pc, #124]	@ (8001d68 <HAL_DMA_Abort_IT+0x1cc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d013      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d6c <HAL_DMA_Abort_IT+0x1d0>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <HAL_DMA_Abort_IT+0x1d4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1a      	ldr	r2, [pc, #104]	@ (8001d74 <HAL_DMA_Abort_IT+0x1d8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_DMA_Abort_IT+0x17c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a19      	ldr	r2, [pc, #100]	@ (8001d78 <HAL_DMA_Abort_IT+0x1dc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d108      	bne.n	8001d2a <HAL_DMA_Abort_IT+0x18e>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e178      	b.n	800201c <HAL_DMA_Abort_IT+0x480>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e16f      	b.n	800201c <HAL_DMA_Abort_IT+0x480>
 8001d3c:	40020010 	.word	0x40020010
 8001d40:	40020028 	.word	0x40020028
 8001d44:	40020040 	.word	0x40020040
 8001d48:	40020058 	.word	0x40020058
 8001d4c:	40020070 	.word	0x40020070
 8001d50:	40020088 	.word	0x40020088
 8001d54:	400200a0 	.word	0x400200a0
 8001d58:	400200b8 	.word	0x400200b8
 8001d5c:	40020410 	.word	0x40020410
 8001d60:	40020428 	.word	0x40020428
 8001d64:	40020440 	.word	0x40020440
 8001d68:	40020458 	.word	0x40020458
 8001d6c:	40020470 	.word	0x40020470
 8001d70:	40020488 	.word	0x40020488
 8001d74:	400204a0 	.word	0x400204a0
 8001d78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 020e 	bic.w	r2, r2, #14
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a6c      	ldr	r2, [pc, #432]	@ (8001f44 <HAL_DMA_Abort_IT+0x3a8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d04a      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6b      	ldr	r2, [pc, #428]	@ (8001f48 <HAL_DMA_Abort_IT+0x3ac>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d045      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a69      	ldr	r2, [pc, #420]	@ (8001f4c <HAL_DMA_Abort_IT+0x3b0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d040      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a68      	ldr	r2, [pc, #416]	@ (8001f50 <HAL_DMA_Abort_IT+0x3b4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d03b      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a66      	ldr	r2, [pc, #408]	@ (8001f54 <HAL_DMA_Abort_IT+0x3b8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d036      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a65      	ldr	r2, [pc, #404]	@ (8001f58 <HAL_DMA_Abort_IT+0x3bc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d031      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a63      	ldr	r2, [pc, #396]	@ (8001f5c <HAL_DMA_Abort_IT+0x3c0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02c      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a62      	ldr	r2, [pc, #392]	@ (8001f60 <HAL_DMA_Abort_IT+0x3c4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d027      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a60      	ldr	r2, [pc, #384]	@ (8001f64 <HAL_DMA_Abort_IT+0x3c8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d022      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5f      	ldr	r2, [pc, #380]	@ (8001f68 <HAL_DMA_Abort_IT+0x3cc>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d01d      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f6c <HAL_DMA_Abort_IT+0x3d0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d018      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5c      	ldr	r2, [pc, #368]	@ (8001f70 <HAL_DMA_Abort_IT+0x3d4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d013      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <HAL_DMA_Abort_IT+0x3d8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00e      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a59      	ldr	r2, [pc, #356]	@ (8001f78 <HAL_DMA_Abort_IT+0x3dc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d009      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a57      	ldr	r2, [pc, #348]	@ (8001f7c <HAL_DMA_Abort_IT+0x3e0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d004      	beq.n	8001e2c <HAL_DMA_Abort_IT+0x290>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a56      	ldr	r2, [pc, #344]	@ (8001f80 <HAL_DMA_Abort_IT+0x3e4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d108      	bne.n	8001e3e <HAL_DMA_Abort_IT+0x2a2>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0201 	bic.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e007      	b.n	8001e4e <HAL_DMA_Abort_IT+0x2b2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0201 	bic.w	r2, r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3c      	ldr	r2, [pc, #240]	@ (8001f44 <HAL_DMA_Abort_IT+0x3a8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d072      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f48 <HAL_DMA_Abort_IT+0x3ac>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d06d      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a39      	ldr	r2, [pc, #228]	@ (8001f4c <HAL_DMA_Abort_IT+0x3b0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d068      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a37      	ldr	r2, [pc, #220]	@ (8001f50 <HAL_DMA_Abort_IT+0x3b4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d063      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a36      	ldr	r2, [pc, #216]	@ (8001f54 <HAL_DMA_Abort_IT+0x3b8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d05e      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a34      	ldr	r2, [pc, #208]	@ (8001f58 <HAL_DMA_Abort_IT+0x3bc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d059      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a33      	ldr	r2, [pc, #204]	@ (8001f5c <HAL_DMA_Abort_IT+0x3c0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d054      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a31      	ldr	r2, [pc, #196]	@ (8001f60 <HAL_DMA_Abort_IT+0x3c4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d04f      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a30      	ldr	r2, [pc, #192]	@ (8001f64 <HAL_DMA_Abort_IT+0x3c8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d04a      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2e      	ldr	r2, [pc, #184]	@ (8001f68 <HAL_DMA_Abort_IT+0x3cc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d045      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f6c <HAL_DMA_Abort_IT+0x3d0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d040      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f70 <HAL_DMA_Abort_IT+0x3d4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d03b      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2a      	ldr	r2, [pc, #168]	@ (8001f74 <HAL_DMA_Abort_IT+0x3d8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d036      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a28      	ldr	r2, [pc, #160]	@ (8001f78 <HAL_DMA_Abort_IT+0x3dc>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d031      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a27      	ldr	r2, [pc, #156]	@ (8001f7c <HAL_DMA_Abort_IT+0x3e0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d02c      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a25      	ldr	r2, [pc, #148]	@ (8001f80 <HAL_DMA_Abort_IT+0x3e4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d027      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a24      	ldr	r2, [pc, #144]	@ (8001f84 <HAL_DMA_Abort_IT+0x3e8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d022      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a22      	ldr	r2, [pc, #136]	@ (8001f88 <HAL_DMA_Abort_IT+0x3ec>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01d      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a21      	ldr	r2, [pc, #132]	@ (8001f8c <HAL_DMA_Abort_IT+0x3f0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d018      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1f      	ldr	r2, [pc, #124]	@ (8001f90 <HAL_DMA_Abort_IT+0x3f4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f94 <HAL_DMA_Abort_IT+0x3f8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00e      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a1c      	ldr	r2, [pc, #112]	@ (8001f98 <HAL_DMA_Abort_IT+0x3fc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f9c <HAL_DMA_Abort_IT+0x400>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d004      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x3a2>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	@ (8001fa0 <HAL_DMA_Abort_IT+0x404>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d132      	bne.n	8001fa4 <HAL_DMA_Abort_IT+0x408>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e031      	b.n	8001fa6 <HAL_DMA_Abort_IT+0x40a>
 8001f42:	bf00      	nop
 8001f44:	40020010 	.word	0x40020010
 8001f48:	40020028 	.word	0x40020028
 8001f4c:	40020040 	.word	0x40020040
 8001f50:	40020058 	.word	0x40020058
 8001f54:	40020070 	.word	0x40020070
 8001f58:	40020088 	.word	0x40020088
 8001f5c:	400200a0 	.word	0x400200a0
 8001f60:	400200b8 	.word	0x400200b8
 8001f64:	40020410 	.word	0x40020410
 8001f68:	40020428 	.word	0x40020428
 8001f6c:	40020440 	.word	0x40020440
 8001f70:	40020458 	.word	0x40020458
 8001f74:	40020470 	.word	0x40020470
 8001f78:	40020488 	.word	0x40020488
 8001f7c:	400204a0 	.word	0x400204a0
 8001f80:	400204b8 	.word	0x400204b8
 8001f84:	58025408 	.word	0x58025408
 8001f88:	5802541c 	.word	0x5802541c
 8001f8c:	58025430 	.word	0x58025430
 8001f90:	58025444 	.word	0x58025444
 8001f94:	58025458 	.word	0x58025458
 8001f98:	5802546c 	.word	0x5802546c
 8001f9c:	58025480 	.word	0x58025480
 8001fa0:	58025494 	.word	0x58025494
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d028      	beq.n	8001ffc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbe:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001fd8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ff0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ffa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop

08002028 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002036:	b2db      	uxtb	r3, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	@ 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002052:	4b89      	ldr	r3, [pc, #548]	@ (8002278 <HAL_GPIO_Init+0x234>)
 8002054:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002056:	e194      	b.n	8002382 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8186 	beq.w	800237c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d005      	beq.n	8002088 <HAL_GPIO_Init+0x44>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d130      	bne.n	80020ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020be:	2201      	movs	r2, #1
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	091b      	lsrs	r3, r3, #4
 80020d4:	f003 0201 	and.w	r2, r3, #1
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d017      	beq.n	8002126 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d123      	bne.n	800217a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	08da      	lsrs	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3208      	adds	r2, #8
 800213a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	220f      	movs	r2, #15
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	08da      	lsrs	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3208      	adds	r2, #8
 8002174:	69b9      	ldr	r1, [r7, #24]
 8002176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2203      	movs	r2, #3
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0203 	and.w	r2, r3, #3
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80e0 	beq.w	800237c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021bc:	4b2f      	ldr	r3, [pc, #188]	@ (800227c <HAL_GPIO_Init+0x238>)
 80021be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021c2:	4a2e      	ldr	r2, [pc, #184]	@ (800227c <HAL_GPIO_Init+0x238>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021cc:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <HAL_GPIO_Init+0x238>)
 80021ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a29      	ldr	r2, [pc, #164]	@ (8002280 <HAL_GPIO_Init+0x23c>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_GPIO_Init+0x240>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d052      	beq.n	80022ac <HAL_GPIO_Init+0x268>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_GPIO_Init+0x244>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_GPIO_Init+0x22e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_GPIO_Init+0x248>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <HAL_GPIO_Init+0x22a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_GPIO_Init+0x24c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x226>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1c      	ldr	r2, [pc, #112]	@ (8002294 <HAL_GPIO_Init+0x250>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x222>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1b      	ldr	r2, [pc, #108]	@ (8002298 <HAL_GPIO_Init+0x254>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x21e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1a      	ldr	r2, [pc, #104]	@ (800229c <HAL_GPIO_Init+0x258>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x21a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <HAL_GPIO_Init+0x25c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x216>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a18      	ldr	r2, [pc, #96]	@ (80022a4 <HAL_GPIO_Init+0x260>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x212>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a17      	ldr	r2, [pc, #92]	@ (80022a8 <HAL_GPIO_Init+0x264>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x20e>
 800224e:	2309      	movs	r3, #9
 8002250:	e02d      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002252:	230a      	movs	r3, #10
 8002254:	e02b      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002256:	2308      	movs	r3, #8
 8002258:	e029      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800225a:	2307      	movs	r3, #7
 800225c:	e027      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800225e:	2306      	movs	r3, #6
 8002260:	e025      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002262:	2305      	movs	r3, #5
 8002264:	e023      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002266:	2304      	movs	r3, #4
 8002268:	e021      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800226a:	2303      	movs	r3, #3
 800226c:	e01f      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 800226e:	2302      	movs	r3, #2
 8002270:	e01d      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002272:	2301      	movs	r3, #1
 8002274:	e01b      	b.n	80022ae <HAL_GPIO_Init+0x26a>
 8002276:	bf00      	nop
 8002278:	58000080 	.word	0x58000080
 800227c:	58024400 	.word	0x58024400
 8002280:	58000400 	.word	0x58000400
 8002284:	58020000 	.word	0x58020000
 8002288:	58020400 	.word	0x58020400
 800228c:	58020800 	.word	0x58020800
 8002290:	58020c00 	.word	0x58020c00
 8002294:	58021000 	.word	0x58021000
 8002298:	58021400 	.word	0x58021400
 800229c:	58021800 	.word	0x58021800
 80022a0:	58021c00 	.word	0x58021c00
 80022a4:	58022000 	.word	0x58022000
 80022a8:	58022400 	.word	0x58022400
 80022ac:	2300      	movs	r3, #0
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	f002 0203 	and.w	r2, r2, #3
 80022b4:	0092      	lsls	r2, r2, #2
 80022b6:	4093      	lsls	r3, r2
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022be:	4938      	ldr	r1, [pc, #224]	@ (80023a0 <HAL_GPIO_Init+0x35c>)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3302      	adds	r3, #2
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa22 f303 	lsr.w	r3, r2, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	f47f ae63 	bne.w	8002058 <HAL_GPIO_Init+0x14>
  }
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	3724      	adds	r7, #36	@ 0x24
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	58000400 	.word	0x58000400

080023a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	460b      	mov	r3, r1
 80023ae:	807b      	strh	r3, [r7, #2]
 80023b0:	4613      	mov	r3, r2
 80023b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b4:	787b      	ldrb	r3, [r7, #1]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023c0:	e003      	b.n	80023ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023c2:	887b      	ldrh	r3, [r7, #2]
 80023c4:	041a      	lsls	r2, r3, #16
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e08b      	b.n	8002502 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe febc 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2224      	movs	r2, #36	@ 0x24
 8002408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0201 	bic.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e006      	b.n	8002460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800245e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d108      	bne.n	800247a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	e007      	b.n	800248a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HAL_I2C_Init+0x134>)
 8002496:	430b      	orrs	r3, r1
 8002498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69d9      	ldr	r1, [r3, #28]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1a      	ldr	r2, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	02008000 	.word	0x02008000

08002510 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	460b      	mov	r3, r1
 800251e:	817b      	strh	r3, [r7, #10]
 8002520:	4613      	mov	r3, r2
 8002522:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b20      	cmp	r3, #32
 800252e:	d17c      	bne.n	800262a <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800253a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800253e:	d101      	bne.n	8002544 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8002540:	2302      	movs	r3, #2
 8002542:	e073      	b.n	800262c <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_I2C_Master_Transmit_IT+0x42>
 800254e:	2302      	movs	r3, #2
 8002550:	e06c      	b.n	800262c <HAL_I2C_Master_Transmit_IT+0x11c>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2221      	movs	r2, #33	@ 0x21
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2210      	movs	r2, #16
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	893a      	ldrh	r2, [r7, #8]
 800257a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a2d      	ldr	r2, [pc, #180]	@ (8002634 <HAL_I2C_Master_Transmit_IT+0x124>)
 8002580:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a2c      	ldr	r2, [pc, #176]	@ (8002638 <HAL_I2C_Master_Transmit_IT+0x128>)
 8002586:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d906      	bls.n	80025a0 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	@ 0xff
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002598:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e007      	b.n	80025b0 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ae:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d024      	beq.n	8002602 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3301      	adds	r3, #1
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	8979      	ldrh	r1, [r7, #10]
 80025f4:	4b11      	ldr	r3, [pc, #68]	@ (800263c <HAL_I2C_Master_Transmit_IT+0x12c>)
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f001 fd60 	bl	80040c0 <I2C_TransferConfig>
 8002600:	e009      	b.n	8002616 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002606:	b2da      	uxtb	r2, r3
 8002608:	8979      	ldrh	r1, [r7, #10]
 800260a:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <HAL_I2C_Master_Transmit_IT+0x12c>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f001 fd55 	bl	80040c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800261e:	2101      	movs	r1, #1
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f001 fd7f 	bl	8004124 <I2C_Enable_IRQ>

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	ffff0000 	.word	0xffff0000
 8002638:	080028db 	.word	0x080028db
 800263c:	80002000 	.word	0x80002000

08002640 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	461a      	mov	r2, r3
 800264c:	460b      	mov	r3, r1
 800264e:	817b      	strh	r3, [r7, #10]
 8002650:	4613      	mov	r3, r2
 8002652:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	d153      	bne.n	8002708 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800266a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800266e:	d101      	bne.n	8002674 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e04a      	b.n	800270a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Master_Receive_IT+0x42>
 800267e:	2302      	movs	r3, #2
 8002680:	e043      	b.n	800270a <HAL_I2C_Master_Receive_IT+0xca>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2222      	movs	r2, #34	@ 0x22
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2210      	movs	r2, #16
 8002696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	893a      	ldrh	r2, [r7, #8]
 80026aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a19      	ldr	r2, [pc, #100]	@ (8002714 <HAL_I2C_Master_Receive_IT+0xd4>)
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_I2C_Master_Receive_IT+0xd8>)
 80026b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2bff      	cmp	r3, #255	@ 0xff
 80026c0:	d906      	bls.n	80026d0 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	22ff      	movs	r2, #255	@ 0xff
 80026c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80026c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e007      	b.n	80026e0 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80026da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026de:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	8979      	ldrh	r1, [r7, #10]
 80026e8:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_I2C_Master_Receive_IT+0xdc>)
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f001 fce6 	bl	80040c0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80026fc:	2102      	movs	r1, #2
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f001 fd10 	bl	8004124 <I2C_Enable_IRQ>

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	ffff0000 	.word	0xffff0000
 8002718:	080028db 	.word	0x080028db
 800271c:	80002400 	.word	0x80002400

08002720 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	68f9      	ldr	r1, [r7, #12]
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
  }
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00f      	beq.n	8002796 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002794:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00f      	beq.n	80027c0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	f043 0208 	orr.w	r2, r3, #8
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00f      	beq.n	80027ea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	f043 0202 	orr.w	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 030b 	and.w	r3, r3, #11
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80027fa:	68f9      	ldr	r1, [r7, #12]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 fb05 	bl	8003e0c <I2C_ITError>
  }
}
 8002802:	bf00      	nop
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	70fb      	strb	r3, [r7, #3]
 8002866:	4613      	mov	r3, r2
 8002868:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b088      	sub	sp, #32
 80028de:	af02      	add	r7, sp, #8
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <I2C_Master_ISR_IT+0x1e>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e113      	b.n	8002b20 <I2C_Master_ISR_IT+0x246>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2210      	movs	r2, #16
 800291a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	f043 0204 	orr.w	r2, r3, #4
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f001 fb86 	bl	800403a <I2C_Flush_TXDR>
 800292e:	e0e4      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	d022      	beq.n	8002980 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01d      	beq.n	8002980 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800297e:	e0bc      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d128      	bne.n	80029dc <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8002990:	2b00      	cmp	r3, #0
 8002992:	d023      	beq.n	80029dc <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01e      	beq.n	80029dc <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a8 	beq.w	8002afa <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80029da:	e08e      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d05c      	beq.n	8002aa0 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d057      	beq.n	8002aa0 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d040      	beq.n	8002a7c <I2C_Master_ISR_IT+0x1a2>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d13c      	bne.n	8002a7c <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a0e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2bff      	cmp	r3, #255	@ 0xff
 8002a18:	d90e      	bls.n	8002a38 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	22ff      	movs	r2, #255	@ 0xff
 8002a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	8a79      	ldrh	r1, [r7, #18]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f001 fb45 	bl	80040c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a36:	e032      	b.n	8002a9e <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a4a:	d00b      	beq.n	8002a64 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a50:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002a56:	8a79      	ldrh	r1, [r7, #18]
 8002a58:	2000      	movs	r0, #0
 8002a5a:	9000      	str	r0, [sp, #0]
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f001 fb2f 	bl	80040c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a62:	e01c      	b.n	8002a9e <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8a79      	ldrh	r1, [r7, #18]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f001 fb23 	bl	80040c0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a7a:	e010      	b.n	8002a9e <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a8a:	d003      	beq.n	8002a94 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fdb3 	bl	80035f8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a92:	e032      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a94:	2140      	movs	r1, #64	@ 0x40
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f001 f9b8 	bl	8003e0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a9c:	e02d      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
 8002a9e:	e02c      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d027      	beq.n	8002afa <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d022      	beq.n	8002afa <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d119      	bne.n	8002af2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002acc:	d015      	beq.n	8002afa <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ad6:	d108      	bne.n	8002aea <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	e007      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f000 fd84 	bl	80035f8 <I2C_ITMasterSeqCplt>
 8002af0:	e003      	b.n	8002afa <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002af2:	2140      	movs	r1, #64	@ 0x40
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f001 f989 	bl	8003e0c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fe0b 	bl	800372c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <I2C_Slave_ISR_IT+0x24>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0e2      	b.n	8002d12 <I2C_Slave_ISR_IT+0x1ea>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002b68:	6939      	ldr	r1, [r7, #16]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fea6 	bl	80038bc <I2C_ITSlaveCplt>
 8002b70:	e0ca      	b.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d04b      	beq.n	8002c14 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d046      	beq.n	8002c14 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d128      	bne.n	8002be2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b28      	cmp	r3, #40	@ 0x28
 8002b9a:	d108      	bne.n	8002bae <I2C_Slave_ISR_IT+0x86>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ba2:	d104      	bne.n	8002bae <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ba4:	6939      	ldr	r1, [r7, #16]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f001 f8dc 	bl	8003d64 <I2C_ITListenCplt>
 8002bac:	e031      	b.n	8002c12 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b29      	cmp	r3, #41	@ 0x29
 8002bb8:	d10e      	bne.n	8002bd8 <I2C_Slave_ISR_IT+0xb0>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bc0:	d00a      	beq.n	8002bd8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f001 fa35 	bl	800403a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fd4e 	bl	8003672 <I2C_ITSlaveSeqCplt>
 8002bd6:	e01c      	b.n	8002c12 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002be0:	e08f      	b.n	8002d02 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	f043 0204 	orr.w	r2, r3, #4
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <I2C_Slave_ISR_IT+0xdc>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c02:	d17e      	bne.n	8002d02 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c08:	4619      	mov	r1, r3
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f001 f8fe 	bl	8003e0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002c10:	e077      	b.n	8002d02 <I2C_Slave_ISR_IT+0x1da>
 8002c12:	e076      	b.n	8002d02 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d02f      	beq.n	8002c7e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d02a      	beq.n	8002c7e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d018      	beq.n	8002c64 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d14b      	bne.n	8002d06 <I2C_Slave_ISR_IT+0x1de>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c74:	d047      	beq.n	8002d06 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fcfb 	bl	8003672 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002c7c:	e043      	b.n	8002d06 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002c92:	6939      	ldr	r1, [r7, #16]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fc2b 	bl	80034f0 <I2C_ITAddrCplt>
 8002c9a:	e035      	b.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d030      	beq.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d02b      	beq.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d018      	beq.n	8002cec <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002cea:	e00d      	b.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cf2:	d002      	beq.n	8002cfa <I2C_Slave_ISR_IT+0x1d2>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fcb9 	bl	8003672 <I2C_ITSlaveSeqCplt>
 8002d00:	e002      	b.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002d06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b088      	sub	sp, #32
 8002d1e:	af02      	add	r7, sp, #8
 8002d20:	60f8      	str	r0, [r7, #12]
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <I2C_Master_ISR_DMA+0x1a>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e0d9      	b.n	8002ee8 <I2C_Master_ISR_DMA+0x1ce>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d016      	beq.n	8002d74 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002d64:	2120      	movs	r1, #32
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f001 f9dc 	bl	8004124 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f001 f964 	bl	800403a <I2C_Flush_TXDR>
 8002d72:	e0b4      	b.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d071      	beq.n	8002e62 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d06c      	beq.n	8002e62 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d96:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d04e      	beq.n	8002e40 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dae:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2bff      	cmp	r3, #255	@ 0xff
 8002db8:	d906      	bls.n	8002dc8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	22ff      	movs	r2, #255	@ 0xff
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002dc0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e010      	b.n	8002dea <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dda:	d003      	beq.n	8002de4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e002      	b.n	8002dea <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002de4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002de8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	8a79      	ldrh	r1, [r7, #18]
 8002df2:	2300      	movs	r3, #0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f001 f961 	bl	80040c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b22      	cmp	r3, #34	@ 0x22
 8002e1a:	d108      	bne.n	8002e2e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e2a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e2c:	e057      	b.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e3c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002e3e:	e04e      	b.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e4e:	d003      	beq.n	8002e58 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fbd1 	bl	80035f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002e56:	e042      	b.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e58:	2140      	movs	r1, #64	@ 0x40
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 ffd6 	bl	8003e0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002e60:	e03d      	b.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d028      	beq.n	8002ebe <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d023      	beq.n	8002ebe <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d119      	bne.n	8002eb4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e8e:	d025      	beq.n	8002edc <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e98:	d108      	bne.n	8002eac <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ea8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002eaa:	e017      	b.n	8002edc <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fba3 	bl	80035f8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002eb2:	e013      	b.n	8002edc <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002eb4:	2140      	movs	r1, #64	@ 0x40
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 ffa8 	bl	8003e0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ebc:	e00e      	b.n	8002edc <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fc29 	bl	800372c <I2C_ITMasterCplt>
 8002eda:	e000      	b.n	8002ede <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002edc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002efc:	4b8d      	ldr	r3, [pc, #564]	@ (8003134 <I2C_Mem_ISR_DMA+0x244>)
 8002efe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <I2C_Mem_ISR_DMA+0x1e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e10e      	b.n	800312c <I2C_Mem_ISR_DMA+0x23c>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d016      	beq.n	8002f4e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d011      	beq.n	8002f4e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002f3e:	2120      	movs	r1, #32
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f001 f8ef 	bl	8004124 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f001 f877 	bl	800403a <I2C_Flush_TXDR>
 8002f4c:	e0e9      	b.n	8003122 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f6a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f72:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f74:	e0d5      	b.n	8003122 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d05f      	beq.n	8003040 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d05a      	beq.n	8003040 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f001 f94d 	bl	800422c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002f92:	2110      	movs	r1, #16
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f001 f8c5 	bl	8004124 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d048      	beq.n	8003036 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2bff      	cmp	r3, #255	@ 0xff
 8002fac:	d910      	bls.n	8002fd0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	22ff      	movs	r2, #255	@ 0xff
 8002fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb8:	b299      	uxth	r1, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f001 f879 	bl	80040c0 <I2C_TransferConfig>
 8002fce:	e011      	b.n	8002ff4 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fde:	b299      	uxth	r1, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f001 f866 	bl	80040c0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	b29a      	uxth	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b22      	cmp	r3, #34	@ 0x22
 8003010:	d108      	bne.n	8003024 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003020:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003022:	e07e      	b.n	8003122 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003032:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003034:	e075      	b.n	8003122 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003036:	2140      	movs	r1, #64	@ 0x40
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fee7 	bl	8003e0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800303e:	e070      	b.n	8003122 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d05d      	beq.n	8003106 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003050:	2b00      	cmp	r3, #0
 8003052:	d058      	beq.n	8003106 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003054:	2101      	movs	r1, #1
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f001 f8e8 	bl	800422c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800305c:	2110      	movs	r1, #16
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f001 f860 	bl	8004124 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b22      	cmp	r3, #34	@ 0x22
 800306e:	d101      	bne.n	8003074 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003070:	4b31      	ldr	r3, [pc, #196]	@ (8003138 <I2C_Mem_ISR_DMA+0x248>)
 8003072:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	2bff      	cmp	r3, #255	@ 0xff
 800307c:	d910      	bls.n	80030a0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	22ff      	movs	r2, #255	@ 0xff
 8003082:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003088:	b299      	uxth	r1, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308e:	b2da      	uxtb	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f001 f811 	bl	80040c0 <I2C_TransferConfig>
 800309e:	e011      	b.n	80030c4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	b299      	uxth	r1, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fffe 	bl	80040c0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b22      	cmp	r3, #34	@ 0x22
 80030e0:	d108      	bne.n	80030f4 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f2:	e016      	b.n	8003122 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003102:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003104:	e00d      	b.n	8003122 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fb05 	bl	800372c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	80002000 	.word	0x80002000
 8003138:	80002400 	.word	0x80002400

0800313c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <I2C_Slave_ISR_DMA+0x24>
 800315c:	2302      	movs	r3, #2
 800315e:	e1c2      	b.n	80034e6 <I2C_Slave_ISR_DMA+0x3aa>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0320 	and.w	r3, r3, #32
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f000 fb9c 	bl	80038bc <I2C_ITSlaveCplt>
 8003184:	e1aa      	b.n	80034dc <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8197 	beq.w	80034c0 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 8191 	beq.w	80034c0 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 817f 	beq.w	80034b2 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d07b      	beq.n	80032b4 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d076      	beq.n	80032b4 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a74      	ldr	r2, [pc, #464]	@ (80033a0 <I2C_Slave_ISR_DMA+0x264>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d059      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a72      	ldr	r2, [pc, #456]	@ (80033a4 <I2C_Slave_ISR_DMA+0x268>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d053      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a70      	ldr	r2, [pc, #448]	@ (80033a8 <I2C_Slave_ISR_DMA+0x26c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04d      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a6e      	ldr	r2, [pc, #440]	@ (80033ac <I2C_Slave_ISR_DMA+0x270>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d047      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6c      	ldr	r2, [pc, #432]	@ (80033b0 <I2C_Slave_ISR_DMA+0x274>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d041      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a6a      	ldr	r2, [pc, #424]	@ (80033b4 <I2C_Slave_ISR_DMA+0x278>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d03b      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a68      	ldr	r2, [pc, #416]	@ (80033b8 <I2C_Slave_ISR_DMA+0x27c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d035      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a66      	ldr	r2, [pc, #408]	@ (80033bc <I2C_Slave_ISR_DMA+0x280>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02f      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a64      	ldr	r2, [pc, #400]	@ (80033c0 <I2C_Slave_ISR_DMA+0x284>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d029      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a62      	ldr	r2, [pc, #392]	@ (80033c4 <I2C_Slave_ISR_DMA+0x288>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d023      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a60      	ldr	r2, [pc, #384]	@ (80033c8 <I2C_Slave_ISR_DMA+0x28c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01d      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5e      	ldr	r2, [pc, #376]	@ (80033cc <I2C_Slave_ISR_DMA+0x290>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d017      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5c      	ldr	r2, [pc, #368]	@ (80033d0 <I2C_Slave_ISR_DMA+0x294>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d011      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a5a      	ldr	r2, [pc, #360]	@ (80033d4 <I2C_Slave_ISR_DMA+0x298>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00b      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a58      	ldr	r2, [pc, #352]	@ (80033d8 <I2C_Slave_ISR_DMA+0x29c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d005      	beq.n	8003286 <I2C_Slave_ISR_DMA+0x14a>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a56      	ldr	r2, [pc, #344]	@ (80033dc <I2C_Slave_ISR_DMA+0x2a0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d109      	bne.n	800329a <I2C_Slave_ISR_DMA+0x15e>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf0c      	ite	eq
 8003292:	2301      	moveq	r3, #1
 8003294:	2300      	movne	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	e008      	b.n	80032ac <I2C_Slave_ISR_DMA+0x170>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 80032b0:	2301      	movs	r3, #1
 80032b2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 809e 	beq.w	80033fa <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8098 	beq.w	80033fa <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a33      	ldr	r2, [pc, #204]	@ (80033a0 <I2C_Slave_ISR_DMA+0x264>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d059      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a31      	ldr	r2, [pc, #196]	@ (80033a4 <I2C_Slave_ISR_DMA+0x268>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d053      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a2f      	ldr	r2, [pc, #188]	@ (80033a8 <I2C_Slave_ISR_DMA+0x26c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04d      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2d      	ldr	r2, [pc, #180]	@ (80033ac <I2C_Slave_ISR_DMA+0x270>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d047      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2b      	ldr	r2, [pc, #172]	@ (80033b0 <I2C_Slave_ISR_DMA+0x274>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d041      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a29      	ldr	r2, [pc, #164]	@ (80033b4 <I2C_Slave_ISR_DMA+0x278>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d03b      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <I2C_Slave_ISR_DMA+0x27c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d035      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	@ (80033bc <I2C_Slave_ISR_DMA+0x280>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02f      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a23      	ldr	r2, [pc, #140]	@ (80033c0 <I2C_Slave_ISR_DMA+0x284>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d029      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a21      	ldr	r2, [pc, #132]	@ (80033c4 <I2C_Slave_ISR_DMA+0x288>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d023      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1f      	ldr	r2, [pc, #124]	@ (80033c8 <I2C_Slave_ISR_DMA+0x28c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01d      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1d      	ldr	r2, [pc, #116]	@ (80033cc <I2C_Slave_ISR_DMA+0x290>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d017      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	@ (80033d0 <I2C_Slave_ISR_DMA+0x294>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d011      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <I2C_Slave_ISR_DMA+0x298>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00b      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a17      	ldr	r2, [pc, #92]	@ (80033d8 <I2C_Slave_ISR_DMA+0x29c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d005      	beq.n	800338a <I2C_Slave_ISR_DMA+0x24e>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a15      	ldr	r2, [pc, #84]	@ (80033dc <I2C_Slave_ISR_DMA+0x2a0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d12a      	bne.n	80033e0 <I2C_Slave_ISR_DMA+0x2a4>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e029      	b.n	80033f2 <I2C_Slave_ISR_DMA+0x2b6>
 800339e:	bf00      	nop
 80033a0:	40020010 	.word	0x40020010
 80033a4:	40020028 	.word	0x40020028
 80033a8:	40020040 	.word	0x40020040
 80033ac:	40020058 	.word	0x40020058
 80033b0:	40020070 	.word	0x40020070
 80033b4:	40020088 	.word	0x40020088
 80033b8:	400200a0 	.word	0x400200a0
 80033bc:	400200b8 	.word	0x400200b8
 80033c0:	40020410 	.word	0x40020410
 80033c4:	40020428 	.word	0x40020428
 80033c8:	40020440 	.word	0x40020440
 80033cc:	40020458 	.word	0x40020458
 80033d0:	40020470 	.word	0x40020470
 80033d4:	40020488 	.word	0x40020488
 80033d8:	400204a0 	.word	0x400204a0
 80033dc:	400204b8 	.word	0x400204b8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d128      	bne.n	8003452 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b28      	cmp	r3, #40	@ 0x28
 800340a:	d108      	bne.n	800341e <I2C_Slave_ISR_DMA+0x2e2>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003412:	d104      	bne.n	800341e <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fca4 	bl	8003d64 <I2C_ITListenCplt>
 800341c:	e048      	b.n	80034b0 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b29      	cmp	r3, #41	@ 0x29
 8003428:	d10e      	bne.n	8003448 <I2C_Slave_ISR_DMA+0x30c>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003430:	d00a      	beq.n	8003448 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2210      	movs	r2, #16
 8003438:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fdfd 	bl	800403a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f916 	bl	8003672 <I2C_ITSlaveSeqCplt>
 8003446:	e033      	b.n	80034b0 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2210      	movs	r2, #16
 800344e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003450:	e034      	b.n	80034bc <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2210      	movs	r2, #16
 8003458:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f043 0204 	orr.w	r2, r3, #4
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <I2C_Slave_ISR_DMA+0x340>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800347a:	d11f      	bne.n	80034bc <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	2b21      	cmp	r3, #33	@ 0x21
 8003480:	d002      	beq.n	8003488 <I2C_Slave_ISR_DMA+0x34c>
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b29      	cmp	r3, #41	@ 0x29
 8003486:	d103      	bne.n	8003490 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2221      	movs	r2, #33	@ 0x21
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
 800348e:	e008      	b.n	80034a2 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b22      	cmp	r3, #34	@ 0x22
 8003494:	d002      	beq.n	800349c <I2C_Slave_ISR_DMA+0x360>
 8003496:	7dfb      	ldrb	r3, [r7, #23]
 8003498:	2b2a      	cmp	r3, #42	@ 0x2a
 800349a:	d102      	bne.n	80034a2 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2222      	movs	r2, #34	@ 0x22
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	4619      	mov	r1, r3
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fcaf 	bl	8003e0c <I2C_ITError>
      if (treatdmanack == 1U)
 80034ae:	e005      	b.n	80034bc <I2C_Slave_ISR_DMA+0x380>
 80034b0:	e004      	b.n	80034bc <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2210      	movs	r2, #16
 80034b8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034ba:	e00f      	b.n	80034dc <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 80034bc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034be:	e00d      	b.n	80034dc <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 f80a 	bl	80034f0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop

080034f0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003500:	b2db      	uxtb	r3, r3
 8003502:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003506:	2b28      	cmp	r3, #40	@ 0x28
 8003508:	d16a      	bne.n	80035e0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	b2db      	uxtb	r3, r3
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	b29b      	uxth	r3, r3
 8003524:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003528:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003536:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003544:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d138      	bne.n	80035c0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	09db      	lsrs	r3, r3, #7
 8003552:	b29a      	uxth	r2, r3
 8003554:	89bb      	ldrh	r3, [r7, #12]
 8003556:	4053      	eors	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	f003 0306 	and.w	r3, r3, #6
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11c      	bne.n	800359c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003574:	2b02      	cmp	r3, #2
 8003576:	d13b      	bne.n	80035f0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2208      	movs	r2, #8
 8003584:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800358e:	89ba      	ldrh	r2, [r7, #12]
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff f960 	bl	800285a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800359a:	e029      	b.n	80035f0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800359c:	893b      	ldrh	r3, [r7, #8]
 800359e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fe41 	bl	800422c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035b2:	89ba      	ldrh	r2, [r7, #12]
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff f94e 	bl	800285a <HAL_I2C_AddrCallback>
}
 80035be:	e017      	b.n	80035f0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fe31 	bl	800422c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035d2:	89ba      	ldrh	r2, [r7, #12]
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	4619      	mov	r1, r3
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff f93e 	bl	800285a <HAL_I2C_AddrCallback>
}
 80035de:	e007      	b.n	80035f0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80035f0:	bf00      	nop
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b21      	cmp	r3, #33	@ 0x21
 8003612:	d115      	bne.n	8003640 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2211      	movs	r2, #17
 8003620:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003628:	2101      	movs	r1, #1
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fdfe 	bl	800422c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff f8e6 	bl	800280a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800363e:	e014      	b.n	800366a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2212      	movs	r2, #18
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003654:	2102      	movs	r1, #2
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fde8 	bl	800422c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff f8da 	bl	800281e <HAL_I2C_MasterRxCpltCallback>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e00c      	b.n	80036c0 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b29      	cmp	r3, #41	@ 0x29
 80036ca:	d112      	bne.n	80036f2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2228      	movs	r2, #40	@ 0x28
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2221      	movs	r2, #33	@ 0x21
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036da:	2101      	movs	r1, #1
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fda5 	bl	800422c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff f8a1 	bl	8002832 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036f0:	e017      	b.n	8003722 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80036fc:	d111      	bne.n	8003722 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2228      	movs	r2, #40	@ 0x28
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2222      	movs	r2, #34	@ 0x22
 800370a:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800370c:	2102      	movs	r1, #2
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fd8c 	bl	800422c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7ff f892 	bl	8002846 <HAL_I2C_SlaveRxCpltCallback>
}
 8003722:	bf00      	nop
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2220      	movs	r2, #32
 8003740:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b21      	cmp	r3, #33	@ 0x21
 800374c:	d107      	bne.n	800375e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800374e:	2101      	movs	r1, #1
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fd6b 	bl	800422c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2211      	movs	r2, #17
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
 800375c:	e00c      	b.n	8003778 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b22      	cmp	r3, #34	@ 0x22
 8003768:	d106      	bne.n	8003778 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800376a:	2102      	movs	r1, #2
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fd5d 	bl	800422c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2212      	movs	r2, #18
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b4c      	ldr	r3, [pc, #304]	@ (80038b4 <I2C_ITMasterCplt+0x188>)
 8003784:	400b      	ands	r3, r1
 8003786:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a49      	ldr	r2, [pc, #292]	@ (80038b8 <I2C_ITMasterCplt+0x18c>)
 8003792:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2210      	movs	r2, #16
 80037a4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f043 0204 	orr.w	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b60      	cmp	r3, #96	@ 0x60
 80037bc:	d10a      	bne.n	80037d4 <I2C_ITMasterCplt+0xa8>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80037d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fc30 	bl	800403a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b60      	cmp	r3, #96	@ 0x60
 80037ea:	d002      	beq.n	80037f2 <I2C_ITMasterCplt+0xc6>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d006      	beq.n	8003800 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb07 	bl	8003e0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80037fe:	e054      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b21      	cmp	r3, #33	@ 0x21
 800380a:	d124      	bne.n	8003856 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b40      	cmp	r3, #64	@ 0x40
 8003824:	d10b      	bne.n	800383e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff f827 	bl	800288a <HAL_I2C_MemTxCpltCallback>
}
 800383c:	e035      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe ffdb 	bl	800280a <HAL_I2C_MasterTxCpltCallback>
}
 8003854:	e029      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b22      	cmp	r3, #34	@ 0x22
 8003860:	d123      	bne.n	80038aa <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d10b      	bne.n	8003894 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff f806 	bl	800289e <HAL_I2C_MemRxCpltCallback>
}
 8003892:	e00a      	b.n	80038aa <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fe ffba 	bl	800281e <HAL_I2C_MasterRxCpltCallback>
}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	fe00e800 	.word	0xfe00e800
 80038b8:	ffff0000 	.word	0xffff0000

080038bc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038de:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2220      	movs	r2, #32
 80038e6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	2b21      	cmp	r3, #33	@ 0x21
 80038ec:	d002      	beq.n	80038f4 <I2C_ITSlaveCplt+0x38>
 80038ee:	7afb      	ldrb	r3, [r7, #11]
 80038f0:	2b29      	cmp	r3, #41	@ 0x29
 80038f2:	d108      	bne.n	8003906 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80038f4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fc97 	bl	800422c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2221      	movs	r2, #33	@ 0x21
 8003902:	631a      	str	r2, [r3, #48]	@ 0x30
 8003904:	e019      	b.n	800393a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003906:	7afb      	ldrb	r3, [r7, #11]
 8003908:	2b22      	cmp	r3, #34	@ 0x22
 800390a:	d002      	beq.n	8003912 <I2C_ITSlaveCplt+0x56>
 800390c:	7afb      	ldrb	r3, [r7, #11]
 800390e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003910:	d108      	bne.n	8003924 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003912:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fc88 	bl	800422c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2222      	movs	r2, #34	@ 0x22
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
 8003922:	e00a      	b.n	800393a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003924:	7afb      	ldrb	r3, [r7, #11]
 8003926:	2b28      	cmp	r3, #40	@ 0x28
 8003928:	d107      	bne.n	800393a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800392a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fc7c 	bl	800422c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003948:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b7f      	ldr	r3, [pc, #508]	@ (8003b54 <I2C_ITSlaveCplt+0x298>)
 8003956:	400b      	ands	r3, r1
 8003958:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fb6d 	bl	800403a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d07a      	beq.n	8003a60 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003978:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8111 	beq.w	8003ba6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a73      	ldr	r2, [pc, #460]	@ (8003b58 <I2C_ITSlaveCplt+0x29c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d059      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a71      	ldr	r2, [pc, #452]	@ (8003b5c <I2C_ITSlaveCplt+0x2a0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d053      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6f      	ldr	r2, [pc, #444]	@ (8003b60 <I2C_ITSlaveCplt+0x2a4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d04d      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6d      	ldr	r2, [pc, #436]	@ (8003b64 <I2C_ITSlaveCplt+0x2a8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d047      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003b68 <I2C_ITSlaveCplt+0x2ac>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d041      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <I2C_ITSlaveCplt+0x2b0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a67      	ldr	r2, [pc, #412]	@ (8003b70 <I2C_ITSlaveCplt+0x2b4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d035      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a65      	ldr	r2, [pc, #404]	@ (8003b74 <I2C_ITSlaveCplt+0x2b8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d02f      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a63      	ldr	r2, [pc, #396]	@ (8003b78 <I2C_ITSlaveCplt+0x2bc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d029      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a61      	ldr	r2, [pc, #388]	@ (8003b7c <I2C_ITSlaveCplt+0x2c0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d023      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a5f      	ldr	r2, [pc, #380]	@ (8003b80 <I2C_ITSlaveCplt+0x2c4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003b84 <I2C_ITSlaveCplt+0x2c8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d017      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003b88 <I2C_ITSlaveCplt+0x2cc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d011      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a59      	ldr	r2, [pc, #356]	@ (8003b8c <I2C_ITSlaveCplt+0x2d0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00b      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a57      	ldr	r2, [pc, #348]	@ (8003b90 <I2C_ITSlaveCplt+0x2d4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d005      	beq.n	8003a44 <I2C_ITSlaveCplt+0x188>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a55      	ldr	r2, [pc, #340]	@ (8003b94 <I2C_ITSlaveCplt+0x2d8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d105      	bne.n	8003a50 <I2C_ITSlaveCplt+0x194>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	e004      	b.n	8003a5a <I2C_ITSlaveCplt+0x19e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8003a5e:	e0a2      	b.n	8003ba6 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 809d 	beq.w	8003ba6 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a7a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8090 	beq.w	8003ba6 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a32      	ldr	r2, [pc, #200]	@ (8003b58 <I2C_ITSlaveCplt+0x29c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d059      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a30      	ldr	r2, [pc, #192]	@ (8003b5c <I2C_ITSlaveCplt+0x2a0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d053      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b60 <I2C_ITSlaveCplt+0x2a4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d04d      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b64 <I2C_ITSlaveCplt+0x2a8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d047      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2a      	ldr	r2, [pc, #168]	@ (8003b68 <I2C_ITSlaveCplt+0x2ac>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d041      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a28      	ldr	r2, [pc, #160]	@ (8003b6c <I2C_ITSlaveCplt+0x2b0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d03b      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a26      	ldr	r2, [pc, #152]	@ (8003b70 <I2C_ITSlaveCplt+0x2b4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d035      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a24      	ldr	r2, [pc, #144]	@ (8003b74 <I2C_ITSlaveCplt+0x2b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d02f      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <I2C_ITSlaveCplt+0x2bc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d029      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a20      	ldr	r2, [pc, #128]	@ (8003b7c <I2C_ITSlaveCplt+0x2c0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d023      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <I2C_ITSlaveCplt+0x2c4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1c      	ldr	r2, [pc, #112]	@ (8003b84 <I2C_ITSlaveCplt+0x2c8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d017      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <I2C_ITSlaveCplt+0x2cc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d011      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a18      	ldr	r2, [pc, #96]	@ (8003b8c <I2C_ITSlaveCplt+0x2d0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00b      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <I2C_ITSlaveCplt+0x2d4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d005      	beq.n	8003b46 <I2C_ITSlaveCplt+0x28a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a14      	ldr	r2, [pc, #80]	@ (8003b94 <I2C_ITSlaveCplt+0x2d8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d128      	bne.n	8003b98 <I2C_ITSlaveCplt+0x2dc>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	e027      	b.n	8003ba2 <I2C_ITSlaveCplt+0x2e6>
 8003b52:	bf00      	nop
 8003b54:	fe00e800 	.word	0xfe00e800
 8003b58:	40020010 	.word	0x40020010
 8003b5c:	40020028 	.word	0x40020028
 8003b60:	40020040 	.word	0x40020040
 8003b64:	40020058 	.word	0x40020058
 8003b68:	40020070 	.word	0x40020070
 8003b6c:	40020088 	.word	0x40020088
 8003b70:	400200a0 	.word	0x400200a0
 8003b74:	400200b8 	.word	0x400200b8
 8003b78:	40020410 	.word	0x40020410
 8003b7c:	40020428 	.word	0x40020428
 8003b80:	40020440 	.word	0x40020440
 8003b84:	40020458 	.word	0x40020458
 8003b88:	40020470 	.word	0x40020470
 8003b8c:	40020488 	.word	0x40020488
 8003b90:	400204a0 	.word	0x400204a0
 8003b94:	400204b8 	.word	0x400204b8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d049      	beq.n	8003ca6 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d044      	beq.n	8003ca6 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d128      	bne.n	8003c78 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b28      	cmp	r3, #40	@ 0x28
 8003c30:	d108      	bne.n	8003c44 <I2C_ITSlaveCplt+0x388>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c38:	d104      	bne.n	8003c44 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c3a:	6979      	ldr	r1, [r7, #20]
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f891 	bl	8003d64 <I2C_ITListenCplt>
 8003c42:	e030      	b.n	8003ca6 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b29      	cmp	r3, #41	@ 0x29
 8003c4e:	d10e      	bne.n	8003c6e <I2C_ITSlaveCplt+0x3b2>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c56:	d00a      	beq.n	8003c6e <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f9ea 	bl	800403a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fd03 	bl	8003672 <I2C_ITSlaveSeqCplt>
 8003c6c:	e01b      	b.n	8003ca6 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2210      	movs	r2, #16
 8003c74:	61da      	str	r2, [r3, #28]
 8003c76:	e016      	b.n	8003ca6 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <I2C_ITSlaveCplt+0x3de>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c98:	d105      	bne.n	8003ca6 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f8b3 	bl	8003e0c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f8a2 	bl	8003e0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b28      	cmp	r3, #40	@ 0x28
 8003cd2:	d141      	bne.n	8003d58 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003cd4:	6979      	ldr	r1, [r7, #20]
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f844 	bl	8003d64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cdc:	e03c      	b.n	8003d58 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ce6:	d014      	beq.n	8003d12 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff fcc2 	bl	8003672 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d60 <I2C_ITSlaveCplt+0x4a4>)
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe fdb3 	bl	8002876 <HAL_I2C_ListenCpltCallback>
}
 8003d10:	e022      	b.n	8003d58 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b22      	cmp	r3, #34	@ 0x22
 8003d1c:	d10e      	bne.n	8003d3c <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7fe fd86 	bl	8002846 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d3a:	e00d      	b.n	8003d58 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fe fd6d 	bl	8002832 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d58:	bf00      	nop
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	ffff0000 	.word	0xffff0000

08003d64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a25      	ldr	r2, [pc, #148]	@ (8003e08 <I2C_ITListenCplt+0xa4>)
 8003d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d022      	beq.n	8003de0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	b2d2      	uxtb	r2, r2
 8003da6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d012      	beq.n	8003de0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	f043 0204 	orr.w	r2, r3, #4
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003de0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fa21 	bl	800422c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2210      	movs	r2, #16
 8003df0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe fd3b 	bl	8002876 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	ffff0000 	.word	0xffff0000

08003e0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e1c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a6d      	ldr	r2, [pc, #436]	@ (8003fe0 <I2C_ITError+0x1d4>)
 8003e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	2b28      	cmp	r3, #40	@ 0x28
 8003e42:	d005      	beq.n	8003e50 <I2C_ITError+0x44>
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b29      	cmp	r3, #41	@ 0x29
 8003e48:	d002      	beq.n	8003e50 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
 8003e4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e4e:	d10b      	bne.n	8003e68 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e50:	2103      	movs	r1, #3
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9ea 	bl	800422c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2228      	movs	r2, #40	@ 0x28
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a60      	ldr	r2, [pc, #384]	@ (8003fe4 <I2C_ITError+0x1d8>)
 8003e64:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e66:	e030      	b.n	8003eca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e68:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f9dd 	bl	800422c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8e1 	bl	800403a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b60      	cmp	r3, #96	@ 0x60
 8003e82:	d01f      	beq.n	8003ec4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d114      	bne.n	8003ec4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	f003 0310 	and.w	r3, r3, #16
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d109      	bne.n	8003ebc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2210      	movs	r2, #16
 8003eae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb4:	f043 0204 	orr.w	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d039      	beq.n	8003f4c <I2C_ITError+0x140>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b11      	cmp	r3, #17
 8003edc:	d002      	beq.n	8003ee4 <I2C_ITError+0xd8>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b21      	cmp	r3, #33	@ 0x21
 8003ee2:	d133      	bne.n	8003f4c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ef2:	d107      	bne.n	8003f04 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe f88d 	bl	8002028 <HAL_DMA_GetState>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d017      	beq.n	8003f44 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	4a33      	ldr	r2, [pc, #204]	@ (8003fe8 <I2C_ITError+0x1dc>)
 8003f1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fd fe37 	bl	8001b9c <HAL_DMA_Abort_IT>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d04d      	beq.n	8003fd0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f3e:	4610      	mov	r0, r2
 8003f40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f42:	e045      	b.n	8003fd0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f851 	bl	8003fec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f4a:	e041      	b.n	8003fd0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d039      	beq.n	8003fc8 <I2C_ITError+0x1bc>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b12      	cmp	r3, #18
 8003f58:	d002      	beq.n	8003f60 <I2C_ITError+0x154>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b22      	cmp	r3, #34	@ 0x22
 8003f5e:	d133      	bne.n	8003fc8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6e:	d107      	bne.n	8003f80 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe f84f 	bl	8002028 <HAL_DMA_GetState>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d017      	beq.n	8003fc0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f94:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <I2C_ITError+0x1dc>)
 8003f96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fd fdf9 	bl	8001b9c <HAL_DMA_Abort_IT>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d011      	beq.n	8003fd4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fbe:	e009      	b.n	8003fd4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f813 	bl	8003fec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fc6:	e005      	b.n	8003fd4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f80f 	bl	8003fec <I2C_TreatErrorCallback>
  }
}
 8003fce:	e002      	b.n	8003fd6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fd4:	bf00      	nop
}
 8003fd6:	bf00      	nop
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	ffff0000 	.word	0xffff0000
 8003fe4:	08002b29 	.word	0x08002b29
 8003fe8:	08004083 	.word	0x08004083

08003fec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b60      	cmp	r3, #96	@ 0x60
 8003ffe:	d10e      	bne.n	800401e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fe fc55 	bl	80028c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800401c:	e009      	b.n	8004032 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fe fc40 	bl	80028b2 <HAL_I2C_ErrorCallback>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d103      	bne.n	8004058 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2200      	movs	r2, #0
 8004056:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d007      	beq.n	8004076 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	619a      	str	r2, [r3, #24]
  }
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	2200      	movs	r2, #0
 800409e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ac:	2200      	movs	r2, #0
 80040ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f7ff ff9b 	bl	8003fec <I2C_TreatErrorCallback>
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	607b      	str	r3, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	817b      	strh	r3, [r7, #10]
 80040ce:	4613      	mov	r3, r2
 80040d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040d2:	897b      	ldrh	r3, [r7, #10]
 80040d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040d8:	7a7b      	ldrb	r3, [r7, #9]
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	0d5b      	lsrs	r3, r3, #21
 80040fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80040fe:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <I2C_TransferConfig+0x60>)
 8004100:	430b      	orrs	r3, r1
 8004102:	43db      	mvns	r3, r3
 8004104:	ea02 0103 	and.w	r1, r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004112:	bf00      	nop
 8004114:	371c      	adds	r7, #28
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	03ff63ff 	.word	0x03ff63ff

08004124 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004138:	4a39      	ldr	r2, [pc, #228]	@ (8004220 <I2C_Enable_IRQ+0xfc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d032      	beq.n	80041a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004142:	4a38      	ldr	r2, [pc, #224]	@ (8004224 <I2C_Enable_IRQ+0x100>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d02d      	beq.n	80041a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800414c:	4a36      	ldr	r2, [pc, #216]	@ (8004228 <I2C_Enable_IRQ+0x104>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d028      	beq.n	80041a4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004152:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004156:	2b00      	cmp	r3, #0
 8004158:	da03      	bge.n	8004162 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004160:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004172:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004184:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004186:	887b      	ldrh	r3, [r7, #2]
 8004188:	2b10      	cmp	r3, #16
 800418a:	d103      	bne.n	8004194 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004192:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	2b20      	cmp	r3, #32
 8004198:	d133      	bne.n	8004202 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f043 0320 	orr.w	r3, r3, #32
 80041a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041a2:	e02e      	b.n	8004202 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80041a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da03      	bge.n	80041b4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80041b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80041c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041c6:	887b      	ldrh	r3, [r7, #2]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80041d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d103      	bne.n	80041e6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80041e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041e6:	887b      	ldrh	r3, [r7, #2]
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d103      	bne.n	80041f4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80041f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80041f4:	887b      	ldrh	r3, [r7, #2]
 80041f6:	2b40      	cmp	r3, #64	@ 0x40
 80041f8:	d103      	bne.n	8004202 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004200:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6819      	ldr	r1, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	430a      	orrs	r2, r1
 8004210:	601a      	str	r2, [r3, #0]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	08002d1b 	.word	0x08002d1b
 8004224:	0800313d 	.word	0x0800313d
 8004228:	08002ef1 	.word	0x08002ef1

0800422c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800423c:	887b      	ldrh	r3, [r7, #2]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00f      	beq.n	8004266 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800424c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800425a:	2b28      	cmp	r3, #40	@ 0x28
 800425c:	d003      	beq.n	8004266 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004264:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004266:	887b      	ldrh	r3, [r7, #2]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00f      	beq.n	8004290 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004276:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004284:	2b28      	cmp	r3, #40	@ 0x28
 8004286:	d003      	beq.n	8004290 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800428e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004290:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004294:	2b00      	cmp	r3, #0
 8004296:	da03      	bge.n	80042a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800429e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80042a0:	887b      	ldrh	r3, [r7, #2]
 80042a2:	2b10      	cmp	r3, #16
 80042a4:	d103      	bne.n	80042ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80042ae:	887b      	ldrh	r3, [r7, #2]
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d103      	bne.n	80042bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f043 0320 	orr.w	r3, r3, #32
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80042bc:	887b      	ldrh	r3, [r7, #2]
 80042be:	2b40      	cmp	r3, #64	@ 0x40
 80042c0:	d103      	bne.n	80042ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6819      	ldr	r1, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	43da      	mvns	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	400a      	ands	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d138      	bne.n	8004370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004308:	2302      	movs	r3, #2
 800430a:	e032      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2224      	movs	r2, #36	@ 0x24
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800433a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6819      	ldr	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800437e:	b480      	push	{r7}
 8004380:	b085      	sub	sp, #20
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b20      	cmp	r3, #32
 8004392:	d139      	bne.n	8004408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800439e:	2302      	movs	r3, #2
 80043a0:	e033      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2224      	movs	r2, #36	@ 0x24
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0201 	bic.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e000      	b.n	800440a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004408:	2302      	movs	r3, #2
  }
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b086      	sub	sp, #24
 800441a:	af02      	add	r7, sp, #8
 800441c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0fe      	b.n	8004626 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fd f829 	bl	8001494 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2203      	movs	r2, #3
 8004446:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f005 febe 	bl	800a1d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	7c1a      	ldrb	r2, [r3, #16]
 800445c:	f88d 2000 	strb.w	r2, [sp]
 8004460:	3304      	adds	r3, #4
 8004462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004464:	f005 fe42 	bl	800a0ec <USB_CoreInit>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e0d5      	b.n	8004626 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2100      	movs	r1, #0
 8004480:	4618      	mov	r0, r3
 8004482:	f005 feb6 	bl	800a1f2 <USB_SetCurrentMode>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e0c6      	b.n	8004626 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e04a      	b.n	8004534 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3315      	adds	r3, #21
 80044ae:	2201      	movs	r2, #1
 80044b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044b2:	7bfa      	ldrb	r2, [r7, #15]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	3314      	adds	r3, #20
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	b298      	uxth	r0, r3
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	332e      	adds	r3, #46	@ 0x2e
 80044da:	4602      	mov	r2, r0
 80044dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	440b      	add	r3, r1
 80044ec:	3318      	adds	r3, #24
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	331c      	adds	r3, #28
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3320      	adds	r3, #32
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800451a:	7bfa      	ldrb	r2, [r7, #15]
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	4613      	mov	r3, r2
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4413      	add	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	440b      	add	r3, r1
 8004528:	3324      	adds	r3, #36	@ 0x24
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	3301      	adds	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	791b      	ldrb	r3, [r3, #4]
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	429a      	cmp	r2, r3
 800453c:	d3af      	bcc.n	800449e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
 8004542:	e044      	b.n	80045ce <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004544:	7bfa      	ldrb	r2, [r7, #15]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800455a:	7bfa      	ldrb	r2, [r7, #15]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800456c:	7bfa      	ldrb	r2, [r7, #15]
 800456e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004570:	7bfa      	ldrb	r2, [r7, #15]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004582:	2200      	movs	r2, #0
 8004584:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004586:	7bfa      	ldrb	r2, [r7, #15]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800459c:	7bfa      	ldrb	r2, [r7, #15]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	3301      	adds	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	791b      	ldrb	r3, [r3, #4]
 80045d2:	7bfa      	ldrb	r2, [r7, #15]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d3b5      	bcc.n	8004544 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7c1a      	ldrb	r2, [r3, #16]
 80045e0:	f88d 2000 	strb.w	r2, [sp]
 80045e4:	3304      	adds	r3, #4
 80045e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e8:	f005 fe50 	bl	800a28c <USB_DevInit>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e013      	b.n	8004626 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	7b1b      	ldrb	r3, [r3, #12]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d102      	bne.n	800461a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f80b 	bl	8004630 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f006 f80b 	bl	800a63a <USB_DevDisconnect>

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800465e:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <HAL_PCDEx_ActivateLPM+0x44>)
 8004660:	4313      	orrs	r3, r2
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3714      	adds	r7, #20
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	10000003 	.word	0x10000003

08004678 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d00a      	beq.n	80046a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800468c:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d001      	beq.n	800469e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e01f      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e01d      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046a2:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f023 0207 	bic.w	r2, r3, #7
 80046aa:	490f      	ldr	r1, [pc, #60]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046b2:	f7fd f927 	bl	8001904 <HAL_GetTick>
 80046b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046b8:	e009      	b.n	80046ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046ba:	f7fd f923 	bl	8001904 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046c8:	d901      	bls.n	80046ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e007      	b.n	80046de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046ce:	4b06      	ldr	r3, [pc, #24]	@ (80046e8 <HAL_PWREx_ConfigSupply+0x70>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046da:	d1ee      	bne.n	80046ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	58024800 	.word	0x58024800

080046ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a04      	ldr	r2, [pc, #16]	@ (8004708 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046fa:	60d3      	str	r3, [r2, #12]
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	58024800 	.word	0x58024800

0800470c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	@ 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f000 bc48 	b.w	8004fb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8088 	beq.w	800483e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800472e:	4b99      	ldr	r3, [pc, #612]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004738:	4b96      	ldr	r3, [pc, #600]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800473a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004740:	2b10      	cmp	r3, #16
 8004742:	d007      	beq.n	8004754 <HAL_RCC_OscConfig+0x48>
 8004744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004746:	2b18      	cmp	r3, #24
 8004748:	d111      	bne.n	800476e <HAL_RCC_OscConfig+0x62>
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d10c      	bne.n	800476e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004754:	4b8f      	ldr	r3, [pc, #572]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d06d      	beq.n	800483c <HAL_RCC_OscConfig+0x130>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d169      	bne.n	800483c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	f000 bc21 	b.w	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x7a>
 8004778:	4b86      	ldr	r3, [pc, #536]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a85      	ldr	r2, [pc, #532]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800477e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	e02e      	b.n	80047e4 <HAL_RCC_OscConfig+0xd8>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10c      	bne.n	80047a8 <HAL_RCC_OscConfig+0x9c>
 800478e:	4b81      	ldr	r3, [pc, #516]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a80      	ldr	r2, [pc, #512]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	4b7e      	ldr	r3, [pc, #504]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a7d      	ldr	r2, [pc, #500]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e01d      	b.n	80047e4 <HAL_RCC_OscConfig+0xd8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0xc0>
 80047b2:	4b78      	ldr	r3, [pc, #480]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a77      	ldr	r2, [pc, #476]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	4b75      	ldr	r3, [pc, #468]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a74      	ldr	r2, [pc, #464]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0xd8>
 80047cc:	4b71      	ldr	r3, [pc, #452]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a70      	ldr	r2, [pc, #448]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b6e      	ldr	r3, [pc, #440]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a6d      	ldr	r2, [pc, #436]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80047de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d013      	beq.n	8004814 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fd f88a 	bl	8001904 <HAL_GetTick>
 80047f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f4:	f7fd f886 	bl	8001904 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b64      	cmp	r3, #100	@ 0x64
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e3d4      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004806:	4b63      	ldr	r3, [pc, #396]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0xe8>
 8004812:	e014      	b.n	800483e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fd f876 	bl	8001904 <HAL_GetTick>
 8004818:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800481c:	f7fd f872 	bl	8001904 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b64      	cmp	r3, #100	@ 0x64
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e3c0      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800482e:	4b59      	ldr	r3, [pc, #356]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x110>
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800483c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 80ca 	beq.w	80049e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800484c:	4b51      	ldr	r3, [pc, #324]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004854:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004856:	4b4f      	ldr	r3, [pc, #316]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d007      	beq.n	8004872 <HAL_RCC_OscConfig+0x166>
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	2b18      	cmp	r3, #24
 8004866:	d156      	bne.n	8004916 <HAL_RCC_OscConfig+0x20a>
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d151      	bne.n	8004916 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004872:	4b48      	ldr	r3, [pc, #288]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <HAL_RCC_OscConfig+0x17e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e392      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800488a:	4b42      	ldr	r3, [pc, #264]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 0219 	bic.w	r2, r3, #25
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	493f      	ldr	r1, [pc, #252]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004898:	4313      	orrs	r3, r2
 800489a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489c:	f7fd f832 	bl	8001904 <HAL_GetTick>
 80048a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a4:	f7fd f82e 	bl	8001904 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e37c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048b6:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c2:	f7fd f84f 	bl	8001964 <HAL_GetREVID>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d817      	bhi.n	8004900 <HAL_RCC_OscConfig+0x1f4>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b40      	cmp	r3, #64	@ 0x40
 80048d6:	d108      	bne.n	80048ea <HAL_RCC_OscConfig+0x1de>
 80048d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80048e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80048e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048e8:	e07a      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	031b      	lsls	r3, r3, #12
 80048f8:	4926      	ldr	r1, [pc, #152]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fe:	e06f      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004900:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	4921      	ldr	r1, [pc, #132]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004910:	4313      	orrs	r3, r2
 8004912:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004914:	e064      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d047      	beq.n	80049ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800491e:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 0219 	bic.w	r2, r3, #25
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	491a      	ldr	r1, [pc, #104]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004930:	f7fc ffe8 	bl	8001904 <HAL_GetTick>
 8004934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004938:	f7fc ffe4 	bl	8001904 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e332      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800494a:	4b12      	ldr	r3, [pc, #72]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	f7fd f805 	bl	8001964 <HAL_GetREVID>
 800495a:	4603      	mov	r3, r0
 800495c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004960:	4293      	cmp	r3, r2
 8004962:	d819      	bhi.n	8004998 <HAL_RCC_OscConfig+0x28c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b40      	cmp	r3, #64	@ 0x40
 800496a:	d108      	bne.n	800497e <HAL_RCC_OscConfig+0x272>
 800496c:	4b09      	ldr	r3, [pc, #36]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004974:	4a07      	ldr	r2, [pc, #28]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800497a:	6053      	str	r3, [r2, #4]
 800497c:	e030      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
 800497e:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	031b      	lsls	r3, r3, #12
 800498c:	4901      	ldr	r1, [pc, #4]	@ (8004994 <HAL_RCC_OscConfig+0x288>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
 8004992:	e025      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
 8004994:	58024400 	.word	0x58024400
 8004998:	4b9a      	ldr	r3, [pc, #616]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	4997      	ldr	r1, [pc, #604]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
 80049ac:	e018      	b.n	80049e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ae:	4b95      	ldr	r3, [pc, #596]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a94      	ldr	r2, [pc, #592]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fc ffa3 	bl	8001904 <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c2:	f7fc ff9f 	bl	8001904 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e2ed      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049d4:	4b8b      	ldr	r3, [pc, #556]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f0      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80a9 	beq.w	8004b40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ee:	4b85      	ldr	r3, [pc, #532]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f8:	4b82      	ldr	r3, [pc, #520]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d007      	beq.n	8004a14 <HAL_RCC_OscConfig+0x308>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b18      	cmp	r3, #24
 8004a08:	d13a      	bne.n	8004a80 <HAL_RCC_OscConfig+0x374>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d135      	bne.n	8004a80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a14:	4b7b      	ldr	r3, [pc, #492]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_OscConfig+0x320>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b80      	cmp	r3, #128	@ 0x80
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e2c1      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a2c:	f7fc ff9a 	bl	8001964 <HAL_GetREVID>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d817      	bhi.n	8004a6a <HAL_RCC_OscConfig+0x35e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d108      	bne.n	8004a54 <HAL_RCC_OscConfig+0x348>
 8004a42:	4b70      	ldr	r3, [pc, #448]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a52:	e075      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a54:	4b6b      	ldr	r3, [pc, #428]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	069b      	lsls	r3, r3, #26
 8004a62:	4968      	ldr	r1, [pc, #416]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a68:	e06a      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a6a:	4b66      	ldr	r3, [pc, #408]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	4962      	ldr	r1, [pc, #392]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a7e:	e05f      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d042      	beq.n	8004b0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a88:	4b5e      	ldr	r3, [pc, #376]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5d      	ldr	r2, [pc, #372]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fc ff36 	bl	8001904 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a9c:	f7fc ff32 	bl	8001904 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e280      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004aae:	4b55      	ldr	r3, [pc, #340]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aba:	f7fc ff53 	bl	8001964 <HAL_GetREVID>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d817      	bhi.n	8004af8 <HAL_RCC_OscConfig+0x3ec>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d108      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x3d6>
 8004ad0:	4b4c      	ldr	r3, [pc, #304]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ada:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ade:	6053      	str	r3, [r2, #4]
 8004ae0:	e02e      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
 8004ae2:	4b48      	ldr	r3, [pc, #288]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	069b      	lsls	r3, r3, #26
 8004af0:	4944      	ldr	r1, [pc, #272]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
 8004af6:	e023      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
 8004af8:	4b42      	ldr	r3, [pc, #264]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	493f      	ldr	r1, [pc, #252]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60cb      	str	r3, [r1, #12]
 8004b0c:	e018      	b.n	8004b40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3c      	ldr	r2, [pc, #240]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7fc fef3 	bl	8001904 <HAL_GetTick>
 8004b1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b22:	f7fc feef 	bl	8001904 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e23d      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b34:	4b33      	ldr	r3, [pc, #204]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d036      	beq.n	8004bba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d019      	beq.n	8004b88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b54:	4b2b      	ldr	r3, [pc, #172]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b58:	4a2a      	ldr	r2, [pc, #168]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fc fed0 	bl	8001904 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fc fecc 	bl	8001904 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e21a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b7a:	4b22      	ldr	r3, [pc, #136]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x45c>
 8004b86:	e018      	b.n	8004bba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b88:	4b1e      	ldr	r3, [pc, #120]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b94:	f7fc feb6 	bl	8001904 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9c:	f7fc feb2 	bl	8001904 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e200      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bae:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d039      	beq.n	8004c3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01c      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004bda:	f7fc fe93 	bl	8001904 <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004be2:	f7fc fe8f 	bl	8001904 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e1dd      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004bf4:	4b03      	ldr	r3, [pc, #12]	@ (8004c04 <HAL_RCC_OscConfig+0x4f8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x4d6>
 8004c00:	e01b      	b.n	8004c3a <HAL_RCC_OscConfig+0x52e>
 8004c02:	bf00      	nop
 8004c04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c08:	4b9b      	ldr	r3, [pc, #620]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a9a      	ldr	r2, [pc, #616]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c14:	f7fc fe76 	bl	8001904 <HAL_GetTick>
 8004c18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c1c:	f7fc fe72 	bl	8001904 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1c0      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c2e:	4b92      	ldr	r3, [pc, #584]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8081 	beq.w	8004d4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c48:	4b8c      	ldr	r3, [pc, #560]	@ (8004e7c <HAL_RCC_OscConfig+0x770>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a8b      	ldr	r2, [pc, #556]	@ (8004e7c <HAL_RCC_OscConfig+0x770>)
 8004c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c54:	f7fc fe56 	bl	8001904 <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5c:	f7fc fe52 	bl	8001904 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b64      	cmp	r3, #100	@ 0x64
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e1a0      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c6e:	4b83      	ldr	r3, [pc, #524]	@ (8004e7c <HAL_RCC_OscConfig+0x770>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f0      	beq.n	8004c5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d106      	bne.n	8004c90 <HAL_RCC_OscConfig+0x584>
 8004c82:	4b7d      	ldr	r3, [pc, #500]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	4a7c      	ldr	r2, [pc, #496]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8e:	e02d      	b.n	8004cec <HAL_RCC_OscConfig+0x5e0>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10c      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x5a6>
 8004c98:	4b77      	ldr	r3, [pc, #476]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9c:	4a76      	ldr	r2, [pc, #472]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca4:	4b74      	ldr	r3, [pc, #464]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca8:	4a73      	ldr	r2, [pc, #460]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004caa:	f023 0304 	bic.w	r3, r3, #4
 8004cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb0:	e01c      	b.n	8004cec <HAL_RCC_OscConfig+0x5e0>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x5c8>
 8004cba:	4b6f      	ldr	r3, [pc, #444]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	4a6e      	ldr	r2, [pc, #440]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	4a6b      	ldr	r2, [pc, #428]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0x5e0>
 8004cd4:	4b68      	ldr	r3, [pc, #416]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd8:	4a67      	ldr	r2, [pc, #412]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce0:	4b65      	ldr	r3, [pc, #404]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce4:	4a64      	ldr	r2, [pc, #400]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004ce6:	f023 0304 	bic.w	r3, r3, #4
 8004cea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf4:	f7fc fe06 	bl	8001904 <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fc fe02 	bl	8001904 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e14e      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d12:	4b59      	ldr	r3, [pc, #356]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ee      	beq.n	8004cfc <HAL_RCC_OscConfig+0x5f0>
 8004d1e:	e014      	b.n	8004d4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d20:	f7fc fdf0 	bl	8001904 <HAL_GetTick>
 8004d24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d26:	e00a      	b.n	8004d3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d28:	f7fc fdec 	bl	8001904 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e138      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1ee      	bne.n	8004d28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 812d 	beq.w	8004fae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d54:	4b48      	ldr	r3, [pc, #288]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d5c:	2b18      	cmp	r3, #24
 8004d5e:	f000 80bd 	beq.w	8004edc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	f040 809e 	bne.w	8004ea8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6c:	4b42      	ldr	r3, [pc, #264]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a41      	ldr	r2, [pc, #260]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d78:	f7fc fdc4 	bl	8001904 <HAL_GetTick>
 8004d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d80:	f7fc fdc0 	bl	8001904 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e10e      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d92:	4b39      	ldr	r3, [pc, #228]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1f0      	bne.n	8004d80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d9e:	4b36      	ldr	r3, [pc, #216]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004da0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004da2:	4b37      	ldr	r3, [pc, #220]	@ (8004e80 <HAL_RCC_OscConfig+0x774>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004dae:	0112      	lsls	r2, r2, #4
 8004db0:	430a      	orrs	r2, r1
 8004db2:	4931      	ldr	r1, [pc, #196]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	025b      	lsls	r3, r3, #9
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de0:	3b01      	subs	r3, #1
 8004de2:	061b      	lsls	r3, r3, #24
 8004de4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004de8:	4923      	ldr	r1, [pc, #140]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004dee:	4b22      	ldr	r3, [pc, #136]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	4a21      	ldr	r2, [pc, #132]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dfe:	4b21      	ldr	r3, [pc, #132]	@ (8004e84 <HAL_RCC_OscConfig+0x778>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e06:	00d2      	lsls	r2, r2, #3
 8004e08:	491b      	ldr	r1, [pc, #108]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	f023 020c 	bic.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	4917      	ldr	r1, [pc, #92]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e20:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	f023 0202 	bic.w	r2, r3, #2
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2c:	4912      	ldr	r1, [pc, #72]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e32:	4b11      	ldr	r3, [pc, #68]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a10      	ldr	r2, [pc, #64]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4a0d      	ldr	r2, [pc, #52]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e56:	4b08      	ldr	r3, [pc, #32]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	4a07      	ldr	r2, [pc, #28]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e62:	4b05      	ldr	r3, [pc, #20]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a04      	ldr	r2, [pc, #16]	@ (8004e78 <HAL_RCC_OscConfig+0x76c>)
 8004e68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6e:	f7fc fd49 	bl	8001904 <HAL_GetTick>
 8004e72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e74:	e011      	b.n	8004e9a <HAL_RCC_OscConfig+0x78e>
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
 8004e7c:	58024800 	.word	0x58024800
 8004e80:	fffffc0c 	.word	0xfffffc0c
 8004e84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e88:	f7fc fd3c 	bl	8001904 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e08a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e9a:	4b47      	ldr	r3, [pc, #284]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0x77c>
 8004ea6:	e082      	b.n	8004fae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea8:	4b43      	ldr	r3, [pc, #268]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a42      	ldr	r2, [pc, #264]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004eae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fc fd26 	bl	8001904 <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fc fd22 	bl	8001904 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e070      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ece:	4b3a      	ldr	r3, [pc, #232]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x7b0>
 8004eda:	e068      	b.n	8004fae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004edc:	4b36      	ldr	r3, [pc, #216]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ee2:	4b35      	ldr	r3, [pc, #212]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d031      	beq.n	8004f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0203 	and.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d12a      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d122      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d11a      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	0a5b      	lsrs	r3, r3, #9
 8004f22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d111      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	0e1b      	lsrs	r3, r3, #24
 8004f46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e02b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f58:	4b17      	ldr	r3, [pc, #92]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5c:	08db      	lsrs	r3, r3, #3
 8004f5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d01f      	beq.n	8004fae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f6e:	4b12      	ldr	r3, [pc, #72]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	4a11      	ldr	r2, [pc, #68]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f7a:	f7fc fcc3 	bl	8001904 <HAL_GetTick>
 8004f7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f80:	bf00      	nop
 8004f82:	f7fc fcbf 	bl	8001904 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d0f9      	beq.n	8004f82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004f90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f92:	4b0a      	ldr	r3, [pc, #40]	@ (8004fbc <HAL_RCC_OscConfig+0x8b0>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f9a:	00d2      	lsls	r2, r2, #3
 8004f9c:	4906      	ldr	r1, [pc, #24]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004fa2:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a04      	ldr	r2, [pc, #16]	@ (8004fb8 <HAL_RCC_OscConfig+0x8ac>)
 8004fa8:	f043 0301 	orr.w	r3, r3, #1
 8004fac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3730      	adds	r7, #48	@ 0x30
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	ffff0007 	.word	0xffff0007

08004fc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e19c      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b8a      	ldr	r3, [pc, #552]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d910      	bls.n	8005004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b87      	ldr	r3, [pc, #540]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 020f 	bic.w	r2, r3, #15
 8004fea:	4985      	ldr	r1, [pc, #532]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b83      	ldr	r3, [pc, #524]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e184      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d010      	beq.n	8005032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	4b7b      	ldr	r3, [pc, #492]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800501c:	429a      	cmp	r2, r3
 800501e:	d908      	bls.n	8005032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005020:	4b78      	ldr	r3, [pc, #480]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	4975      	ldr	r1, [pc, #468]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 800502e:	4313      	orrs	r3, r2
 8005030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	4b70      	ldr	r3, [pc, #448]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800504a:	429a      	cmp	r2, r3
 800504c:	d908      	bls.n	8005060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800504e:	4b6d      	ldr	r3, [pc, #436]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	496a      	ldr	r1, [pc, #424]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 800505c:	4313      	orrs	r3, r2
 800505e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d010      	beq.n	800508e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	4b64      	ldr	r3, [pc, #400]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005078:	429a      	cmp	r2, r3
 800507a:	d908      	bls.n	800508e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800507c:	4b61      	ldr	r3, [pc, #388]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	495e      	ldr	r1, [pc, #376]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 800508a:	4313      	orrs	r3, r2
 800508c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	4b59      	ldr	r3, [pc, #356]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d908      	bls.n	80050bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050aa:	4b56      	ldr	r3, [pc, #344]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	4953      	ldr	r1, [pc, #332]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d908      	bls.n	80050ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b4a      	ldr	r3, [pc, #296]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f023 020f 	bic.w	r2, r3, #15
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4947      	ldr	r1, [pc, #284]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d055      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050f6:	4b43      	ldr	r3, [pc, #268]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	4940      	ldr	r1, [pc, #256]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005104:	4313      	orrs	r3, r2
 8005106:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d107      	bne.n	8005120 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005110:	4b3c      	ldr	r3, [pc, #240]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d121      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0f6      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d107      	bne.n	8005138 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005128:	4b36      	ldr	r3, [pc, #216]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d115      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0ea      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005140:	4b30      	ldr	r3, [pc, #192]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0de      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005150:	4b2c      	ldr	r3, [pc, #176]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0d6      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005160:	4b28      	ldr	r3, [pc, #160]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f023 0207 	bic.w	r2, r3, #7
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4925      	ldr	r1, [pc, #148]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 800516e:	4313      	orrs	r3, r2
 8005170:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005172:	f7fc fbc7 	bl	8001904 <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005178:	e00a      	b.n	8005190 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517a:	f7fc fbc3 	bl	8001904 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0be      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005190:	4b1c      	ldr	r3, [pc, #112]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	429a      	cmp	r2, r3
 80051a0:	d1eb      	bne.n	800517a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d010      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	4b14      	ldr	r3, [pc, #80]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d208      	bcs.n	80051d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051be:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	490e      	ldr	r1, [pc, #56]	@ (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d214      	bcs.n	8005208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b08      	ldr	r3, [pc, #32]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 020f 	bic.w	r2, r3, #15
 80051e6:	4906      	ldr	r1, [pc, #24]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b04      	ldr	r3, [pc, #16]	@ (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e086      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
 8005200:	52002000 	.word	0x52002000
 8005204:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d010      	beq.n	8005236 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	4b3f      	ldr	r3, [pc, #252]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005220:	429a      	cmp	r2, r3
 8005222:	d208      	bcs.n	8005236 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005224:	4b3c      	ldr	r3, [pc, #240]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	4939      	ldr	r1, [pc, #228]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005232:	4313      	orrs	r3, r2
 8005234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d010      	beq.n	8005264 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	4b34      	ldr	r3, [pc, #208]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800524e:	429a      	cmp	r2, r3
 8005250:	d208      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005252:	4b31      	ldr	r3, [pc, #196]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	492e      	ldr	r1, [pc, #184]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005260:	4313      	orrs	r3, r2
 8005262:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	4b28      	ldr	r3, [pc, #160]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800527c:	429a      	cmp	r2, r3
 800527e:	d208      	bcs.n	8005292 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005280:	4b25      	ldr	r3, [pc, #148]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	4922      	ldr	r1, [pc, #136]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 800528e:	4313      	orrs	r3, r2
 8005290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d010      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d208      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	4917      	ldr	r1, [pc, #92]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052c0:	f000 f834 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b14      	ldr	r3, [pc, #80]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	4912      	ldr	r1, [pc, #72]	@ (800531c <HAL_RCC_ClockConfig+0x35c>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052de:	4b0e      	ldr	r3, [pc, #56]	@ (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	4a0d      	ldr	r2, [pc, #52]	@ (800531c <HAL_RCC_ClockConfig+0x35c>)
 80052e8:	5cd3      	ldrb	r3, [r2, r3]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
 80052f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005320 <HAL_RCC_ClockConfig+0x360>)
 80052f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005324 <HAL_RCC_ClockConfig+0x364>)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80052fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <HAL_RCC_ClockConfig+0x368>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fc fab4 	bl	8001870 <HAL_InitTick>
 8005308:	4603      	mov	r3, r0
 800530a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	0800b260 	.word	0x0800b260
 8005320:	24000004 	.word	0x24000004
 8005324:	24000000 	.word	0x24000000
 8005328:	24000008 	.word	0x24000008

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	@ 0x24
 8005330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005332:	4bb3      	ldr	r3, [pc, #716]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800533a:	2b18      	cmp	r3, #24
 800533c:	f200 8155 	bhi.w	80055ea <HAL_RCC_GetSysClockFreq+0x2be>
 8005340:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080055eb 	.word	0x080055eb
 8005350:	080055eb 	.word	0x080055eb
 8005354:	080055eb 	.word	0x080055eb
 8005358:	080055eb 	.word	0x080055eb
 800535c:	080055eb 	.word	0x080055eb
 8005360:	080055eb 	.word	0x080055eb
 8005364:	080055eb 	.word	0x080055eb
 8005368:	080053d3 	.word	0x080053d3
 800536c:	080055eb 	.word	0x080055eb
 8005370:	080055eb 	.word	0x080055eb
 8005374:	080055eb 	.word	0x080055eb
 8005378:	080055eb 	.word	0x080055eb
 800537c:	080055eb 	.word	0x080055eb
 8005380:	080055eb 	.word	0x080055eb
 8005384:	080055eb 	.word	0x080055eb
 8005388:	080053d9 	.word	0x080053d9
 800538c:	080055eb 	.word	0x080055eb
 8005390:	080055eb 	.word	0x080055eb
 8005394:	080055eb 	.word	0x080055eb
 8005398:	080055eb 	.word	0x080055eb
 800539c:	080055eb 	.word	0x080055eb
 80053a0:	080055eb 	.word	0x080055eb
 80053a4:	080055eb 	.word	0x080055eb
 80053a8:	080053df 	.word	0x080053df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ac:	4b94      	ldr	r3, [pc, #592]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d009      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b8:	4b91      	ldr	r3, [pc, #580]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	4a90      	ldr	r2, [pc, #576]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053ca:	e111      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053cc:	4b8d      	ldr	r3, [pc, #564]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053ce:	61bb      	str	r3, [r7, #24]
      break;
 80053d0:	e10e      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053d2:	4b8d      	ldr	r3, [pc, #564]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053d4:	61bb      	str	r3, [r7, #24]
      break;
 80053d6:	e10b      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053d8:	4b8c      	ldr	r3, [pc, #560]	@ (800560c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053da:	61bb      	str	r3, [r7, #24]
      break;
 80053dc:	e108      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053de:	4b88      	ldr	r3, [pc, #544]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80053e8:	4b85      	ldr	r3, [pc, #532]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053f4:	4b82      	ldr	r3, [pc, #520]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053fe:	4b80      	ldr	r3, [pc, #512]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005402:	08db      	lsrs	r3, r3, #3
 8005404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80e1 	beq.w	80055e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b02      	cmp	r3, #2
 8005426:	f000 8083 	beq.w	8005530 <HAL_RCC_GetSysClockFreq+0x204>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b02      	cmp	r3, #2
 800542e:	f200 80a1 	bhi.w	8005574 <HAL_RCC_GetSysClockFreq+0x248>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x114>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d056      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800543e:	e099      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005440:	4b6f      	ldr	r3, [pc, #444]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02d      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800544c:	4b6c      	ldr	r3, [pc, #432]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	08db      	lsrs	r3, r3, #3
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	4a6b      	ldr	r2, [pc, #428]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005476:	4b62      	ldr	r3, [pc, #392]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005486:	ed97 6a02 	vldr	s12, [r7, #8]
 800548a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800548e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800549a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80054a6:	e087      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005614 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ba:	4b51      	ldr	r3, [pc, #324]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ea:	e065      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005618 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054fe:	4b40      	ldr	r3, [pc, #256]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005512:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800552e:	e043      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800561c <HAL_RCC_GetSysClockFreq+0x2f0>
 800553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005542:	4b2f      	ldr	r3, [pc, #188]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a02 	vldr	s12, [r7, #8]
 8005556:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005572:	e021      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005618 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005586:	4b1e      	ldr	r3, [pc, #120]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005596:	ed97 6a02 	vldr	s12, [r7, #8]
 800559a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055b8:	4b11      	ldr	r3, [pc, #68]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055bc:	0a5b      	lsrs	r3, r3, #9
 80055be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055c2:	3301      	adds	r3, #1
 80055c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055dc:	ee17 3a90 	vmov	r3, s15
 80055e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80055e2:	e005      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
      break;
 80055e8:	e002      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80055ea:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055ec:	61bb      	str	r3, [r7, #24]
      break;
 80055ee:	bf00      	nop
  }

  return sysclockfreq;
 80055f0:	69bb      	ldr	r3, [r7, #24]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3724      	adds	r7, #36	@ 0x24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	58024400 	.word	0x58024400
 8005604:	03d09000 	.word	0x03d09000
 8005608:	003d0900 	.word	0x003d0900
 800560c:	007a1200 	.word	0x007a1200
 8005610:	46000000 	.word	0x46000000
 8005614:	4c742400 	.word	0x4c742400
 8005618:	4a742400 	.word	0x4a742400
 800561c:	4af42400 	.word	0x4af42400

08005620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005626:	f7ff fe81 	bl	800532c <HAL_RCC_GetSysClockFreq>
 800562a:	4602      	mov	r2, r0
 800562c:	4b10      	ldr	r3, [pc, #64]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x50>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	490f      	ldr	r1, [pc, #60]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x54>)
 8005638:	5ccb      	ldrb	r3, [r1, r3]
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005644:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x50>)
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	4a09      	ldr	r2, [pc, #36]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x54>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	4a07      	ldr	r2, [pc, #28]	@ (8005678 <HAL_RCC_GetHCLKFreq+0x58>)
 800565c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800565e:	4a07      	ldr	r2, [pc, #28]	@ (800567c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005664:	4b04      	ldr	r3, [pc, #16]	@ (8005678 <HAL_RCC_GetHCLKFreq+0x58>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	58024400 	.word	0x58024400
 8005674:	0800b260 	.word	0x0800b260
 8005678:	24000004 	.word	0x24000004
 800567c:	24000000 	.word	0x24000000

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005684:	f7ff ffcc 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4904      	ldr	r1, [pc, #16]	@ (80056a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	58024400 	.word	0x58024400
 80056a8:	0800b260 	.word	0x0800b260

080056ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80056b0:	f7ff ffb6 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	@ (80056d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	@ (80056d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	58024400 	.word	0x58024400
 80056d4:	0800b260 	.word	0x0800b260

080056d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b0ca      	sub	sp, #296	@ 0x128
 80056de:	af00      	add	r7, sp, #0
 80056e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80056fc:	2500      	movs	r5, #0
 80056fe:	ea54 0305 	orrs.w	r3, r4, r5
 8005702:	d049      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800570a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800570e:	d02f      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005710:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005714:	d828      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005716:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800571a:	d01a      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800571c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005720:	d822      	bhi.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800572a:	d007      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800572c:	e01c      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800572e:	4bb8      	ldr	r3, [pc, #736]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	4ab7      	ldr	r2, [pc, #732]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800573a:	e01a      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	3308      	adds	r3, #8
 8005742:	2102      	movs	r1, #2
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fc8f 	bl	8007068 <RCCEx_PLL2_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005750:	e00f      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005756:	3328      	adds	r3, #40	@ 0x28
 8005758:	2102      	movs	r1, #2
 800575a:	4618      	mov	r0, r3
 800575c:	f001 fd36 	bl	80071cc <RCCEx_PLL3_Config>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005766:	e004      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800576e:	e000      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800577a:	4ba5      	ldr	r3, [pc, #660]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800577c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800577e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005788:	4aa1      	ldr	r2, [pc, #644]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800578a:	430b      	orrs	r3, r1
 800578c:	6513      	str	r3, [r2, #80]	@ 0x50
 800578e:	e003      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80057a4:	f04f 0900 	mov.w	r9, #0
 80057a8:	ea58 0309 	orrs.w	r3, r8, r9
 80057ac:	d047      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d82a      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057b8:	a201      	add	r2, pc, #4	@ (adr r2, 80057c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d5 	.word	0x080057d5
 80057c4:	080057e3 	.word	0x080057e3
 80057c8:	080057f9 	.word	0x080057f9
 80057cc:	08005817 	.word	0x08005817
 80057d0:	08005817 	.word	0x08005817
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	4a8d      	ldr	r2, [pc, #564]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057e0:	e01a      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	3308      	adds	r3, #8
 80057e8:	2100      	movs	r1, #0
 80057ea:	4618      	mov	r0, r3
 80057ec:	f001 fc3c 	bl	8007068 <RCCEx_PLL2_Config>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057f6:	e00f      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	3328      	adds	r3, #40	@ 0x28
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fce3 	bl	80071cc <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800580c:	e004      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005820:	4b7b      	ldr	r3, [pc, #492]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005824:	f023 0107 	bic.w	r1, r3, #7
 8005828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582e:	4a78      	ldr	r2, [pc, #480]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005830:	430b      	orrs	r3, r1
 8005832:	6513      	str	r3, [r2, #80]	@ 0x50
 8005834:	e003      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800583a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800583e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800584a:	f04f 0b00 	mov.w	fp, #0
 800584e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005852:	d04c      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585e:	d030      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005864:	d829      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005866:	2bc0      	cmp	r3, #192	@ 0xc0
 8005868:	d02d      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800586a:	2bc0      	cmp	r3, #192	@ 0xc0
 800586c:	d825      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800586e:	2b80      	cmp	r3, #128	@ 0x80
 8005870:	d018      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005872:	2b80      	cmp	r3, #128	@ 0x80
 8005874:	d821      	bhi.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800587a:	2b40      	cmp	r3, #64	@ 0x40
 800587c:	d007      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800587e:	e01c      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005880:	4b63      	ldr	r3, [pc, #396]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	4a62      	ldr	r2, [pc, #392]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005886:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800588a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800588c:	e01c      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800588e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005892:	3308      	adds	r3, #8
 8005894:	2100      	movs	r1, #0
 8005896:	4618      	mov	r0, r3
 8005898:	f001 fbe6 	bl	8007068 <RCCEx_PLL2_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058a2:	e011      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a8:	3328      	adds	r3, #40	@ 0x28
 80058aa:	2100      	movs	r1, #0
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 fc8d 	bl	80071cc <RCCEx_PLL3_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058b8:	e006      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c0:	e002      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058c2:	bf00      	nop
 80058c4:	e000      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10a      	bne.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80058d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058de:	4a4c      	ldr	r2, [pc, #304]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058e0:	430b      	orrs	r3, r1
 80058e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80058ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80058fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005904:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005908:	460b      	mov	r3, r1
 800590a:	4313      	orrs	r3, r2
 800590c:	d053      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005916:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800591a:	d035      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800591c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005920:	d82e      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005922:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005926:	d031      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005928:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800592c:	d828      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800592e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005932:	d01a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005938:	d822      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800593e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005942:	d007      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005944:	e01c      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005946:	4b32      	ldr	r3, [pc, #200]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	4a31      	ldr	r2, [pc, #196]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800594c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005950:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005952:	e01c      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	3308      	adds	r3, #8
 800595a:	2100      	movs	r1, #0
 800595c:	4618      	mov	r0, r3
 800595e:	f001 fb83 	bl	8007068 <RCCEx_PLL2_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005968:	e011      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800596a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596e:	3328      	adds	r3, #40	@ 0x28
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f001 fc2a 	bl	80071cc <RCCEx_PLL3_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800597e:	e006      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005986:	e002      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800598c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005996:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80059a6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ac:	e003      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80059c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059c6:	2300      	movs	r3, #0
 80059c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80059cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80059d0:	460b      	mov	r3, r1
 80059d2:	4313      	orrs	r3, r2
 80059d4:	d056      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e2:	d038      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80059e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e8:	d831      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059ee:	d034      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80059f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059f4:	d82b      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059fa:	d01d      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80059fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a00:	d825      	bhi.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a0a:	d00a      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a0c:	e01f      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a0e:	bf00      	nop
 8005a10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a14:	4ba2      	ldr	r3, [pc, #648]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	4aa1      	ldr	r2, [pc, #644]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a20:	e01c      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	3308      	adds	r3, #8
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 fb1c 	bl	8007068 <RCCEx_PLL2_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a36:	e011      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3c:	3328      	adds	r3, #40	@ 0x28
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 fbc3 	bl	80071cc <RCCEx_PLL3_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a4c:	e006      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a54:	e002      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a56:	bf00      	nop
 8005a58:	e000      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10b      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a64:	4b8e      	ldr	r3, [pc, #568]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a74:	4a8a      	ldr	r2, [pc, #552]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a76:	430b      	orrs	r3, r1
 8005a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a7a:	e003      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a94:	2300      	movs	r3, #0
 8005a96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d03a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aaa:	2b30      	cmp	r3, #48	@ 0x30
 8005aac:	d01f      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005aae:	2b30      	cmp	r3, #48	@ 0x30
 8005ab0:	d819      	bhi.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d00c      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d815      	bhi.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d019      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d111      	bne.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac2:	4b77      	ldr	r3, [pc, #476]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	4a76      	ldr	r2, [pc, #472]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005acc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ace:	e011      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	2102      	movs	r1, #2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 fac5 	bl	8007068 <RCCEx_PLL2_Config>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ae4:	e006      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aec:	e002      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005aee:	bf00      	nop
 8005af0:	e000      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005afc:	4b68      	ldr	r3, [pc, #416]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b0a:	4a65      	ldr	r2, [pc, #404]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b0c:	430b      	orrs	r3, r1
 8005b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b10:	e003      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4313      	orrs	r3, r2
 8005b38:	d051      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b44:	d035      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b4a:	d82e      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b50:	d031      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b56:	d828      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5c:	d01a      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b62:	d822      	bhi.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6c:	d007      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b6e:	e01c      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b70:	4b4b      	ldr	r3, [pc, #300]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	4a4a      	ldr	r2, [pc, #296]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b7c:	e01c      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b82:	3308      	adds	r3, #8
 8005b84:	2100      	movs	r1, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fa6e 	bl	8007068 <RCCEx_PLL2_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b92:	e011      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b98:	3328      	adds	r3, #40	@ 0x28
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 fb15 	bl	80071cc <RCCEx_PLL3_Config>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ba8:	e006      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bb0:	e002      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bb2:	bf00      	nop
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bc0:	4b37      	ldr	r3, [pc, #220]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bce:	4a34      	ldr	r2, [pc, #208]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bd4:	e003      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005bea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005bf4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	d056      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c08:	d033      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c0e:	d82c      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c14:	d02f      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c1a:	d826      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c20:	d02b      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c26:	d820      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c2c:	d012      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c32:	d81a      	bhi.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d022      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c3c:	d115      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	3308      	adds	r3, #8
 8005c44:	2101      	movs	r1, #1
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fa0e 	bl	8007068 <RCCEx_PLL2_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c52:	e015      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c58:	3328      	adds	r3, #40	@ 0x28
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fab5 	bl	80071cc <RCCEx_PLL3_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c68:	e00a      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c70:	e006      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c72:	bf00      	nop
 8005c74:	e004      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c76:	bf00      	nop
 8005c78:	e002      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c7a:	bf00      	nop
 8005c7c:	e000      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10d      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c96:	4a02      	ldr	r2, [pc, #8]	@ (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c9c:	e006      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c9e:	bf00      	nop
 8005ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	d055      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd8:	d033      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cde:	d82c      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce4:	d02f      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cea:	d826      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cf0:	d02b      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005cf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cf6:	d820      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cfc:	d012      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005cfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d02:	d81a      	bhi.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d022      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d0c:	d115      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d12:	3308      	adds	r3, #8
 8005d14:	2101      	movs	r1, #1
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f9a6 	bl	8007068 <RCCEx_PLL2_Config>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d22:	e015      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d28:	3328      	adds	r3, #40	@ 0x28
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fa4d 	bl	80071cc <RCCEx_PLL3_Config>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d38:	e00a      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d40:	e006      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d42:	bf00      	nop
 8005d44:	e004      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d46:	bf00      	nop
 8005d48:	e002      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d4a:	bf00      	nop
 8005d4c:	e000      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d58:	4ba3      	ldr	r3, [pc, #652]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d68:	4a9f      	ldr	r2, [pc, #636]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6a:	430b      	orrs	r3, r1
 8005d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d6e:	e003      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	d037      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da2:	d00e      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da8:	d816      	bhi.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d018      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005dae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db2:	d111      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db4:	4b8c      	ldr	r3, [pc, #560]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	4a8b      	ldr	r2, [pc, #556]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005dc0:	e00f      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	2101      	movs	r1, #1
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f001 f94c 	bl	8007068 <RCCEx_PLL2_Config>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005dd6:	e004      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dde:	e000      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dea:	4b7f      	ldr	r3, [pc, #508]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df8:	4a7b      	ldr	r2, [pc, #492]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dfa:	430b      	orrs	r3, r1
 8005dfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dfe:	e003      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e1e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4313      	orrs	r3, r2
 8005e26:	d039      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d81c      	bhi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e32:	a201      	add	r2, pc, #4	@ (adr r2, 8005e38 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e49 	.word	0x08005e49
 8005e40:	08005e57 	.word	0x08005e57
 8005e44:	08005e75 	.word	0x08005e75
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e48:	4b67      	ldr	r3, [pc, #412]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4c:	4a66      	ldr	r2, [pc, #408]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e54:	e00f      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 f902 	bl	8007068 <RCCEx_PLL2_Config>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e6a:	e004      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	f023 0103 	bic.w	r1, r3, #3
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e8c:	4a56      	ldr	r2, [pc, #344]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e92:	e003      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ea8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005eac:	2300      	movs	r3, #0
 8005eae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005eb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f000 809f 	beq.w	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ebe:	4b4b      	ldr	r3, [pc, #300]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eca:	f7fb fd1b 	bl	8001904 <HAL_GetTick>
 8005ece:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed2:	e00b      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ed4:	f7fb fd16 	bl	8001904 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b64      	cmp	r3, #100	@ 0x64
 8005ee2:	d903      	bls.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eea:	e005      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eec:	4b3f      	ldr	r3, [pc, #252]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ed      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d179      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f00:	4b39      	ldr	r3, [pc, #228]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f02:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f0c:	4053      	eors	r3, r2
 8005f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d015      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f16:	4b34      	ldr	r3, [pc, #208]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f1e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f22:	4b31      	ldr	r3, [pc, #196]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f26:	4a30      	ldr	r2, [pc, #192]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f2c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f32:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f38:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f40:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f4e:	d118      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f50:	f7fb fcd8 	bl	8001904 <HAL_GetTick>
 8005f54:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f58:	e00d      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5a:	f7fb fcd3 	bl	8001904 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d903      	bls.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005f6e:	2303      	movs	r3, #3
 8005f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005f74:	e005      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f76:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0eb      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d129      	bne.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f9a:	d10e      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005f9c:	4b12      	ldr	r3, [pc, #72]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fac:	091a      	lsrs	r2, r3, #4
 8005fae:	4b10      	ldr	r3, [pc, #64]	@ (8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6113      	str	r3, [r2, #16]
 8005fb8:	e005      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005fba:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005fc4:	6113      	str	r3, [r2, #16]
 8005fc6:	4b08      	ldr	r3, [pc, #32]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd6:	4a04      	ldr	r2, [pc, #16]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fdc:	e00e      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005fe6:	e009      	b.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	58024800 	.word	0x58024800
 8005ff0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006004:	f002 0301 	and.w	r3, r2, #1
 8006008:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800600c:	2300      	movs	r3, #0
 800600e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006012:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006016:	460b      	mov	r3, r1
 8006018:	4313      	orrs	r3, r2
 800601a:	f000 8089 	beq.w	8006130 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006024:	2b28      	cmp	r3, #40	@ 0x28
 8006026:	d86b      	bhi.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006028:	a201      	add	r2, pc, #4	@ (adr r2, 8006030 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602e:	bf00      	nop
 8006030:	08006109 	.word	0x08006109
 8006034:	08006101 	.word	0x08006101
 8006038:	08006101 	.word	0x08006101
 800603c:	08006101 	.word	0x08006101
 8006040:	08006101 	.word	0x08006101
 8006044:	08006101 	.word	0x08006101
 8006048:	08006101 	.word	0x08006101
 800604c:	08006101 	.word	0x08006101
 8006050:	080060d5 	.word	0x080060d5
 8006054:	08006101 	.word	0x08006101
 8006058:	08006101 	.word	0x08006101
 800605c:	08006101 	.word	0x08006101
 8006060:	08006101 	.word	0x08006101
 8006064:	08006101 	.word	0x08006101
 8006068:	08006101 	.word	0x08006101
 800606c:	08006101 	.word	0x08006101
 8006070:	080060eb 	.word	0x080060eb
 8006074:	08006101 	.word	0x08006101
 8006078:	08006101 	.word	0x08006101
 800607c:	08006101 	.word	0x08006101
 8006080:	08006101 	.word	0x08006101
 8006084:	08006101 	.word	0x08006101
 8006088:	08006101 	.word	0x08006101
 800608c:	08006101 	.word	0x08006101
 8006090:	08006109 	.word	0x08006109
 8006094:	08006101 	.word	0x08006101
 8006098:	08006101 	.word	0x08006101
 800609c:	08006101 	.word	0x08006101
 80060a0:	08006101 	.word	0x08006101
 80060a4:	08006101 	.word	0x08006101
 80060a8:	08006101 	.word	0x08006101
 80060ac:	08006101 	.word	0x08006101
 80060b0:	08006109 	.word	0x08006109
 80060b4:	08006101 	.word	0x08006101
 80060b8:	08006101 	.word	0x08006101
 80060bc:	08006101 	.word	0x08006101
 80060c0:	08006101 	.word	0x08006101
 80060c4:	08006101 	.word	0x08006101
 80060c8:	08006101 	.word	0x08006101
 80060cc:	08006101 	.word	0x08006101
 80060d0:	08006109 	.word	0x08006109
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d8:	3308      	adds	r3, #8
 80060da:	2101      	movs	r1, #1
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 ffc3 	bl	8007068 <RCCEx_PLL2_Config>
 80060e2:	4603      	mov	r3, r0
 80060e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060e8:	e00f      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	3328      	adds	r3, #40	@ 0x28
 80060f0:	2101      	movs	r1, #1
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 f86a 	bl	80071cc <RCCEx_PLL3_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060fe:	e004      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006106:	e000      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10a      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006112:	4bbf      	ldr	r3, [pc, #764]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006116:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006120:	4abb      	ldr	r2, [pc, #748]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006122:	430b      	orrs	r3, r1
 8006124:	6553      	str	r3, [r2, #84]	@ 0x54
 8006126:	e003      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800612c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	f002 0302 	and.w	r3, r2, #2
 800613c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006140:	2300      	movs	r3, #0
 8006142:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006146:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800614a:	460b      	mov	r3, r1
 800614c:	4313      	orrs	r3, r2
 800614e:	d041      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006156:	2b05      	cmp	r3, #5
 8006158:	d824      	bhi.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800615a:	a201      	add	r2, pc, #4	@ (adr r2, 8006160 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800615c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006160:	080061ad 	.word	0x080061ad
 8006164:	08006179 	.word	0x08006179
 8006168:	0800618f 	.word	0x0800618f
 800616c:	080061ad 	.word	0x080061ad
 8006170:	080061ad 	.word	0x080061ad
 8006174:	080061ad 	.word	0x080061ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	3308      	adds	r3, #8
 800617e:	2101      	movs	r1, #1
 8006180:	4618      	mov	r0, r3
 8006182:	f000 ff71 	bl	8007068 <RCCEx_PLL2_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800618c:	e00f      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800618e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006192:	3328      	adds	r3, #40	@ 0x28
 8006194:	2101      	movs	r1, #1
 8006196:	4618      	mov	r0, r3
 8006198:	f001 f818 	bl	80071cc <RCCEx_PLL3_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061a2:	e004      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061aa:	e000      	b.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80061ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061b6:	4b96      	ldr	r3, [pc, #600]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ba:	f023 0107 	bic.w	r1, r3, #7
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061c4:	4a92      	ldr	r2, [pc, #584]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80061ca:	e003      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f002 0304 	and.w	r3, r2, #4
 80061e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4313      	orrs	r3, r2
 80061f2:	d044      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80061f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061fc:	2b05      	cmp	r3, #5
 80061fe:	d825      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006200:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	08006255 	.word	0x08006255
 800620c:	08006221 	.word	0x08006221
 8006210:	08006237 	.word	0x08006237
 8006214:	08006255 	.word	0x08006255
 8006218:	08006255 	.word	0x08006255
 800621c:	08006255 	.word	0x08006255
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006224:	3308      	adds	r3, #8
 8006226:	2101      	movs	r1, #1
 8006228:	4618      	mov	r0, r3
 800622a:	f000 ff1d 	bl	8007068 <RCCEx_PLL2_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006234:	e00f      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623a:	3328      	adds	r3, #40	@ 0x28
 800623c:	2101      	movs	r1, #1
 800623e:	4618      	mov	r0, r3
 8006240:	f000 ffc4 	bl	80071cc <RCCEx_PLL3_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800624a:	e004      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006252:	e000      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800625e:	4b6c      	ldr	r3, [pc, #432]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006262:	f023 0107 	bic.w	r1, r3, #7
 8006266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800626e:	4a68      	ldr	r2, [pc, #416]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006270:	430b      	orrs	r3, r1
 8006272:	6593      	str	r3, [r2, #88]	@ 0x58
 8006274:	e003      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800627a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f002 0320 	and.w	r3, r2, #32
 800628a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800628e:	2300      	movs	r3, #0
 8006290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006294:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006298:	460b      	mov	r3, r1
 800629a:	4313      	orrs	r3, r2
 800629c:	d055      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062aa:	d033      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80062ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062b0:	d82c      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b6:	d02f      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062bc:	d826      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062c2:	d02b      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80062c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062c8:	d820      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062ce:	d012      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80062d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062d4:	d81a      	bhi.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d022      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80062da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062de:	d115      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	3308      	adds	r3, #8
 80062e6:	2100      	movs	r1, #0
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 febd 	bl	8007068 <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80062f4:	e015      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	3328      	adds	r3, #40	@ 0x28
 80062fc:	2102      	movs	r1, #2
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 ff64 	bl	80071cc <RCCEx_PLL3_Config>
 8006304:	4603      	mov	r3, r0
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800630a:	e00a      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006312:	e006      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006314:	bf00      	nop
 8006316:	e004      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006318:	bf00      	nop
 800631a:	e002      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800631c:	bf00      	nop
 800631e:	e000      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800632a:	4b39      	ldr	r3, [pc, #228]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800632c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633a:	4a35      	ldr	r2, [pc, #212]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800633c:	430b      	orrs	r3, r1
 800633e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006340:	e003      	b.n	800634a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006346:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800634a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006352:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800635a:	2300      	movs	r3, #0
 800635c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006360:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006364:	460b      	mov	r3, r1
 8006366:	4313      	orrs	r3, r2
 8006368:	d058      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800636a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800636e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006372:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006376:	d033      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006378:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800637c:	d82c      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006382:	d02f      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006388:	d826      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800638a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800638e:	d02b      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006390:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006394:	d820      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800639a:	d012      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800639c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063a0:	d81a      	bhi.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d022      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063aa:	d115      	bne.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b0:	3308      	adds	r3, #8
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fe57 	bl	8007068 <RCCEx_PLL2_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063c0:	e015      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	3328      	adds	r3, #40	@ 0x28
 80063c8:	2102      	movs	r1, #2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fefe 	bl	80071cc <RCCEx_PLL3_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063d6:	e00a      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063de:	e006      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063e0:	bf00      	nop
 80063e2:	e004      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10e      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063f6:	4b06      	ldr	r3, [pc, #24]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006402:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006406:	4a02      	ldr	r2, [pc, #8]	@ (8006410 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006408:	430b      	orrs	r3, r1
 800640a:	6593      	str	r3, [r2, #88]	@ 0x58
 800640c:	e006      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800640e:	bf00      	nop
 8006410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800641c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800642c:	2300      	movs	r3, #0
 800642e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006432:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006436:	460b      	mov	r3, r1
 8006438:	4313      	orrs	r3, r2
 800643a:	d055      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800643c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006440:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006444:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006448:	d033      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800644a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800644e:	d82c      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006450:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006454:	d02f      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006456:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800645a:	d826      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800645c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006460:	d02b      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006462:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006466:	d820      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800646c:	d012      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800646e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006472:	d81a      	bhi.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006474:	2b00      	cmp	r3, #0
 8006476:	d022      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800647c:	d115      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006482:	3308      	adds	r3, #8
 8006484:	2100      	movs	r1, #0
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fdee 	bl	8007068 <RCCEx_PLL2_Config>
 800648c:	4603      	mov	r3, r0
 800648e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006492:	e015      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006498:	3328      	adds	r3, #40	@ 0x28
 800649a:	2102      	movs	r1, #2
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fe95 	bl	80071cc <RCCEx_PLL3_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064a8:	e00a      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064b0:	e006      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064b2:	bf00      	nop
 80064b4:	e004      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064b6:	bf00      	nop
 80064b8:	e002      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10b      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80064d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064d8:	4a9d      	ldr	r2, [pc, #628]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064da:	430b      	orrs	r3, r1
 80064dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064de:	e003      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f002 0308 	and.w	r3, r2, #8
 80064f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d01e      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006514:	d10c      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	3328      	adds	r3, #40	@ 0x28
 800651c:	2102      	movs	r1, #2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fe54 	bl	80071cc <RCCEx_PLL3_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006530:	4b87      	ldr	r3, [pc, #540]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006534:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006540:	4a83      	ldr	r2, [pc, #524]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006542:	430b      	orrs	r3, r1
 8006544:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	f002 0310 	and.w	r3, r2, #16
 8006552:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006556:	2300      	movs	r3, #0
 8006558:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800655c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006560:	460b      	mov	r3, r1
 8006562:	4313      	orrs	r3, r2
 8006564:	d01e      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800656a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800656e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006572:	d10c      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006578:	3328      	adds	r3, #40	@ 0x28
 800657a:	2102      	movs	r1, #2
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fe25 	bl	80071cc <RCCEx_PLL3_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800658e:	4b70      	ldr	r3, [pc, #448]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006592:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800659a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800659e:	4a6c      	ldr	r2, [pc, #432]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065b4:	2300      	movs	r3, #0
 80065b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80065be:	460b      	mov	r3, r1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	d03e      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065d0:	d022      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80065d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065d6:	d81b      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e0:	d00b      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80065e2:	e015      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e8:	3308      	adds	r3, #8
 80065ea:	2100      	movs	r1, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fd3b 	bl	8007068 <RCCEx_PLL2_Config>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80065f8:	e00f      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fe:	3328      	adds	r3, #40	@ 0x28
 8006600:	2102      	movs	r1, #2
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fde2 	bl	80071cc <RCCEx_PLL3_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800660e:	e004      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006616:	e000      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800661a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006622:	4b4b      	ldr	r3, [pc, #300]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006626:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006632:	4a47      	ldr	r2, [pc, #284]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006634:	430b      	orrs	r3, r1
 8006636:	6593      	str	r3, [r2, #88]	@ 0x58
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800664e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006650:	2300      	movs	r3, #0
 8006652:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006654:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d03b      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006666:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800666a:	d01f      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800666c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006670:	d818      	bhi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006676:	d003      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006678:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800667c:	d007      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800667e:	e011      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006680:	4b33      	ldr	r3, [pc, #204]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006684:	4a32      	ldr	r2, [pc, #200]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006686:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800668a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800668c:	e00f      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800668e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006692:	3328      	adds	r3, #40	@ 0x28
 8006694:	2101      	movs	r1, #1
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fd98 	bl	80071cc <RCCEx_PLL3_Config>
 800669c:	4603      	mov	r3, r0
 800669e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80066a2:	e004      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066aa:	e000      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80066ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d10b      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066b6:	4b26      	ldr	r3, [pc, #152]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c6:	4a22      	ldr	r2, [pc, #136]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c8:	430b      	orrs	r3, r1
 80066ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80066e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80066e4:	2300      	movs	r3, #0
 80066e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80066e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d034      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80066fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006700:	d007      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006702:	e011      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006704:	4b12      	ldr	r3, [pc, #72]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	4a11      	ldr	r2, [pc, #68]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800670a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800670e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006710:	e00e      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	3308      	adds	r3, #8
 8006718:	2102      	movs	r1, #2
 800671a:	4618      	mov	r0, r3
 800671c:	f000 fca4 	bl	8007068 <RCCEx_PLL2_Config>
 8006720:	4603      	mov	r3, r0
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006726:	e003      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800672e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10d      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800673a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006746:	4a02      	ldr	r2, [pc, #8]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006748:	430b      	orrs	r3, r1
 800674a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800674c:	e006      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800674e:	bf00      	nop
 8006750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800676a:	2300      	movs	r3, #0
 800676c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800676e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d00c      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677c:	3328      	adds	r3, #40	@ 0x28
 800677e:	2102      	movs	r1, #2
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fd23 	bl	80071cc <RCCEx_PLL3_Config>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800679e:	663b      	str	r3, [r7, #96]	@ 0x60
 80067a0:	2300      	movs	r3, #0
 80067a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80067a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067a8:	460b      	mov	r3, r1
 80067aa:	4313      	orrs	r3, r2
 80067ac:	d038      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067ba:	d018      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80067bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067c0:	d811      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067c6:	d014      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067cc:	d80b      	bhi.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d011      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067d6:	d106      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d8:	4bc3      	ldr	r3, [pc, #780]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067dc:	4ac2      	ldr	r2, [pc, #776]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80067e4:	e008      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067ec:	e004      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006800:	4bb9      	ldr	r3, [pc, #740]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006804:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006810:	4ab5      	ldr	r2, [pc, #724]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006812:	430b      	orrs	r3, r1
 8006814:	6553      	str	r3, [r2, #84]	@ 0x54
 8006816:	e003      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800681c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800682c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800682e:	2300      	movs	r3, #0
 8006830:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006832:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006836:	460b      	mov	r3, r1
 8006838:	4313      	orrs	r3, r2
 800683a:	d009      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800683c:	4baa      	ldr	r3, [pc, #680]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800683e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006840:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684a:	4aa7      	ldr	r2, [pc, #668]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800684c:	430b      	orrs	r3, r1
 800684e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800685c:	653b      	str	r3, [r7, #80]	@ 0x50
 800685e:	2300      	movs	r3, #0
 8006860:	657b      	str	r3, [r7, #84]	@ 0x54
 8006862:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006866:	460b      	mov	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800686c:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800687c:	4a9a      	ldr	r2, [pc, #616]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687e:	430b      	orrs	r3, r1
 8006880:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800688e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006890:	2300      	movs	r3, #0
 8006892:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006894:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006898:	460b      	mov	r3, r1
 800689a:	4313      	orrs	r3, r2
 800689c:	d009      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800689e:	4b92      	ldr	r3, [pc, #584]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068ac:	4a8e      	ldr	r2, [pc, #568]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068be:	643b      	str	r3, [r7, #64]	@ 0x40
 80068c0:	2300      	movs	r3, #0
 80068c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d00e      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068ce:	4b86      	ldr	r3, [pc, #536]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	4a85      	ldr	r2, [pc, #532]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d8:	6113      	str	r3, [r2, #16]
 80068da:	4b83      	ldr	r3, [pc, #524]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068dc:	6919      	ldr	r1, [r3, #16]
 80068de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068e6:	4a80      	ldr	r2, [pc, #512]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e8:	430b      	orrs	r3, r1
 80068ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80068f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068fa:	2300      	movs	r3, #0
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006902:	460b      	mov	r3, r1
 8006904:	4313      	orrs	r3, r2
 8006906:	d009      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006908:	4b77      	ldr	r3, [pc, #476]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800690a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006916:	4a74      	ldr	r2, [pc, #464]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006918:	430b      	orrs	r3, r1
 800691a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800691c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006928:	633b      	str	r3, [r7, #48]	@ 0x30
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006932:	460b      	mov	r3, r1
 8006934:	4313      	orrs	r3, r2
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006938:	4b6b      	ldr	r3, [pc, #428]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800693c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006948:	4a67      	ldr	r2, [pc, #412]	@ (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800694a:	430b      	orrs	r3, r1
 800694c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006956:	2100      	movs	r1, #0
 8006958:	62b9      	str	r1, [r7, #40]	@ 0x28
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006960:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006964:	460b      	mov	r3, r1
 8006966:	4313      	orrs	r3, r2
 8006968:	d011      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800696a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800696e:	3308      	adds	r3, #8
 8006970:	2100      	movs	r1, #0
 8006972:	4618      	mov	r0, r3
 8006974:	f000 fb78 	bl	8007068 <RCCEx_PLL2_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800697e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	2100      	movs	r1, #0
 8006998:	6239      	str	r1, [r7, #32]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
 80069a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069a4:	460b      	mov	r3, r1
 80069a6:	4313      	orrs	r3, r2
 80069a8:	d011      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ae:	3308      	adds	r3, #8
 80069b0:	2101      	movs	r1, #1
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fb58 	bl	8007068 <RCCEx_PLL2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d003      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	2100      	movs	r1, #0
 80069d8:	61b9      	str	r1, [r7, #24]
 80069da:	f003 0304 	and.w	r3, r3, #4
 80069de:	61fb      	str	r3, [r7, #28]
 80069e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069e4:	460b      	mov	r3, r1
 80069e6:	4313      	orrs	r3, r2
 80069e8:	d011      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ee:	3308      	adds	r3, #8
 80069f0:	2102      	movs	r1, #2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fb38 	bl	8007068 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	2100      	movs	r1, #0
 8006a18:	6139      	str	r1, [r7, #16]
 8006a1a:	f003 0308 	and.w	r3, r3, #8
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a24:	460b      	mov	r3, r1
 8006a26:	4313      	orrs	r3, r2
 8006a28:	d011      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a2e:	3328      	adds	r3, #40	@ 0x28
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fbca 	bl	80071cc <RCCEx_PLL3_Config>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	2100      	movs	r1, #0
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d011      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a6e:	3328      	adds	r3, #40	@ 0x28
 8006a70:	2101      	movs	r1, #1
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fbaa 	bl	80071cc <RCCEx_PLL3_Config>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	2100      	movs	r1, #0
 8006a98:	6039      	str	r1, [r7, #0]
 8006a9a:	f003 0320 	and.w	r3, r3, #32
 8006a9e:	607b      	str	r3, [r7, #4]
 8006aa0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	d011      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aae:	3328      	adds	r3, #40	@ 0x28
 8006ab0:	2102      	movs	r1, #2
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fb8a 	bl	80071cc <RCCEx_PLL3_Config>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006ace:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae8:	58024400 	.word	0x58024400

08006aec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006af0:	f7fe fd96 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8006af4:	4602      	mov	r2, r0
 8006af6:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	091b      	lsrs	r3, r3, #4
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	4904      	ldr	r1, [pc, #16]	@ (8006b14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b02:	5ccb      	ldrb	r3, [r1, r3]
 8006b04:	f003 031f 	and.w	r3, r3, #31
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	58024400 	.word	0x58024400
 8006b14:	0800b260 	.word	0x0800b260

08006b18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b089      	sub	sp, #36	@ 0x24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b20:	4ba1      	ldr	r3, [pc, #644]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b2a:	4b9f      	ldr	r3, [pc, #636]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	0b1b      	lsrs	r3, r3, #12
 8006b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b36:	4b9c      	ldr	r3, [pc, #624]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	091b      	lsrs	r3, r3, #4
 8006b3c:	f003 0301 	and.w	r3, r3, #1
 8006b40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b42:	4b99      	ldr	r3, [pc, #612]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b46:	08db      	lsrs	r3, r3, #3
 8006b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8111 	beq.w	8006d88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	f000 8083 	beq.w	8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	f200 80a1 	bhi.w	8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d056      	beq.n	8006c30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b82:	e099      	b.n	8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b84:	4b88      	ldr	r3, [pc, #544]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0320 	and.w	r3, r3, #32
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d02d      	beq.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b90:	4b85      	ldr	r3, [pc, #532]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	08db      	lsrs	r3, r3, #3
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	4a84      	ldr	r2, [pc, #528]	@ (8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	ee07 3a90 	vmov	s15, r3
 8006ba8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bba:	4b7b      	ldr	r3, [pc, #492]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006be6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006bea:	e087      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c2e:	e065      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b59      	ldr	r3, [pc, #356]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c72:	e043      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006dbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b48      	ldr	r3, [pc, #288]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb6:	e021      	b.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b37      	ldr	r3, [pc, #220]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d00:	0a5b      	lsrs	r3, r3, #9
 8006d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d22:	ee17 2a90 	vmov	r2, s15
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2e:	0c1b      	lsrs	r3, r3, #16
 8006d30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d34:	ee07 3a90 	vmov	s15, r3
 8006d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d50:	ee17 2a90 	vmov	r2, s15
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d58:	4b13      	ldr	r3, [pc, #76]	@ (8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5c:	0e1b      	lsrs	r3, r3, #24
 8006d5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d62:	ee07 3a90 	vmov	s15, r3
 8006d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d7e:	ee17 2a90 	vmov	r2, s15
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d86:	e008      	b.n	8006d9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	609a      	str	r2, [r3, #8]
}
 8006d9a:	bf00      	nop
 8006d9c:	3724      	adds	r7, #36	@ 0x24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	58024400 	.word	0x58024400
 8006dac:	03d09000 	.word	0x03d09000
 8006db0:	46000000 	.word	0x46000000
 8006db4:	4c742400 	.word	0x4c742400
 8006db8:	4a742400 	.word	0x4a742400
 8006dbc:	4af42400 	.word	0x4af42400

08006dc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b089      	sub	sp, #36	@ 0x24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dc8:	4ba1      	ldr	r3, [pc, #644]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	0d1b      	lsrs	r3, r3, #20
 8006dd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ddc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006dde:	4b9c      	ldr	r3, [pc, #624]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006dea:	4b99      	ldr	r3, [pc, #612]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	08db      	lsrs	r3, r3, #3
 8006df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8111 	beq.w	8007030 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	f000 8083 	beq.w	8006f1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	f200 80a1 	bhi.w	8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d056      	beq.n	8006ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e2a:	e099      	b.n	8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e2c:	4b88      	ldr	r3, [pc, #544]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d02d      	beq.n	8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e38:	4b85      	ldr	r3, [pc, #532]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	08db      	lsrs	r3, r3, #3
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	4a84      	ldr	r2, [pc, #528]	@ (8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
 8006e48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	ee07 3a90 	vmov	s15, r3
 8006e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	4b7b      	ldr	r3, [pc, #492]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e92:	e087      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ed6:	e065      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	ee07 3a90 	vmov	s15, r3
 8006ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eea:	4b59      	ldr	r3, [pc, #356]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f1a:	e043      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007064 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b48      	ldr	r3, [pc, #288]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f5e:	e021      	b.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b37      	ldr	r3, [pc, #220]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa8:	0a5b      	lsrs	r3, r3, #9
 8006faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fca:	ee17 2a90 	vmov	r2, s15
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd6:	0c1b      	lsrs	r3, r3, #16
 8006fd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fdc:	ee07 3a90 	vmov	s15, r3
 8006fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff8:	ee17 2a90 	vmov	r2, s15
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007000:	4b13      	ldr	r3, [pc, #76]	@ (8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007004:	0e1b      	lsrs	r3, r3, #24
 8007006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800700a:	ee07 3a90 	vmov	s15, r3
 800700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007016:	ee37 7a87 	vadd.f32	s14, s15, s14
 800701a:	edd7 6a07 	vldr	s13, [r7, #28]
 800701e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007026:	ee17 2a90 	vmov	r2, s15
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800702e:	e008      	b.n	8007042 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	609a      	str	r2, [r3, #8]
}
 8007042:	bf00      	nop
 8007044:	3724      	adds	r7, #36	@ 0x24
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	58024400 	.word	0x58024400
 8007054:	03d09000 	.word	0x03d09000
 8007058:	46000000 	.word	0x46000000
 800705c:	4c742400 	.word	0x4c742400
 8007060:	4a742400 	.word	0x4a742400
 8007064:	4af42400 	.word	0x4af42400

08007068 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007076:	4b53      	ldr	r3, [pc, #332]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b03      	cmp	r3, #3
 8007080:	d101      	bne.n	8007086 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e099      	b.n	80071ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007086:	4b4f      	ldr	r3, [pc, #316]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a4e      	ldr	r2, [pc, #312]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800708c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fa fc37 	bl	8001904 <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800709a:	f7fa fc33 	bl	8001904 <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e086      	b.n	80071ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070ac:	4b45      	ldr	r3, [pc, #276]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f0      	bne.n	800709a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070b8:	4b42      	ldr	r3, [pc, #264]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	031b      	lsls	r3, r3, #12
 80070c6:	493f      	ldr	r1, [pc, #252]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	3b01      	subs	r3, #1
 80070dc:	025b      	lsls	r3, r3, #9
 80070de:	b29b      	uxth	r3, r3
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	041b      	lsls	r3, r3, #16
 80070ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	061b      	lsls	r3, r3, #24
 80070f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070fc:	4931      	ldr	r1, [pc, #196]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007102:	4b30      	ldr	r3, [pc, #192]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007106:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	492d      	ldr	r1, [pc, #180]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007114:	4b2b      	ldr	r3, [pc, #172]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007118:	f023 0220 	bic.w	r2, r3, #32
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	4928      	ldr	r1, [pc, #160]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007126:	4b27      	ldr	r3, [pc, #156]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712a:	4a26      	ldr	r2, [pc, #152]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800712c:	f023 0310 	bic.w	r3, r3, #16
 8007130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007132:	4b24      	ldr	r3, [pc, #144]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007136:	4b24      	ldr	r3, [pc, #144]	@ (80071c8 <RCCEx_PLL2_Config+0x160>)
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	69d2      	ldr	r2, [r2, #28]
 800713e:	00d2      	lsls	r2, r2, #3
 8007140:	4920      	ldr	r1, [pc, #128]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007142:	4313      	orrs	r3, r2
 8007144:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007146:	4b1f      	ldr	r3, [pc, #124]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714a:	4a1e      	ldr	r2, [pc, #120]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800714c:	f043 0310 	orr.w	r3, r3, #16
 8007150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007158:	4b1a      	ldr	r3, [pc, #104]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715c:	4a19      	ldr	r2, [pc, #100]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800715e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007164:	e00f      	b.n	8007186 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d106      	bne.n	800717a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800716c:	4b15      	ldr	r3, [pc, #84]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4a14      	ldr	r2, [pc, #80]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007178:	e005      	b.n	8007186 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800717a:	4b12      	ldr	r3, [pc, #72]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717e:	4a11      	ldr	r2, [pc, #68]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007180:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007184:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007186:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a0e      	ldr	r2, [pc, #56]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 800718c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fa fbb7 	bl	8001904 <HAL_GetTick>
 8007196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007198:	e008      	b.n	80071ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800719a:	f7fa fbb3 	bl	8001904 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e006      	b.n	80071ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071ac:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <RCCEx_PLL2_Config+0x15c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	58024400 	.word	0x58024400
 80071c8:	ffff0007 	.word	0xffff0007

080071cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071da:	4b53      	ldr	r3, [pc, #332]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d101      	bne.n	80071ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e099      	b.n	800731e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a4e      	ldr	r2, [pc, #312]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80071f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071f6:	f7fa fb85 	bl	8001904 <HAL_GetTick>
 80071fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071fc:	e008      	b.n	8007210 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071fe:	f7fa fb81 	bl	8001904 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	2b02      	cmp	r3, #2
 800720a:	d901      	bls.n	8007210 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e086      	b.n	800731e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007210:	4b45      	ldr	r3, [pc, #276]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1f0      	bne.n	80071fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800721c:	4b42      	ldr	r3, [pc, #264]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	051b      	lsls	r3, r3, #20
 800722a:	493f      	ldr	r1, [pc, #252]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800722c:	4313      	orrs	r3, r2
 800722e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	3b01      	subs	r3, #1
 8007236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	3b01      	subs	r3, #1
 8007240:	025b      	lsls	r3, r3, #9
 8007242:	b29b      	uxth	r3, r3
 8007244:	431a      	orrs	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	3b01      	subs	r3, #1
 800724c:	041b      	lsls	r3, r3, #16
 800724e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	3b01      	subs	r3, #1
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007260:	4931      	ldr	r1, [pc, #196]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007262:	4313      	orrs	r3, r2
 8007264:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007266:	4b30      	ldr	r3, [pc, #192]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	492d      	ldr	r1, [pc, #180]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007274:	4313      	orrs	r3, r2
 8007276:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007278:	4b2b      	ldr	r3, [pc, #172]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800727a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	4928      	ldr	r1, [pc, #160]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007286:	4313      	orrs	r3, r2
 8007288:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800728a:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 800728c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800728e:	4a26      	ldr	r2, [pc, #152]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007296:	4b24      	ldr	r3, [pc, #144]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800729a:	4b24      	ldr	r3, [pc, #144]	@ (800732c <RCCEx_PLL3_Config+0x160>)
 800729c:	4013      	ands	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	69d2      	ldr	r2, [r2, #28]
 80072a2:	00d2      	lsls	r2, r2, #3
 80072a4:	4920      	ldr	r1, [pc, #128]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d106      	bne.n	80072ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	4a19      	ldr	r2, [pc, #100]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072c8:	e00f      	b.n	80072ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d106      	bne.n	80072de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072d0:	4b15      	ldr	r3, [pc, #84]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072dc:	e005      	b.n	80072ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072de:	4b12      	ldr	r3, [pc, #72]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a11      	ldr	r2, [pc, #68]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 80072f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f6:	f7fa fb05 	bl	8001904 <HAL_GetTick>
 80072fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072fc:	e008      	b.n	8007310 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072fe:	f7fa fb01 	bl	8001904 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e006      	b.n	800731e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007310:	4b05      	ldr	r3, [pc, #20]	@ (8007328 <RCCEx_PLL3_Config+0x15c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f0      	beq.n	80072fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	58024400 	.word	0x58024400
 800732c:	ffff0007 	.word	0xffff0007

08007330 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e10f      	b.n	8007562 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a87      	ldr	r2, [pc, #540]	@ (800756c <HAL_SPI_Init+0x23c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00f      	beq.n	8007372 <HAL_SPI_Init+0x42>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a86      	ldr	r2, [pc, #536]	@ (8007570 <HAL_SPI_Init+0x240>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d00a      	beq.n	8007372 <HAL_SPI_Init+0x42>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a84      	ldr	r2, [pc, #528]	@ (8007574 <HAL_SPI_Init+0x244>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d005      	beq.n	8007372 <HAL_SPI_Init+0x42>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	2b0f      	cmp	r3, #15
 800736c:	d901      	bls.n	8007372 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e0f7      	b.n	8007562 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fcec 	bl	8007d50 <SPI_GetPacketSize>
 8007378:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a7b      	ldr	r2, [pc, #492]	@ (800756c <HAL_SPI_Init+0x23c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00c      	beq.n	800739e <HAL_SPI_Init+0x6e>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a79      	ldr	r2, [pc, #484]	@ (8007570 <HAL_SPI_Init+0x240>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d007      	beq.n	800739e <HAL_SPI_Init+0x6e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a78      	ldr	r2, [pc, #480]	@ (8007574 <HAL_SPI_Init+0x244>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d002      	beq.n	800739e <HAL_SPI_Init+0x6e>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b08      	cmp	r3, #8
 800739c:	d811      	bhi.n	80073c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073a2:	4a72      	ldr	r2, [pc, #456]	@ (800756c <HAL_SPI_Init+0x23c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d009      	beq.n	80073bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a70      	ldr	r2, [pc, #448]	@ (8007570 <HAL_SPI_Init+0x240>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_SPI_Init+0x8c>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a6f      	ldr	r2, [pc, #444]	@ (8007574 <HAL_SPI_Init+0x244>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d104      	bne.n	80073c6 <HAL_SPI_Init+0x96>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b10      	cmp	r3, #16
 80073c0:	d901      	bls.n	80073c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e0cd      	b.n	8007562 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7f9 ff48 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0201 	bic.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007402:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800740c:	d119      	bne.n	8007442 <HAL_SPI_Init+0x112>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007416:	d103      	bne.n	8007420 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10c      	bne.n	8007442 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800742c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007430:	d107      	bne.n	8007442 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007440:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00f      	beq.n	800746e <HAL_SPI_Init+0x13e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	2b06      	cmp	r3, #6
 8007454:	d90b      	bls.n	800746e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	e007      	b.n	800747e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800747c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69da      	ldr	r2, [r3, #28]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007486:	431a      	orrs	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007490:	ea42 0103 	orr.w	r1, r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	431a      	orrs	r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074de:	ea42 0103 	orr.w	r1, r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d113      	bne.n	800751e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007508:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800751c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0201 	bic.w	r2, r2, #1
 800752c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40013000 	.word	0x40013000
 8007570:	40003800 	.word	0x40003800
 8007574:	40003c00 	.word	0x40003c00

08007578 <HAL_SPI_Transmit_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if ((pData == NULL) || (Size == 0UL))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <HAL_SPI_Transmit_IT+0x1a>
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e08b      	b.n	80076ae <HAL_SPI_Transmit_IT+0x136>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d001      	beq.n	80075a6 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 80075a2:	2302      	movs	r3, #2
 80075a4:	e083      	b.n	80076ae <HAL_SPI_Transmit_IT+0x136>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d101      	bne.n	80075b4 <HAL_SPI_Transmit_IT+0x3c>
 80075b0:	2302      	movs	r3, #2
 80075b2:	e07c      	b.n	80076ae <HAL_SPI_Transmit_IT+0x136>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2203      	movs	r2, #3
 80075c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	88fa      	ldrh	r2, [r7, #6]
 80075d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	2b0f      	cmp	r3, #15
 8007604:	d903      	bls.n	800760e <HAL_SPI_Transmit_IT+0x96>
  {
    hspi->TxISR = SPI_TxISR_32BIT;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4a2c      	ldr	r2, [pc, #176]	@ (80076bc <HAL_SPI_Transmit_IT+0x144>)
 800760a:	675a      	str	r2, [r3, #116]	@ 0x74
 800760c:	e00a      	b.n	8007624 <HAL_SPI_Transmit_IT+0xac>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	2b07      	cmp	r3, #7
 8007614:	d903      	bls.n	800761e <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4a29      	ldr	r2, [pc, #164]	@ (80076c0 <HAL_SPI_Transmit_IT+0x148>)
 800761a:	675a      	str	r2, [r3, #116]	@ 0x74
 800761c:	e002      	b.n	8007624 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a28      	ldr	r2, [pc, #160]	@ (80076c4 <HAL_SPI_Transmit_IT+0x14c>)
 8007622:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800762c:	d108      	bne.n	8007640 <HAL_SPI_Transmit_IT+0xc8>
  {
    SPI_1LINE_TX(hspi);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	e009      	b.n	8007654 <HAL_SPI_Transmit_IT+0xdc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007652:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	4b1b      	ldr	r3, [pc, #108]	@ (80076c8 <HAL_SPI_Transmit_IT+0x150>)
 800765c:	4013      	ands	r3, r2
 800765e:	88f9      	ldrh	r1, [r7, #6]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	6812      	ldr	r2, [r2, #0]
 8007664:	430b      	orrs	r3, r1
 8007666:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f042 0201 	orr.w	r2, r2, #1
 8007676:	601a      	str	r2, [r3, #0]

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, TXP, FRE, MODF, UDR and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6919      	ldr	r1, [r3, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	f240 732a 	movw	r3, #1834	@ 0x72a
 800768e:	430b      	orrs	r3, r1
 8007690:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800769a:	d107      	bne.n	80076ac <HAL_SPI_Transmit_IT+0x134>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80076aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	08007bb9 	.word	0x08007bb9
 80076c0:	08007b5b 	.word	0x08007b5b
 80076c4:	08007b01 	.word	0x08007b01
 80076c8:	ffff0000 	.word	0xffff0000

080076cc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	@ 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80076e4:	6a3a      	ldr	r2, [r7, #32]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4013      	ands	r3, r2
 80076ea:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80076f4:	2300      	movs	r3, #0
 80076f6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80076fe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3330      	adds	r3, #48	@ 0x30
 8007706:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <HAL_SPI_IRQHandler+0x68>
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f003 0308 	and.w	r3, r3, #8
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800772a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f9c3 	bl	8007ab8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8007732:	e192      	b.n	8007a5a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800773a:	2b00      	cmp	r3, #0
 800773c:	d113      	bne.n	8007766 <HAL_SPI_IRQHandler+0x9a>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f003 0320 	and.w	r3, r3, #32
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10e      	bne.n	8007766 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	4798      	blx	r3
    hspi->RxISR(hspi);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
    handled = 1UL;
 8007762:	2301      	movs	r3, #1
 8007764:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10f      	bne.n	8007790 <HAL_SPI_IRQHandler+0xc4>
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	4798      	blx	r3
    handled = 1UL;
 800778c:	2301      	movs	r3, #1
 800778e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	f003 0320 	and.w	r3, r3, #32
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10f      	bne.n	80077ba <HAL_SPI_IRQHandler+0xee>
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00a      	beq.n	80077ba <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d105      	bne.n	80077ba <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
    handled = 1UL;
 80077b6:	2301      	movs	r3, #1
 80077b8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80077ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f040 8147 	bne.w	8007a50 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	f003 0308 	and.w	r3, r3, #8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 808b 	beq.w	80078e4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699a      	ldr	r2, [r3, #24]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0208 	orr.w	r2, r2, #8
 80077dc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0210 	orr.w	r2, r2, #16
 80077ec:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	699a      	ldr	r2, [r3, #24]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077fc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0208 	bic.w	r2, r2, #8
 800780c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d13d      	bne.n	8007898 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800781c:	e036      	b.n	800788c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	2b0f      	cmp	r3, #15
 8007824:	d90b      	bls.n	800783e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800782e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007830:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007836:	1d1a      	adds	r2, r3, #4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	665a      	str	r2, [r3, #100]	@ 0x64
 800783c:	e01d      	b.n	800787a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	2b07      	cmp	r3, #7
 8007844:	d90b      	bls.n	800785e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	8812      	ldrh	r2, [r2, #0]
 800784e:	b292      	uxth	r2, r2
 8007850:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	665a      	str	r2, [r3, #100]	@ 0x64
 800785c:	e00d      	b.n	800787a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007892:	b29b      	uxth	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1c2      	bne.n	800781e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9b9 	bl	8007c10 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f8f7 	bl	8007aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80078b6:	e0d0      	b.n	8007a5a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80078b8:	7cfb      	ldrb	r3, [r7, #19]
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d103      	bne.n	80078c6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f8e6 	bl	8007a90 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80078c4:	e0c6      	b.n	8007a54 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80078c6:	7cfb      	ldrb	r3, [r7, #19]
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d103      	bne.n	80078d4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f8d5 	bl	8007a7c <HAL_SPI_RxCpltCallback>
    return;
 80078d2:	e0bf      	b.n	8007a54 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80078d4:	7cfb      	ldrb	r3, [r7, #19]
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	f040 80bc 	bne.w	8007a54 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f8c3 	bl	8007a68 <HAL_SPI_TxCpltCallback>
    return;
 80078e2:	e0b7      	b.n	8007a54 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 80b5 	beq.w	8007a5a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00f      	beq.n	800791a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007900:	f043 0204 	orr.w	r2, r3, #4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007918:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00f      	beq.n	8007944 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800792a:	f043 0201 	orr.w	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007942:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00f      	beq.n	800796e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007954:	f043 0208 	orr.w	r2, r3, #8
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800796c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00f      	beq.n	8007998 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800797e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699a      	ldr	r2, [r3, #24]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0220 	orr.w	r2, r2, #32
 8007996:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d05a      	beq.n	8007a58 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6919      	ldr	r1, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	4b28      	ldr	r3, [pc, #160]	@ (8007a60 <HAL_SPI_IRQHandler+0x394>)
 80079be:	400b      	ands	r3, r1
 80079c0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80079c8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80079cc:	d138      	bne.n	8007a40 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80079dc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d013      	beq.n	8007a0e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007a64 <HAL_SPI_IRQHandler+0x398>)
 80079ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fa f8d2 	bl	8001b9c <HAL_DMA_Abort_IT>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d020      	beq.n	8007a58 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a1a:	4a12      	ldr	r2, [pc, #72]	@ (8007a64 <HAL_SPI_IRQHandler+0x398>)
 8007a1c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fa f8ba 	bl	8001b9c <HAL_DMA_Abort_IT>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d014      	beq.n	8007a58 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a3e:	e00b      	b.n	8007a58 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f82b 	bl	8007aa4 <HAL_SPI_ErrorCallback>
    return;
 8007a4e:	e003      	b.n	8007a58 <HAL_SPI_IRQHandler+0x38c>
    return;
 8007a50:	bf00      	nop
 8007a52:	e002      	b.n	8007a5a <HAL_SPI_IRQHandler+0x38e>
    return;
 8007a54:	bf00      	nop
 8007a56:	e000      	b.n	8007a5a <HAL_SPI_IRQHandler+0x38e>
    return;
 8007a58:	bf00      	nop
  }
}
 8007a5a:	3728      	adds	r7, #40	@ 0x28
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	fffffc94 	.word	0xfffffc94
 8007a64:	08007acd 	.word	0x08007acd

08007a68 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff ffd6 	bl	8007aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007af8:	bf00      	nop
 8007afa:	3710      	adds	r7, #16
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3320      	adds	r3, #32
 8007b12:	7812      	ldrb	r2, [r2, #0]
 8007b14:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b1a:	1c5a      	adds	r2, r3, #1
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d107      	bne.n	8007b4e <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0202 	bic.w	r2, r2, #2
 8007b4c:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b085      	sub	sp, #20
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3320      	adds	r3, #32
 8007b68:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6e:	881a      	ldrh	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b78:	1c9a      	adds	r2, r3, #2
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b01      	subs	r3, #1
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d107      	bne.n	8007bac <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691a      	ldr	r2, [r3, #16]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0202 	bic.w	r2, r2, #2
 8007baa:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bd0:	1d1a      	adds	r2, r3, #4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d107      	bne.n	8007c04 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f022 0202 	bic.w	r2, r2, #2
 8007c02:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0208 	orr.w	r2, r2, #8
 8007c2e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0210 	orr.w	r2, r2, #16
 8007c3e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0201 	bic.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6919      	ldr	r1, [r3, #16]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8007d4c <SPI_CloseTransfer+0x13c>)
 8007c5c:	400b      	ands	r3, r1
 8007c5e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007c6e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d014      	beq.n	8007ca6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00f      	beq.n	8007ca6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f042 0220 	orr.w	r2, r2, #32
 8007ca4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d014      	beq.n	8007cdc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00f      	beq.n	8007cdc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc2:	f043 0204 	orr.w	r2, r3, #4
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699a      	ldr	r2, [r3, #24]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cda:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00f      	beq.n	8007d06 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cec:	f043 0201 	orr.w	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007d04:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00f      	beq.n	8007d30 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d16:	f043 0208 	orr.w	r2, r3, #8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d2e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	fffffc90 	.word	0xfffffc90

08007d50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	3301      	adds	r3, #1
 8007d60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	3301      	adds	r3, #1
 8007d68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	3307      	adds	r3, #7
 8007d6e:	08db      	lsrs	r3, r3, #3
 8007d70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b082      	sub	sp, #8
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e042      	b.n	8007e1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7f9 fb08 	bl	80013c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2224      	movs	r2, #36	@ 0x24
 8007db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d002      	beq.n	8007dd6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fe87 	bl	8008ae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f91c 	bl	8008014 <UART_SetConfig>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d101      	bne.n	8007de6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e01b      	b.n	8007e1e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007df4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0201 	orr.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 ff06 	bl	8008c28 <UART_CheckIdleState>
 8007e1c:	4603      	mov	r3, r0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b091      	sub	sp, #68	@ 0x44
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d178      	bne.n	8007f32 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_UART_Transmit_IT+0x24>
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e071      	b.n	8007f34 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	88fa      	ldrh	r2, [r7, #6]
 8007e5a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	88fa      	ldrh	r2, [r7, #6]
 8007e62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2221      	movs	r2, #33	@ 0x21
 8007e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e84:	d12a      	bne.n	8007edc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e8e:	d107      	bne.n	8007ea0 <HAL_UART_Transmit_IT+0x78>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d103      	bne.n	8007ea0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a29      	ldr	r2, [pc, #164]	@ (8007f40 <HAL_UART_Transmit_IT+0x118>)
 8007e9c:	679a      	str	r2, [r3, #120]	@ 0x78
 8007e9e:	e002      	b.n	8007ea6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a28      	ldr	r2, [pc, #160]	@ (8007f44 <HAL_UART_Transmit_IT+0x11c>)
 8007ea4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ec6:	637a      	str	r2, [r7, #52]	@ 0x34
 8007ec8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e5      	bne.n	8007ea6 <HAL_UART_Transmit_IT+0x7e>
 8007eda:	e028      	b.n	8007f2e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee4:	d107      	bne.n	8007ef6 <HAL_UART_Transmit_IT+0xce>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4a15      	ldr	r2, [pc, #84]	@ (8007f48 <HAL_UART_Transmit_IT+0x120>)
 8007ef2:	679a      	str	r2, [r3, #120]	@ 0x78
 8007ef4:	e002      	b.n	8007efc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	4a14      	ldr	r2, [pc, #80]	@ (8007f4c <HAL_UART_Transmit_IT+0x124>)
 8007efa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	613b      	str	r3, [r7, #16]
   return(result);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f1a:	623b      	str	r3, [r7, #32]
 8007f1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	69f9      	ldr	r1, [r7, #28]
 8007f20:	6a3a      	ldr	r2, [r7, #32]
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e6      	bne.n	8007efc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007f32:	2302      	movs	r3, #2
  }
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3744      	adds	r7, #68	@ 0x44
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	080093c3 	.word	0x080093c3
 8007f44:	080092e3 	.word	0x080092e3
 8007f48:	08009221 	.word	0x08009221
 8007f4c:	08009169 	.word	0x08009169

08007f50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f64:	2b20      	cmp	r3, #32
 8007f66:	d137      	bne.n	8007fd8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <HAL_UART_Receive_IT+0x24>
 8007f6e:	88fb      	ldrh	r3, [r7, #6]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e030      	b.n	8007fda <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a18      	ldr	r2, [pc, #96]	@ (8007fe4 <HAL_UART_Receive_IT+0x94>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d01f      	beq.n	8007fc8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d018      	beq.n	8007fc8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	623b      	str	r3, [r7, #32]
 8007fb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	69f9      	ldr	r1, [r7, #28]
 8007fba:	6a3a      	ldr	r2, [r7, #32]
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e6      	bne.n	8007f96 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 ff42 	bl	8008e58 <UART_Start_Receive_IT>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	e000      	b.n	8007fda <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007fd8:	2302      	movs	r3, #2
  }
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3728      	adds	r7, #40	@ 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	58000c00 	.word	0x58000c00

08007fe8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008018:	b092      	sub	sp, #72	@ 0x48
 800801a:	af00      	add	r7, sp, #0
 800801c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	431a      	orrs	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	431a      	orrs	r2, r3
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	4313      	orrs	r3, r2
 800803a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	4bbe      	ldr	r3, [pc, #760]	@ (800833c <UART_SetConfig+0x328>)
 8008044:	4013      	ands	r3, r2
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800804c:	430b      	orrs	r3, r1
 800804e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4ab3      	ldr	r2, [pc, #716]	@ (8008340 <UART_SetConfig+0x32c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800807c:	4313      	orrs	r3, r2
 800807e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	4baf      	ldr	r3, [pc, #700]	@ (8008344 <UART_SetConfig+0x330>)
 8008088:	4013      	ands	r3, r2
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008090:	430b      	orrs	r3, r1
 8008092:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	f023 010f 	bic.w	r1, r3, #15
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4aa6      	ldr	r2, [pc, #664]	@ (8008348 <UART_SetConfig+0x334>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d177      	bne.n	80081a4 <UART_SetConfig+0x190>
 80080b4:	4ba5      	ldr	r3, [pc, #660]	@ (800834c <UART_SetConfig+0x338>)
 80080b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080bc:	2b28      	cmp	r3, #40	@ 0x28
 80080be:	d86d      	bhi.n	800819c <UART_SetConfig+0x188>
 80080c0:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <UART_SetConfig+0xb4>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	0800816d 	.word	0x0800816d
 80080cc:	0800819d 	.word	0x0800819d
 80080d0:	0800819d 	.word	0x0800819d
 80080d4:	0800819d 	.word	0x0800819d
 80080d8:	0800819d 	.word	0x0800819d
 80080dc:	0800819d 	.word	0x0800819d
 80080e0:	0800819d 	.word	0x0800819d
 80080e4:	0800819d 	.word	0x0800819d
 80080e8:	08008175 	.word	0x08008175
 80080ec:	0800819d 	.word	0x0800819d
 80080f0:	0800819d 	.word	0x0800819d
 80080f4:	0800819d 	.word	0x0800819d
 80080f8:	0800819d 	.word	0x0800819d
 80080fc:	0800819d 	.word	0x0800819d
 8008100:	0800819d 	.word	0x0800819d
 8008104:	0800819d 	.word	0x0800819d
 8008108:	0800817d 	.word	0x0800817d
 800810c:	0800819d 	.word	0x0800819d
 8008110:	0800819d 	.word	0x0800819d
 8008114:	0800819d 	.word	0x0800819d
 8008118:	0800819d 	.word	0x0800819d
 800811c:	0800819d 	.word	0x0800819d
 8008120:	0800819d 	.word	0x0800819d
 8008124:	0800819d 	.word	0x0800819d
 8008128:	08008185 	.word	0x08008185
 800812c:	0800819d 	.word	0x0800819d
 8008130:	0800819d 	.word	0x0800819d
 8008134:	0800819d 	.word	0x0800819d
 8008138:	0800819d 	.word	0x0800819d
 800813c:	0800819d 	.word	0x0800819d
 8008140:	0800819d 	.word	0x0800819d
 8008144:	0800819d 	.word	0x0800819d
 8008148:	0800818d 	.word	0x0800818d
 800814c:	0800819d 	.word	0x0800819d
 8008150:	0800819d 	.word	0x0800819d
 8008154:	0800819d 	.word	0x0800819d
 8008158:	0800819d 	.word	0x0800819d
 800815c:	0800819d 	.word	0x0800819d
 8008160:	0800819d 	.word	0x0800819d
 8008164:	0800819d 	.word	0x0800819d
 8008168:	08008195 	.word	0x08008195
 800816c:	2301      	movs	r3, #1
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e222      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008174:	2304      	movs	r3, #4
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e21e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800817c:	2308      	movs	r3, #8
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008182:	e21a      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008184:	2310      	movs	r3, #16
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818a:	e216      	b.n	80085ba <UART_SetConfig+0x5a6>
 800818c:	2320      	movs	r3, #32
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008192:	e212      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008194:	2340      	movs	r3, #64	@ 0x40
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819a:	e20e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800819c:	2380      	movs	r3, #128	@ 0x80
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a2:	e20a      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a69      	ldr	r2, [pc, #420]	@ (8008350 <UART_SetConfig+0x33c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d130      	bne.n	8008210 <UART_SetConfig+0x1fc>
 80081ae:	4b67      	ldr	r3, [pc, #412]	@ (800834c <UART_SetConfig+0x338>)
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	f003 0307 	and.w	r3, r3, #7
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d826      	bhi.n	8008208 <UART_SetConfig+0x1f4>
 80081ba:	a201      	add	r2, pc, #4	@ (adr r2, 80081c0 <UART_SetConfig+0x1ac>)
 80081bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c0:	080081d9 	.word	0x080081d9
 80081c4:	080081e1 	.word	0x080081e1
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	08008201 	.word	0x08008201
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e1ec      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081e0:	2304      	movs	r3, #4
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e1e8      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081e8:	2308      	movs	r3, #8
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e1e4      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081f0:	2310      	movs	r3, #16
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e1e0      	b.n	80085ba <UART_SetConfig+0x5a6>
 80081f8:	2320      	movs	r3, #32
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e1dc      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008200:	2340      	movs	r3, #64	@ 0x40
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008206:	e1d8      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008208:	2380      	movs	r3, #128	@ 0x80
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800820e:	e1d4      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a4f      	ldr	r2, [pc, #316]	@ (8008354 <UART_SetConfig+0x340>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d130      	bne.n	800827c <UART_SetConfig+0x268>
 800821a:	4b4c      	ldr	r3, [pc, #304]	@ (800834c <UART_SetConfig+0x338>)
 800821c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	2b05      	cmp	r3, #5
 8008224:	d826      	bhi.n	8008274 <UART_SetConfig+0x260>
 8008226:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <UART_SetConfig+0x218>)
 8008228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822c:	08008245 	.word	0x08008245
 8008230:	0800824d 	.word	0x0800824d
 8008234:	08008255 	.word	0x08008255
 8008238:	0800825d 	.word	0x0800825d
 800823c:	08008265 	.word	0x08008265
 8008240:	0800826d 	.word	0x0800826d
 8008244:	2300      	movs	r3, #0
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e1b6      	b.n	80085ba <UART_SetConfig+0x5a6>
 800824c:	2304      	movs	r3, #4
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e1b2      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008254:	2308      	movs	r3, #8
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e1ae      	b.n	80085ba <UART_SetConfig+0x5a6>
 800825c:	2310      	movs	r3, #16
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e1aa      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008264:	2320      	movs	r3, #32
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826a:	e1a6      	b.n	80085ba <UART_SetConfig+0x5a6>
 800826c:	2340      	movs	r3, #64	@ 0x40
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008272:	e1a2      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008274:	2380      	movs	r3, #128	@ 0x80
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827a:	e19e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a35      	ldr	r2, [pc, #212]	@ (8008358 <UART_SetConfig+0x344>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d130      	bne.n	80082e8 <UART_SetConfig+0x2d4>
 8008286:	4b31      	ldr	r3, [pc, #196]	@ (800834c <UART_SetConfig+0x338>)
 8008288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828a:	f003 0307 	and.w	r3, r3, #7
 800828e:	2b05      	cmp	r3, #5
 8008290:	d826      	bhi.n	80082e0 <UART_SetConfig+0x2cc>
 8008292:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <UART_SetConfig+0x284>)
 8008294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008298:	080082b1 	.word	0x080082b1
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082c9 	.word	0x080082c9
 80082a8:	080082d1 	.word	0x080082d1
 80082ac:	080082d9 	.word	0x080082d9
 80082b0:	2300      	movs	r3, #0
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e180      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082b8:	2304      	movs	r3, #4
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e17c      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082c0:	2308      	movs	r3, #8
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e178      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082c8:	2310      	movs	r3, #16
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e174      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082d0:	2320      	movs	r3, #32
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e170      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082d8:	2340      	movs	r3, #64	@ 0x40
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e16c      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082e0:	2380      	movs	r3, #128	@ 0x80
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e6:	e168      	b.n	80085ba <UART_SetConfig+0x5a6>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1b      	ldr	r2, [pc, #108]	@ (800835c <UART_SetConfig+0x348>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d142      	bne.n	8008378 <UART_SetConfig+0x364>
 80082f2:	4b16      	ldr	r3, [pc, #88]	@ (800834c <UART_SetConfig+0x338>)
 80082f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f6:	f003 0307 	and.w	r3, r3, #7
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d838      	bhi.n	8008370 <UART_SetConfig+0x35c>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <UART_SetConfig+0x2f0>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	0800831d 	.word	0x0800831d
 8008308:	08008325 	.word	0x08008325
 800830c:	0800832d 	.word	0x0800832d
 8008310:	08008335 	.word	0x08008335
 8008314:	08008361 	.word	0x08008361
 8008318:	08008369 	.word	0x08008369
 800831c:	2300      	movs	r3, #0
 800831e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008322:	e14a      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008324:	2304      	movs	r3, #4
 8008326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832a:	e146      	b.n	80085ba <UART_SetConfig+0x5a6>
 800832c:	2308      	movs	r3, #8
 800832e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008332:	e142      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008334:	2310      	movs	r3, #16
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e13e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800833c:	cfff69f3 	.word	0xcfff69f3
 8008340:	58000c00 	.word	0x58000c00
 8008344:	11fff4ff 	.word	0x11fff4ff
 8008348:	40011000 	.word	0x40011000
 800834c:	58024400 	.word	0x58024400
 8008350:	40004400 	.word	0x40004400
 8008354:	40004800 	.word	0x40004800
 8008358:	40004c00 	.word	0x40004c00
 800835c:	40005000 	.word	0x40005000
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e128      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008368:	2340      	movs	r3, #64	@ 0x40
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e124      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008370:	2380      	movs	r3, #128	@ 0x80
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008376:	e120      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4acb      	ldr	r2, [pc, #812]	@ (80086ac <UART_SetConfig+0x698>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d176      	bne.n	8008470 <UART_SetConfig+0x45c>
 8008382:	4bcb      	ldr	r3, [pc, #812]	@ (80086b0 <UART_SetConfig+0x69c>)
 8008384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008386:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800838a:	2b28      	cmp	r3, #40	@ 0x28
 800838c:	d86c      	bhi.n	8008468 <UART_SetConfig+0x454>
 800838e:	a201      	add	r2, pc, #4	@ (adr r2, 8008394 <UART_SetConfig+0x380>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	08008439 	.word	0x08008439
 8008398:	08008469 	.word	0x08008469
 800839c:	08008469 	.word	0x08008469
 80083a0:	08008469 	.word	0x08008469
 80083a4:	08008469 	.word	0x08008469
 80083a8:	08008469 	.word	0x08008469
 80083ac:	08008469 	.word	0x08008469
 80083b0:	08008469 	.word	0x08008469
 80083b4:	08008441 	.word	0x08008441
 80083b8:	08008469 	.word	0x08008469
 80083bc:	08008469 	.word	0x08008469
 80083c0:	08008469 	.word	0x08008469
 80083c4:	08008469 	.word	0x08008469
 80083c8:	08008469 	.word	0x08008469
 80083cc:	08008469 	.word	0x08008469
 80083d0:	08008469 	.word	0x08008469
 80083d4:	08008449 	.word	0x08008449
 80083d8:	08008469 	.word	0x08008469
 80083dc:	08008469 	.word	0x08008469
 80083e0:	08008469 	.word	0x08008469
 80083e4:	08008469 	.word	0x08008469
 80083e8:	08008469 	.word	0x08008469
 80083ec:	08008469 	.word	0x08008469
 80083f0:	08008469 	.word	0x08008469
 80083f4:	08008451 	.word	0x08008451
 80083f8:	08008469 	.word	0x08008469
 80083fc:	08008469 	.word	0x08008469
 8008400:	08008469 	.word	0x08008469
 8008404:	08008469 	.word	0x08008469
 8008408:	08008469 	.word	0x08008469
 800840c:	08008469 	.word	0x08008469
 8008410:	08008469 	.word	0x08008469
 8008414:	08008459 	.word	0x08008459
 8008418:	08008469 	.word	0x08008469
 800841c:	08008469 	.word	0x08008469
 8008420:	08008469 	.word	0x08008469
 8008424:	08008469 	.word	0x08008469
 8008428:	08008469 	.word	0x08008469
 800842c:	08008469 	.word	0x08008469
 8008430:	08008469 	.word	0x08008469
 8008434:	08008461 	.word	0x08008461
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e0bc      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e0b8      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844e:	e0b4      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008456:	e0b0      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008458:	2320      	movs	r3, #32
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845e:	e0ac      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008460:	2340      	movs	r3, #64	@ 0x40
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008466:	e0a8      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008468:	2380      	movs	r3, #128	@ 0x80
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800846e:	e0a4      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a8f      	ldr	r2, [pc, #572]	@ (80086b4 <UART_SetConfig+0x6a0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d130      	bne.n	80084dc <UART_SetConfig+0x4c8>
 800847a:	4b8d      	ldr	r3, [pc, #564]	@ (80086b0 <UART_SetConfig+0x69c>)
 800847c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	2b05      	cmp	r3, #5
 8008484:	d826      	bhi.n	80084d4 <UART_SetConfig+0x4c0>
 8008486:	a201      	add	r2, pc, #4	@ (adr r2, 800848c <UART_SetConfig+0x478>)
 8008488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848c:	080084a5 	.word	0x080084a5
 8008490:	080084ad 	.word	0x080084ad
 8008494:	080084b5 	.word	0x080084b5
 8008498:	080084bd 	.word	0x080084bd
 800849c:	080084c5 	.word	0x080084c5
 80084a0:	080084cd 	.word	0x080084cd
 80084a4:	2300      	movs	r3, #0
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e086      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084ac:	2304      	movs	r3, #4
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e082      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084b4:	2308      	movs	r3, #8
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e07e      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084bc:	2310      	movs	r3, #16
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e07a      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084c4:	2320      	movs	r3, #32
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e076      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084cc:	2340      	movs	r3, #64	@ 0x40
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d2:	e072      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084d4:	2380      	movs	r3, #128	@ 0x80
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084da:	e06e      	b.n	80085ba <UART_SetConfig+0x5a6>
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a75      	ldr	r2, [pc, #468]	@ (80086b8 <UART_SetConfig+0x6a4>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d130      	bne.n	8008548 <UART_SetConfig+0x534>
 80084e6:	4b72      	ldr	r3, [pc, #456]	@ (80086b0 <UART_SetConfig+0x69c>)
 80084e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	2b05      	cmp	r3, #5
 80084f0:	d826      	bhi.n	8008540 <UART_SetConfig+0x52c>
 80084f2:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <UART_SetConfig+0x4e4>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	08008511 	.word	0x08008511
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008521 	.word	0x08008521
 8008504:	08008529 	.word	0x08008529
 8008508:	08008531 	.word	0x08008531
 800850c:	08008539 	.word	0x08008539
 8008510:	2300      	movs	r3, #0
 8008512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008516:	e050      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008518:	2304      	movs	r3, #4
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e04c      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008520:	2308      	movs	r3, #8
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e048      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008528:	2310      	movs	r3, #16
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e044      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008530:	2320      	movs	r3, #32
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008536:	e040      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008538:	2340      	movs	r3, #64	@ 0x40
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e03c      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008540:	2380      	movs	r3, #128	@ 0x80
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008546:	e038      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a5b      	ldr	r2, [pc, #364]	@ (80086bc <UART_SetConfig+0x6a8>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d130      	bne.n	80085b4 <UART_SetConfig+0x5a0>
 8008552:	4b57      	ldr	r3, [pc, #348]	@ (80086b0 <UART_SetConfig+0x69c>)
 8008554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008556:	f003 0307 	and.w	r3, r3, #7
 800855a:	2b05      	cmp	r3, #5
 800855c:	d826      	bhi.n	80085ac <UART_SetConfig+0x598>
 800855e:	a201      	add	r2, pc, #4	@ (adr r2, 8008564 <UART_SetConfig+0x550>)
 8008560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008564:	0800857d 	.word	0x0800857d
 8008568:	08008585 	.word	0x08008585
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008595 	.word	0x08008595
 8008574:	0800859d 	.word	0x0800859d
 8008578:	080085a5 	.word	0x080085a5
 800857c:	2302      	movs	r3, #2
 800857e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008582:	e01a      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008584:	2304      	movs	r3, #4
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e016      	b.n	80085ba <UART_SetConfig+0x5a6>
 800858c:	2308      	movs	r3, #8
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e012      	b.n	80085ba <UART_SetConfig+0x5a6>
 8008594:	2310      	movs	r3, #16
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e00e      	b.n	80085ba <UART_SetConfig+0x5a6>
 800859c:	2320      	movs	r3, #32
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e00a      	b.n	80085ba <UART_SetConfig+0x5a6>
 80085a4:	2340      	movs	r3, #64	@ 0x40
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e006      	b.n	80085ba <UART_SetConfig+0x5a6>
 80085ac:	2380      	movs	r3, #128	@ 0x80
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e002      	b.n	80085ba <UART_SetConfig+0x5a6>
 80085b4:	2380      	movs	r3, #128	@ 0x80
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a3f      	ldr	r2, [pc, #252]	@ (80086bc <UART_SetConfig+0x6a8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	f040 80f8 	bne.w	80087b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	dc46      	bgt.n	800865c <UART_SetConfig+0x648>
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	f2c0 8082 	blt.w	80086d8 <UART_SetConfig+0x6c4>
 80085d4:	3b02      	subs	r3, #2
 80085d6:	2b1e      	cmp	r3, #30
 80085d8:	d87e      	bhi.n	80086d8 <UART_SetConfig+0x6c4>
 80085da:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <UART_SetConfig+0x5cc>)
 80085dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e0:	08008663 	.word	0x08008663
 80085e4:	080086d9 	.word	0x080086d9
 80085e8:	0800866b 	.word	0x0800866b
 80085ec:	080086d9 	.word	0x080086d9
 80085f0:	080086d9 	.word	0x080086d9
 80085f4:	080086d9 	.word	0x080086d9
 80085f8:	0800867b 	.word	0x0800867b
 80085fc:	080086d9 	.word	0x080086d9
 8008600:	080086d9 	.word	0x080086d9
 8008604:	080086d9 	.word	0x080086d9
 8008608:	080086d9 	.word	0x080086d9
 800860c:	080086d9 	.word	0x080086d9
 8008610:	080086d9 	.word	0x080086d9
 8008614:	080086d9 	.word	0x080086d9
 8008618:	0800868b 	.word	0x0800868b
 800861c:	080086d9 	.word	0x080086d9
 8008620:	080086d9 	.word	0x080086d9
 8008624:	080086d9 	.word	0x080086d9
 8008628:	080086d9 	.word	0x080086d9
 800862c:	080086d9 	.word	0x080086d9
 8008630:	080086d9 	.word	0x080086d9
 8008634:	080086d9 	.word	0x080086d9
 8008638:	080086d9 	.word	0x080086d9
 800863c:	080086d9 	.word	0x080086d9
 8008640:	080086d9 	.word	0x080086d9
 8008644:	080086d9 	.word	0x080086d9
 8008648:	080086d9 	.word	0x080086d9
 800864c:	080086d9 	.word	0x080086d9
 8008650:	080086d9 	.word	0x080086d9
 8008654:	080086d9 	.word	0x080086d9
 8008658:	080086cb 	.word	0x080086cb
 800865c:	2b40      	cmp	r3, #64	@ 0x40
 800865e:	d037      	beq.n	80086d0 <UART_SetConfig+0x6bc>
 8008660:	e03a      	b.n	80086d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008662:	f7fe fa43 	bl	8006aec <HAL_RCCEx_GetD3PCLK1Freq>
 8008666:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008668:	e03c      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800866a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe fa52 	bl	8006b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008678:	e034      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fb9e 	bl	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008688:	e02c      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800868a:	4b09      	ldr	r3, [pc, #36]	@ (80086b0 <UART_SetConfig+0x69c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d016      	beq.n	80086c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008696:	4b06      	ldr	r3, [pc, #24]	@ (80086b0 <UART_SetConfig+0x69c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	08db      	lsrs	r3, r3, #3
 800869c:	f003 0303 	and.w	r3, r3, #3
 80086a0:	4a07      	ldr	r2, [pc, #28]	@ (80086c0 <UART_SetConfig+0x6ac>)
 80086a2:	fa22 f303 	lsr.w	r3, r2, r3
 80086a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086a8:	e01c      	b.n	80086e4 <UART_SetConfig+0x6d0>
 80086aa:	bf00      	nop
 80086ac:	40011400 	.word	0x40011400
 80086b0:	58024400 	.word	0x58024400
 80086b4:	40007800 	.word	0x40007800
 80086b8:	40007c00 	.word	0x40007c00
 80086bc:	58000c00 	.word	0x58000c00
 80086c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80086c4:	4b9d      	ldr	r3, [pc, #628]	@ (800893c <UART_SetConfig+0x928>)
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c8:	e00c      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086ca:	4b9d      	ldr	r3, [pc, #628]	@ (8008940 <UART_SetConfig+0x92c>)
 80086cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ce:	e009      	b.n	80086e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d6:	e005      	b.n	80086e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 81de 	beq.w	8008aa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f0:	4a94      	ldr	r2, [pc, #592]	@ (8008944 <UART_SetConfig+0x930>)
 80086f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086f6:	461a      	mov	r2, r3
 80086f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80086fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	4613      	mov	r3, r2
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	4413      	add	r3, r2
 800870a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800870c:	429a      	cmp	r2, r3
 800870e:	d305      	bcc.n	800871c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008718:	429a      	cmp	r2, r3
 800871a:	d903      	bls.n	8008724 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008722:	e1c1      	b.n	8008aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008726:	2200      	movs	r2, #0
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	60fa      	str	r2, [r7, #12]
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008730:	4a84      	ldr	r2, [pc, #528]	@ (8008944 <UART_SetConfig+0x930>)
 8008732:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008736:	b29b      	uxth	r3, r3
 8008738:	2200      	movs	r2, #0
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	607a      	str	r2, [r7, #4]
 800873e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008746:	f7f7 fe23 	bl	8000390 <__aeabi_uldivmod>
 800874a:	4602      	mov	r2, r0
 800874c:	460b      	mov	r3, r1
 800874e:	4610      	mov	r0, r2
 8008750:	4619      	mov	r1, r3
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	f04f 0300 	mov.w	r3, #0
 800875a:	020b      	lsls	r3, r1, #8
 800875c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008760:	0202      	lsls	r2, r0, #8
 8008762:	6979      	ldr	r1, [r7, #20]
 8008764:	6849      	ldr	r1, [r1, #4]
 8008766:	0849      	lsrs	r1, r1, #1
 8008768:	2000      	movs	r0, #0
 800876a:	460c      	mov	r4, r1
 800876c:	4605      	mov	r5, r0
 800876e:	eb12 0804 	adds.w	r8, r2, r4
 8008772:	eb43 0905 	adc.w	r9, r3, r5
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	469a      	mov	sl, r3
 800877e:	4693      	mov	fp, r2
 8008780:	4652      	mov	r2, sl
 8008782:	465b      	mov	r3, fp
 8008784:	4640      	mov	r0, r8
 8008786:	4649      	mov	r1, r9
 8008788:	f7f7 fe02 	bl	8000390 <__aeabi_uldivmod>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4613      	mov	r3, r2
 8008792:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800879a:	d308      	bcc.n	80087ae <UART_SetConfig+0x79a>
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a2:	d204      	bcs.n	80087ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087aa:	60da      	str	r2, [r3, #12]
 80087ac:	e17c      	b.n	8008aa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087b4:	e178      	b.n	8008aa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087be:	f040 80c5 	bne.w	800894c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80087c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	dc48      	bgt.n	800885c <UART_SetConfig+0x848>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	db7b      	blt.n	80088c6 <UART_SetConfig+0x8b2>
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d879      	bhi.n	80088c6 <UART_SetConfig+0x8b2>
 80087d2:	a201      	add	r2, pc, #4	@ (adr r2, 80087d8 <UART_SetConfig+0x7c4>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	08008863 	.word	0x08008863
 80087dc:	0800886b 	.word	0x0800886b
 80087e0:	080088c7 	.word	0x080088c7
 80087e4:	080088c7 	.word	0x080088c7
 80087e8:	08008873 	.word	0x08008873
 80087ec:	080088c7 	.word	0x080088c7
 80087f0:	080088c7 	.word	0x080088c7
 80087f4:	080088c7 	.word	0x080088c7
 80087f8:	08008883 	.word	0x08008883
 80087fc:	080088c7 	.word	0x080088c7
 8008800:	080088c7 	.word	0x080088c7
 8008804:	080088c7 	.word	0x080088c7
 8008808:	080088c7 	.word	0x080088c7
 800880c:	080088c7 	.word	0x080088c7
 8008810:	080088c7 	.word	0x080088c7
 8008814:	080088c7 	.word	0x080088c7
 8008818:	08008893 	.word	0x08008893
 800881c:	080088c7 	.word	0x080088c7
 8008820:	080088c7 	.word	0x080088c7
 8008824:	080088c7 	.word	0x080088c7
 8008828:	080088c7 	.word	0x080088c7
 800882c:	080088c7 	.word	0x080088c7
 8008830:	080088c7 	.word	0x080088c7
 8008834:	080088c7 	.word	0x080088c7
 8008838:	080088c7 	.word	0x080088c7
 800883c:	080088c7 	.word	0x080088c7
 8008840:	080088c7 	.word	0x080088c7
 8008844:	080088c7 	.word	0x080088c7
 8008848:	080088c7 	.word	0x080088c7
 800884c:	080088c7 	.word	0x080088c7
 8008850:	080088c7 	.word	0x080088c7
 8008854:	080088c7 	.word	0x080088c7
 8008858:	080088b9 	.word	0x080088b9
 800885c:	2b40      	cmp	r3, #64	@ 0x40
 800885e:	d02e      	beq.n	80088be <UART_SetConfig+0x8aa>
 8008860:	e031      	b.n	80088c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008862:	f7fc ff0d 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 8008866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008868:	e033      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800886a:	f7fc ff1f 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 800886e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008870:	e02f      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008876:	4618      	mov	r0, r3
 8008878:	f7fe f94e 	bl	8006b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008880:	e027      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008882:	f107 0318 	add.w	r3, r7, #24
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fa9a 	bl	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008890:	e01f      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008892:	4b2d      	ldr	r3, [pc, #180]	@ (8008948 <UART_SetConfig+0x934>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800889e:	4b2a      	ldr	r3, [pc, #168]	@ (8008948 <UART_SetConfig+0x934>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	08db      	lsrs	r3, r3, #3
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	4a24      	ldr	r2, [pc, #144]	@ (800893c <UART_SetConfig+0x928>)
 80088aa:	fa22 f303 	lsr.w	r3, r2, r3
 80088ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088b0:	e00f      	b.n	80088d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80088b2:	4b22      	ldr	r3, [pc, #136]	@ (800893c <UART_SetConfig+0x928>)
 80088b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088b6:	e00c      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088b8:	4b21      	ldr	r3, [pc, #132]	@ (8008940 <UART_SetConfig+0x92c>)
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088bc:	e009      	b.n	80088d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c4:	e005      	b.n	80088d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80e7 	beq.w	8008aa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088de:	4a19      	ldr	r2, [pc, #100]	@ (8008944 <UART_SetConfig+0x930>)
 80088e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ec:	005a      	lsls	r2, r3, #1
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	441a      	add	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008902:	2b0f      	cmp	r3, #15
 8008904:	d916      	bls.n	8008934 <UART_SetConfig+0x920>
 8008906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800890c:	d212      	bcs.n	8008934 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	b29b      	uxth	r3, r3
 8008912:	f023 030f 	bic.w	r3, r3, #15
 8008916:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	b29b      	uxth	r3, r3
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	b29a      	uxth	r2, r3
 8008924:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008926:	4313      	orrs	r3, r2
 8008928:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008930:	60da      	str	r2, [r3, #12]
 8008932:	e0b9      	b.n	8008aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800893a:	e0b5      	b.n	8008aa8 <UART_SetConfig+0xa94>
 800893c:	03d09000 	.word	0x03d09000
 8008940:	003d0900 	.word	0x003d0900
 8008944:	0800b270 	.word	0x0800b270
 8008948:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800894c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008950:	2b20      	cmp	r3, #32
 8008952:	dc49      	bgt.n	80089e8 <UART_SetConfig+0x9d4>
 8008954:	2b00      	cmp	r3, #0
 8008956:	db7c      	blt.n	8008a52 <UART_SetConfig+0xa3e>
 8008958:	2b20      	cmp	r3, #32
 800895a:	d87a      	bhi.n	8008a52 <UART_SetConfig+0xa3e>
 800895c:	a201      	add	r2, pc, #4	@ (adr r2, 8008964 <UART_SetConfig+0x950>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	080089ef 	.word	0x080089ef
 8008968:	080089f7 	.word	0x080089f7
 800896c:	08008a53 	.word	0x08008a53
 8008970:	08008a53 	.word	0x08008a53
 8008974:	080089ff 	.word	0x080089ff
 8008978:	08008a53 	.word	0x08008a53
 800897c:	08008a53 	.word	0x08008a53
 8008980:	08008a53 	.word	0x08008a53
 8008984:	08008a0f 	.word	0x08008a0f
 8008988:	08008a53 	.word	0x08008a53
 800898c:	08008a53 	.word	0x08008a53
 8008990:	08008a53 	.word	0x08008a53
 8008994:	08008a53 	.word	0x08008a53
 8008998:	08008a53 	.word	0x08008a53
 800899c:	08008a53 	.word	0x08008a53
 80089a0:	08008a53 	.word	0x08008a53
 80089a4:	08008a1f 	.word	0x08008a1f
 80089a8:	08008a53 	.word	0x08008a53
 80089ac:	08008a53 	.word	0x08008a53
 80089b0:	08008a53 	.word	0x08008a53
 80089b4:	08008a53 	.word	0x08008a53
 80089b8:	08008a53 	.word	0x08008a53
 80089bc:	08008a53 	.word	0x08008a53
 80089c0:	08008a53 	.word	0x08008a53
 80089c4:	08008a53 	.word	0x08008a53
 80089c8:	08008a53 	.word	0x08008a53
 80089cc:	08008a53 	.word	0x08008a53
 80089d0:	08008a53 	.word	0x08008a53
 80089d4:	08008a53 	.word	0x08008a53
 80089d8:	08008a53 	.word	0x08008a53
 80089dc:	08008a53 	.word	0x08008a53
 80089e0:	08008a53 	.word	0x08008a53
 80089e4:	08008a45 	.word	0x08008a45
 80089e8:	2b40      	cmp	r3, #64	@ 0x40
 80089ea:	d02e      	beq.n	8008a4a <UART_SetConfig+0xa36>
 80089ec:	e031      	b.n	8008a52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ee:	f7fc fe47 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80089f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089f4:	e033      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f6:	f7fc fe59 	bl	80056ac <HAL_RCC_GetPCLK2Freq>
 80089fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089fc:	e02f      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fe f888 	bl	8006b18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0c:	e027      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0e:	f107 0318 	add.w	r3, r7, #24
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7fe f9d4 	bl	8006dc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a1c:	e01f      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ad4 <UART_SetConfig+0xac0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d009      	beq.n	8008a3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8008ad4 <UART_SetConfig+0xac0>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	08db      	lsrs	r3, r3, #3
 8008a30:	f003 0303 	and.w	r3, r3, #3
 8008a34:	4a28      	ldr	r2, [pc, #160]	@ (8008ad8 <UART_SetConfig+0xac4>)
 8008a36:	fa22 f303 	lsr.w	r3, r2, r3
 8008a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a3c:	e00f      	b.n	8008a5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008a3e:	4b26      	ldr	r3, [pc, #152]	@ (8008ad8 <UART_SetConfig+0xac4>)
 8008a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a42:	e00c      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a44:	4b25      	ldr	r3, [pc, #148]	@ (8008adc <UART_SetConfig+0xac8>)
 8008a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a48:	e009      	b.n	8008a5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a50:	e005      	b.n	8008a5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8008a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d021      	beq.n	8008aa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a68:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae0 <UART_SetConfig+0xacc>)
 8008a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	441a      	add	r2, r3
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8a:	2b0f      	cmp	r3, #15
 8008a8c:	d909      	bls.n	8008aa2 <UART_SetConfig+0xa8e>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a94:	d205      	bcs.n	8008aa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60da      	str	r2, [r3, #12]
 8008aa0:	e002      	b.n	8008aa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2200      	movs	r2, #0
 8008abc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ac4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3748      	adds	r7, #72	@ 0x48
 8008acc:	46bd      	mov	sp, r7
 8008ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ad2:	bf00      	nop
 8008ad4:	58024400 	.word	0x58024400
 8008ad8:	03d09000 	.word	0x03d09000
 8008adc:	003d0900 	.word	0x003d0900
 8008ae0:	0800b270 	.word	0x0800b270

08008ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af0:	f003 0308 	and.w	r3, r3, #8
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00a      	beq.n	8008b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00a      	beq.n	8008b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b56:	f003 0304 	and.w	r3, r3, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	430a      	orrs	r2, r1
 8008b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b78:	f003 0310 	and.w	r3, r3, #16
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00a      	beq.n	8008b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00a      	beq.n	8008bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01a      	beq.n	8008bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be2:	d10a      	bne.n	8008bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b098      	sub	sp, #96	@ 0x60
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c38:	f7f8 fe64 	bl	8001904 <HAL_GetTick>
 8008c3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d12f      	bne.n	8008cac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c54:	2200      	movs	r2, #0
 8008c56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f88e 	bl	8008d7c <UART_WaitOnFlagUntilTimeout>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d022      	beq.n	8008cac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	461a      	mov	r2, r3
 8008c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e6      	bne.n	8008c66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e063      	b.n	8008d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d149      	bne.n	8008d4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f857 	bl	8008d7c <UART_WaitOnFlagUntilTimeout>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d03c      	beq.n	8008d4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	461a      	mov	r2, r3
 8008cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cfa:	e841 2300 	strex	r3, r2, [r1]
 8008cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1e6      	bne.n	8008cd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f023 0301 	bic.w	r3, r3, #1
 8008d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	3308      	adds	r3, #8
 8008d24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d26:	61fa      	str	r2, [r7, #28]
 8008d28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	69b9      	ldr	r1, [r7, #24]
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	e841 2300 	strex	r3, r2, [r1]
 8008d32:	617b      	str	r3, [r7, #20]
   return(result);
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1e5      	bne.n	8008d06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e012      	b.n	8008d74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3758      	adds	r7, #88	@ 0x58
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d8c:	e04f      	b.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d94:	d04b      	beq.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d96:	f7f8 fdb5 	bl	8001904 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d302      	bcc.n	8008dac <UART_WaitOnFlagUntilTimeout+0x30>
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e04e      	b.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d037      	beq.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	2b80      	cmp	r3, #128	@ 0x80
 8008dc2:	d034      	beq.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2b40      	cmp	r3, #64	@ 0x40
 8008dc8:	d031      	beq.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d110      	bne.n	8008dfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2208      	movs	r2, #8
 8008dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f95b 	bl	800909c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2208      	movs	r2, #8
 8008dea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e029      	b.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e08:	d111      	bne.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f000 f941 	bl	800909c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2220      	movs	r2, #32
 8008e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e00f      	b.n	8008e4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	69da      	ldr	r2, [r3, #28]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4013      	ands	r3, r2
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	bf0c      	ite	eq
 8008e3e:	2301      	moveq	r3, #1
 8008e40:	2300      	movne	r3, #0
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d0a0      	beq.n	8008d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b0a3      	sub	sp, #140	@ 0x8c
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	88fa      	ldrh	r2, [r7, #6]
 8008e78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e8a:	d10e      	bne.n	8008eaa <UART_Start_Receive_IT+0x52>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d105      	bne.n	8008ea0 <UART_Start_Receive_IT+0x48>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008e9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008e9e:	e02d      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	22ff      	movs	r2, #255	@ 0xff
 8008ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ea8:	e028      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10d      	bne.n	8008ece <UART_Start_Receive_IT+0x76>
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <UART_Start_Receive_IT+0x6c>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	22ff      	movs	r2, #255	@ 0xff
 8008ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ec2:	e01b      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	227f      	movs	r2, #127	@ 0x7f
 8008ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ecc:	e016      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ed6:	d10d      	bne.n	8008ef4 <UART_Start_Receive_IT+0x9c>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d104      	bne.n	8008eea <UART_Start_Receive_IT+0x92>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	227f      	movs	r2, #127	@ 0x7f
 8008ee4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ee8:	e008      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	223f      	movs	r2, #63	@ 0x3f
 8008eee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ef2:	e003      	b.n	8008efc <UART_Start_Receive_IT+0xa4>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2200      	movs	r2, #0
 8008f00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2222      	movs	r2, #34	@ 0x22
 8008f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	3308      	adds	r3, #8
 8008f12:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f1e:	f043 0301 	orr.w	r3, r3, #1
 8008f22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008f30:	673a      	str	r2, [r7, #112]	@ 0x70
 8008f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008f36:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008f38:	e841 2300 	strex	r3, r2, [r1]
 8008f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008f3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e3      	bne.n	8008f0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f4c:	d14f      	bne.n	8008fee <UART_Start_Receive_IT+0x196>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f54:	88fa      	ldrh	r2, [r7, #6]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d349      	bcc.n	8008fee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f62:	d107      	bne.n	8008f74 <UART_Start_Receive_IT+0x11c>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4a47      	ldr	r2, [pc, #284]	@ (800908c <UART_Start_Receive_IT+0x234>)
 8008f70:	675a      	str	r2, [r3, #116]	@ 0x74
 8008f72:	e002      	b.n	8008f7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4a46      	ldr	r2, [pc, #280]	@ (8009090 <UART_Start_Receive_IT+0x238>)
 8008f78:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d01a      	beq.n	8008fb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f8a:	e853 3f00 	ldrex	r3, [r3]
 8008f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008f90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fa6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008faa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008fb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e4      	bne.n	8008f82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3308      	adds	r3, #8
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fc2:	e853 3f00 	ldrex	r3, [r3]
 8008fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008fd8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008fda:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e5      	bne.n	8008fb8 <UART_Start_Receive_IT+0x160>
 8008fec:	e046      	b.n	800907c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff6:	d107      	bne.n	8009008 <UART_Start_Receive_IT+0x1b0>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d103      	bne.n	8009008 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4a24      	ldr	r2, [pc, #144]	@ (8009094 <UART_Start_Receive_IT+0x23c>)
 8009004:	675a      	str	r2, [r3, #116]	@ 0x74
 8009006:	e002      	b.n	800900e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4a23      	ldr	r2, [pc, #140]	@ (8009098 <UART_Start_Receive_IT+0x240>)
 800900c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d019      	beq.n	800904a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	e853 3f00 	ldrex	r3, [r3]
 8009022:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800902a:	677b      	str	r3, [r7, #116]	@ 0x74
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	461a      	mov	r2, r3
 8009032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009034:	637b      	str	r3, [r7, #52]	@ 0x34
 8009036:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800903a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e6      	bne.n	8009016 <UART_Start_Receive_IT+0x1be>
 8009048:	e018      	b.n	800907c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	613b      	str	r3, [r7, #16]
   return(result);
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f043 0320 	orr.w	r3, r3, #32
 800905e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009068:	623b      	str	r3, [r7, #32]
 800906a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	69f9      	ldr	r1, [r7, #28]
 800906e:	6a3a      	ldr	r2, [r7, #32]
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	61bb      	str	r3, [r7, #24]
   return(result);
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e6      	bne.n	800904a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	378c      	adds	r7, #140	@ 0x8c
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	08009b7d 	.word	0x08009b7d
 8009090:	0800981d 	.word	0x0800981d
 8009094:	08009665 	.word	0x08009665
 8009098:	080094ad 	.word	0x080094ad

0800909c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b095      	sub	sp, #84	@ 0x54
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ac:	e853 3f00 	ldrex	r3, [r3]
 80090b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80090c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090ca:	e841 2300 	strex	r3, r2, [r1]
 80090ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1e6      	bne.n	80090a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	3308      	adds	r3, #8
 80090dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	4b1e      	ldr	r3, [pc, #120]	@ (8009164 <UART_EndRxTransfer+0xc8>)
 80090ea:	4013      	ands	r3, r2
 80090ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3308      	adds	r3, #8
 80090f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e5      	bne.n	80090d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800910e:	2b01      	cmp	r3, #1
 8009110:	d118      	bne.n	8009144 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	e853 3f00 	ldrex	r3, [r3]
 800911e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	f023 0310 	bic.w	r3, r3, #16
 8009126:	647b      	str	r3, [r7, #68]	@ 0x44
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009130:	61bb      	str	r3, [r7, #24]
 8009132:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009134:	6979      	ldr	r1, [r7, #20]
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	e841 2300 	strex	r3, r2, [r1]
 800913c:	613b      	str	r3, [r7, #16]
   return(result);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1e6      	bne.n	8009112 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2220      	movs	r2, #32
 8009148:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009158:	bf00      	nop
 800915a:	3754      	adds	r7, #84	@ 0x54
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	effffffe 	.word	0xeffffffe

08009168 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b08f      	sub	sp, #60	@ 0x3c
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009176:	2b21      	cmp	r3, #33	@ 0x21
 8009178:	d14c      	bne.n	8009214 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009180:	b29b      	uxth	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d132      	bne.n	80091ec <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	61fb      	str	r3, [r7, #28]
   return(result);
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091a6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e6      	bne.n	8009186 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091da:	6979      	ldr	r1, [r7, #20]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	e841 2300 	strex	r3, r2, [r1]
 80091e2:	613b      	str	r3, [r7, #16]
   return(result);
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1e6      	bne.n	80091b8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80091ea:	e013      	b.n	8009214 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f0:	781a      	ldrb	r2, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009208:	b29b      	uxth	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	b29a      	uxth	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8009214:	bf00      	nop
 8009216:	373c      	adds	r7, #60	@ 0x3c
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b091      	sub	sp, #68	@ 0x44
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800922e:	2b21      	cmp	r3, #33	@ 0x21
 8009230:	d151      	bne.n	80092d6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d132      	bne.n	80092a4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	623b      	str	r3, [r7, #32]
   return(result);
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009252:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925c:	633b      	str	r3, [r7, #48]	@ 0x30
 800925e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e6      	bne.n	800923e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	60fb      	str	r3, [r7, #12]
   return(result);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009284:	637b      	str	r3, [r7, #52]	@ 0x34
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800928e:	61fb      	str	r3, [r7, #28]
 8009290:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	69b9      	ldr	r1, [r7, #24]
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	617b      	str	r3, [r7, #20]
   return(result);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e6      	bne.n	8009270 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80092a2:	e018      	b.n	80092d6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80092aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092b8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092be:	1c9a      	adds	r2, r3, #2
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80092d6:	bf00      	nop
 80092d8:	3744      	adds	r7, #68	@ 0x44
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b091      	sub	sp, #68	@ 0x44
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f0:	2b21      	cmp	r3, #33	@ 0x21
 80092f2:	d160      	bne.n	80093b6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80092fc:	e057      	b.n	80093ae <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009304:	b29b      	uxth	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d133      	bne.n	8009372 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3308      	adds	r3, #8
 8009310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	623b      	str	r3, [r7, #32]
   return(result);
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009320:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800932a:	633a      	str	r2, [r7, #48]	@ 0x30
 800932c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009330:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e5      	bne.n	800930a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	e853 3f00 	ldrex	r3, [r3]
 800934a:	60fb      	str	r3, [r7, #12]
   return(result);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009352:	637b      	str	r3, [r7, #52]	@ 0x34
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	461a      	mov	r2, r3
 800935a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800935c:	61fb      	str	r3, [r7, #28]
 800935e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	69b9      	ldr	r1, [r7, #24]
 8009362:	69fa      	ldr	r2, [r7, #28]
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	617b      	str	r3, [r7, #20]
   return(result);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e6      	bne.n	800933e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009370:	e021      	b.n	80093b6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937c:	2b00      	cmp	r3, #0
 800937e:	d013      	beq.n	80093a8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009384:	781a      	ldrb	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009390:	1c5a      	adds	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800939c:	b29b      	uxth	r3, r3
 800939e:	3b01      	subs	r3, #1
 80093a0:	b29a      	uxth	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80093a8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093aa:	3b01      	subs	r3, #1
 80093ac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80093ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1a4      	bne.n	80092fe <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80093b4:	e7ff      	b.n	80093b6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80093b6:	bf00      	nop
 80093b8:	3744      	adds	r7, #68	@ 0x44
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b091      	sub	sp, #68	@ 0x44
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093d0:	2b21      	cmp	r3, #33	@ 0x21
 80093d2:	d165      	bne.n	80094a0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093da:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80093dc:	e05c      	b.n	8009498 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d133      	bne.n	8009452 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	6a3b      	ldr	r3, [r7, #32]
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009400:	637b      	str	r3, [r7, #52]	@ 0x34
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800940a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800940c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e5      	bne.n	80093ea <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	60bb      	str	r3, [r7, #8]
   return(result);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009432:	633b      	str	r3, [r7, #48]	@ 0x30
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	61bb      	str	r3, [r7, #24]
 800943e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6979      	ldr	r1, [r7, #20]
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	613b      	str	r3, [r7, #16]
   return(result);
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e6      	bne.n	800941e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009450:	e026      	b.n	80094a0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945c:	2b00      	cmp	r3, #0
 800945e:	d018      	beq.n	8009492 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009464:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009474:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800947a:	1c9a      	adds	r2, r3, #2
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009486:	b29b      	uxth	r3, r3
 8009488:	3b01      	subs	r3, #1
 800948a:	b29a      	uxth	r2, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009492:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009494:	3b01      	subs	r3, #1
 8009496:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009498:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800949a:	2b00      	cmp	r3, #0
 800949c:	d19f      	bne.n	80093de <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800949e:	e7ff      	b.n	80094a0 <UART_TxISR_16BIT_FIFOEN+0xde>
 80094a0:	bf00      	nop
 80094a2:	3744      	adds	r7, #68	@ 0x44
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b09c      	sub	sp, #112	@ 0x70
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094c4:	2b22      	cmp	r3, #34	@ 0x22
 80094c6:	f040 80be 	bne.w	8009646 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80094d8:	b2d9      	uxtb	r1, r3
 80094da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094e4:	400a      	ands	r2, r1
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	3b01      	subs	r3, #1
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800950c:	b29b      	uxth	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	f040 80a1 	bne.w	8009656 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009532:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009534:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009538:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e6      	bne.n	8009514 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	3308      	adds	r3, #8
 800954c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009550:	e853 3f00 	ldrex	r3, [r3]
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009558:	f023 0301 	bic.w	r3, r3, #1
 800955c:	667b      	str	r3, [r7, #100]	@ 0x64
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	3308      	adds	r3, #8
 8009564:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009566:	647a      	str	r2, [r7, #68]	@ 0x44
 8009568:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800956c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e5      	bne.n	8009546 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a33      	ldr	r2, [pc, #204]	@ (8009660 <UART_RxISR_8BIT+0x1b4>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d01f      	beq.n	80095d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d018      	beq.n	80095d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ae:	e853 3f00 	ldrex	r3, [r3]
 80095b2:	623b      	str	r3, [r7, #32]
   return(result);
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80095ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80095c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095cc:	e841 2300 	strex	r3, r2, [r1]
 80095d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1e6      	bne.n	80095a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d12e      	bne.n	800963e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0310 	bic.w	r3, r3, #16
 80095fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009604:	61fb      	str	r3, [r7, #28]
 8009606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	69fa      	ldr	r2, [r7, #28]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	617b      	str	r3, [r7, #20]
   return(result);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e6      	bne.n	80095e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	f003 0310 	and.w	r3, r3, #16
 8009622:	2b10      	cmp	r3, #16
 8009624:	d103      	bne.n	800962e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2210      	movs	r2, #16
 800962c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fe fce0 	bl	8007ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800963c:	e00b      	b.n	8009656 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f7 fd58 	bl	80010f4 <HAL_UART_RxCpltCallback>
}
 8009644:	e007      	b.n	8009656 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699a      	ldr	r2, [r3, #24]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0208 	orr.w	r2, r2, #8
 8009654:	619a      	str	r2, [r3, #24]
}
 8009656:	bf00      	nop
 8009658:	3770      	adds	r7, #112	@ 0x70
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	58000c00 	.word	0x58000c00

08009664 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b09c      	sub	sp, #112	@ 0x70
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009672:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800967c:	2b22      	cmp	r3, #34	@ 0x22
 800967e:	f040 80be 	bne.w	80097fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009688:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009690:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009692:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009696:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800969a:	4013      	ands	r3, r2
 800969c:	b29a      	uxth	r2, r3
 800969e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80096a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096a6:	1c9a      	adds	r2, r3, #2
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f040 80a1 	bne.w	800980e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80096ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80096f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e6      	bne.n	80096cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3308      	adds	r3, #8
 8009704:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	f023 0301 	bic.w	r3, r3, #1
 8009714:	663b      	str	r3, [r7, #96]	@ 0x60
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3308      	adds	r3, #8
 800971c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800971e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009720:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009724:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800972c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e5      	bne.n	80096fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2220      	movs	r2, #32
 8009736:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a33      	ldr	r2, [pc, #204]	@ (8009818 <UART_RxISR_16BIT+0x1b4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d01f      	beq.n	8009790 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d018      	beq.n	8009790 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	61fb      	str	r3, [r7, #28]
   return(result);
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009772:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800977c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800977e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800978a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e6      	bne.n	800975e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009794:	2b01      	cmp	r3, #1
 8009796:	d12e      	bne.n	80097f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f023 0310 	bic.w	r3, r3, #16
 80097b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6979      	ldr	r1, [r7, #20]
 80097c2:	69ba      	ldr	r2, [r7, #24]
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e6      	bne.n	800979e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	f003 0310 	and.w	r3, r3, #16
 80097da:	2b10      	cmp	r3, #16
 80097dc:	d103      	bne.n	80097e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2210      	movs	r2, #16
 80097e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80097ec:	4619      	mov	r1, r3
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f7fe fc04 	bl	8007ffc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097f4:	e00b      	b.n	800980e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7f7 fc7c 	bl	80010f4 <HAL_UART_RxCpltCallback>
}
 80097fc:	e007      	b.n	800980e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	699a      	ldr	r2, [r3, #24]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f042 0208 	orr.w	r2, r2, #8
 800980c:	619a      	str	r2, [r3, #24]
}
 800980e:	bf00      	nop
 8009810:	3770      	adds	r7, #112	@ 0x70
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	58000c00 	.word	0x58000c00

0800981c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b0ac      	sub	sp, #176	@ 0xb0
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800982a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009852:	2b22      	cmp	r3, #34	@ 0x22
 8009854:	f040 8180 	bne.w	8009b58 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800985e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009862:	e123      	b.n	8009aac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800986a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800986e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009872:	b2d9      	uxtb	r1, r3
 8009874:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009878:	b2da      	uxtb	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800987e:	400a      	ands	r2, r1
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009894:	b29b      	uxth	r3, r3
 8009896:	3b01      	subs	r3, #1
 8009898:	b29a      	uxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	69db      	ldr	r3, [r3, #28]
 80098a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ae:	f003 0307 	and.w	r3, r3, #7
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d053      	beq.n	800995e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d011      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80098c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80098c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2201      	movs	r2, #1
 80098d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098dc:	f043 0201 	orr.w	r2, r3, #1
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d011      	beq.n	8009916 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80098f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2202      	movs	r2, #2
 8009904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800990c:	f043 0204 	orr.w	r2, r3, #4
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800991a:	f003 0304 	and.w	r3, r3, #4
 800991e:	2b00      	cmp	r3, #0
 8009920:	d011      	beq.n	8009946 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00b      	beq.n	8009946 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2204      	movs	r2, #4
 8009934:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800993c:	f043 0202 	orr.w	r2, r3, #2
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800994c:	2b00      	cmp	r3, #0
 800994e:	d006      	beq.n	800995e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7fe fb49 	bl	8007fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009964:	b29b      	uxth	r3, r3
 8009966:	2b00      	cmp	r3, #0
 8009968:	f040 80a0 	bne.w	8009aac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800997a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800997c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009980:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800998e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009990:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009994:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009996:	e841 2300 	strex	r3, r2, [r1]
 800999a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800999c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e4      	bne.n	800996c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3308      	adds	r3, #8
 80099a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80099b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80099b4:	4b6e      	ldr	r3, [pc, #440]	@ (8009b70 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80099b6:	4013      	ands	r3, r2
 80099b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3308      	adds	r3, #8
 80099c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80099c6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80099c8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ca:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80099cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80099ce:	e841 2300 	strex	r3, r2, [r1]
 80099d2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80099d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1e3      	bne.n	80099a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2220      	movs	r2, #32
 80099de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a60      	ldr	r2, [pc, #384]	@ (8009b74 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d021      	beq.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d01a      	beq.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a2a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009a2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009a30:	e841 2300 	strex	r3, r2, [r1]
 8009a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1e4      	bne.n	8009a06 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d130      	bne.n	8009aa6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5a:	f023 0310 	bic.w	r3, r3, #16
 8009a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a74:	e841 2300 	strex	r3, r2, [r1]
 8009a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d1e4      	bne.n	8009a4a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	69db      	ldr	r3, [r3, #28]
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	2b10      	cmp	r3, #16
 8009a8c:	d103      	bne.n	8009a96 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2210      	movs	r2, #16
 8009a94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7fe faac 	bl	8007ffc <HAL_UARTEx_RxEventCallback>
 8009aa4:	e002      	b.n	8009aac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7f7 fb24 	bl	80010f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009aac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d006      	beq.n	8009ac2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8009ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ab8:	f003 0320 	and.w	r3, r3, #32
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f47f aed1 	bne.w	8009864 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ac8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009acc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d049      	beq.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ada:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d242      	bcs.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	e853 3f00 	ldrex	r3, [r3]
 8009af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e3      	bne.n	8009ae2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a16      	ldr	r2, [pc, #88]	@ (8009b78 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009b1e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	f043 0320 	orr.w	r3, r3, #32
 8009b34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6979      	ldr	r1, [r7, #20]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e4      	bne.n	8009b20 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b56:	e007      	b.n	8009b68 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	699a      	ldr	r2, [r3, #24]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f042 0208 	orr.w	r2, r2, #8
 8009b66:	619a      	str	r2, [r3, #24]
}
 8009b68:	bf00      	nop
 8009b6a:	37b0      	adds	r7, #176	@ 0xb0
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	effffffe 	.word	0xeffffffe
 8009b74:	58000c00 	.word	0x58000c00
 8009b78:	080094ad 	.word	0x080094ad

08009b7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b0ae      	sub	sp, #184	@ 0xb8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b8a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bb2:	2b22      	cmp	r3, #34	@ 0x22
 8009bb4:	f040 8184 	bne.w	8009ec0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009bbe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009bc2:	e127      	b.n	8009e14 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bca:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009bd6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009bda:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009bde:	4013      	ands	r3, r2
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009be6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bec:	1c9a      	adds	r2, r3, #2
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d053      	beq.n	8009cc2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c1e:	f003 0301 	and.w	r3, r3, #1
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d011      	beq.n	8009c4a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00b      	beq.n	8009c4a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	2201      	movs	r2, #1
 8009c38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c40:	f043 0201 	orr.w	r2, r3, #1
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d011      	beq.n	8009c7a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009c56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00b      	beq.n	8009c7a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2202      	movs	r2, #2
 8009c68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c70:	f043 0204 	orr.w	r2, r3, #4
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d011      	beq.n	8009caa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00b      	beq.n	8009caa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2204      	movs	r2, #4
 8009c98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca0:	f043 0202 	orr.w	r2, r3, #2
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d006      	beq.n	8009cc2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7fe f997 	bl	8007fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f040 80a2 	bne.w	8009e14 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ce4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cfe:	e841 2300 	strex	r3, r2, [r1]
 8009d02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009d04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1e2      	bne.n	8009cd0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d14:	e853 3f00 	ldrex	r3, [r3]
 8009d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009d1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009d1c:	4b6e      	ldr	r3, [pc, #440]	@ (8009ed8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8009d1e:	4013      	ands	r3, r2
 8009d20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009d2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e3      	bne.n	8009d0a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2220      	movs	r2, #32
 8009d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a60      	ldr	r2, [pc, #384]	@ (8009edc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d021      	beq.n	8009da4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d01a      	beq.n	8009da4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d76:	e853 3f00 	ldrex	r3, [r3]
 8009d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d92:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d96:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e4      	bne.n	8009d6e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d130      	bne.n	8009e0e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc2:	f023 0310 	bic.w	r3, r3, #16
 8009dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e4      	bne.n	8009db2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f003 0310 	and.w	r3, r3, #16
 8009df2:	2b10      	cmp	r3, #16
 8009df4:	d103      	bne.n	8009dfe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2210      	movs	r2, #16
 8009dfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f7fe f8f8 	bl	8007ffc <HAL_UARTEx_RxEventCallback>
 8009e0c:	e002      	b.n	8009e14 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7f7 f970 	bl	80010f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e14:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d006      	beq.n	8009e2a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8009e1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009e20:	f003 0320 	and.w	r3, r3, #32
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f47f aecd 	bne.w	8009bc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e30:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e34:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d049      	beq.n	8009ed0 <UART_RxISR_16BIT_FIFOEN+0x354>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009e42:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d242      	bcs.n	8009ed0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	623b      	str	r3, [r7, #32]
   return(result);
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009e6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1e3      	bne.n	8009e4a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	4a16      	ldr	r2, [pc, #88]	@ (8009ee0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009e86:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f043 0320 	orr.w	r3, r3, #32
 8009e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009eaa:	61fb      	str	r3, [r7, #28]
 8009eac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	69b9      	ldr	r1, [r7, #24]
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e4      	bne.n	8009e88 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ebe:	e007      	b.n	8009ed0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0208 	orr.w	r2, r2, #8
 8009ece:	619a      	str	r2, [r3, #24]
}
 8009ed0:	bf00      	nop
 8009ed2:	37b8      	adds	r7, #184	@ 0xb8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	effffffe 	.word	0xeffffffe
 8009edc:	58000c00 	.word	0x58000c00
 8009ee0:	08009665 	.word	0x08009665

08009ee4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_UARTEx_DisableFifoMode+0x16>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e027      	b.n	8009f4a <HAL_UARTEx_DisableFifoMode+0x66>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2224      	movs	r2, #36	@ 0x24
 8009f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f022 0201 	bic.w	r2, r2, #1
 8009f20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	6078      	str	r0, [r7, #4]
 8009f5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d101      	bne.n	8009f6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	e02d      	b.n	8009fca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2224      	movs	r2, #36	@ 0x24
 8009f7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 0201 	bic.w	r2, r2, #1
 8009f94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f850 	bl	800a050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d101      	bne.n	8009fea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	e02d      	b.n	800a046 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2224      	movs	r2, #36	@ 0x24
 8009ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f812 	bl	800a050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2220      	movs	r2, #32
 800a038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d108      	bne.n	800a072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a070:	e031      	b.n	800a0d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a072:	2310      	movs	r3, #16
 800a074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a076:	2310      	movs	r3, #16
 800a078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	0e5b      	lsrs	r3, r3, #25
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	0f5b      	lsrs	r3, r3, #29
 800a092:	b2db      	uxtb	r3, r3
 800a094:	f003 0307 	and.w	r3, r3, #7
 800a098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	7b3a      	ldrb	r2, [r7, #12]
 800a09e:	4911      	ldr	r1, [pc, #68]	@ (800a0e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a0a0:	5c8a      	ldrb	r2, [r1, r2]
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0a6:	7b3a      	ldrb	r2, [r7, #12]
 800a0a8:	490f      	ldr	r1, [pc, #60]	@ (800a0e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a0aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	7b7a      	ldrb	r2, [r7, #13]
 800a0bc:	4909      	ldr	r1, [pc, #36]	@ (800a0e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a0be:	5c8a      	ldrb	r2, [r1, r2]
 800a0c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0c4:	7b7a      	ldrb	r2, [r7, #13]
 800a0c6:	4908      	ldr	r1, [pc, #32]	@ (800a0e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a0c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	0800b288 	.word	0x0800b288
 800a0e8:	0800b290 	.word	0x0800b290

0800a0ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0ec:	b084      	sub	sp, #16
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	f107 001c 	add.w	r0, r7, #28
 800a0fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a102:	2b01      	cmp	r3, #1
 800a104:	d121      	bne.n	800a14a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	4b2c      	ldr	r3, [pc, #176]	@ (800a1c8 <USB_CoreInit+0xdc>)
 800a118:	4013      	ands	r3, r2
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a12a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d105      	bne.n	800a13e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 faaa 	bl	800a698 <USB_CoreReset>
 800a144:	4603      	mov	r3, r0
 800a146:	73fb      	strb	r3, [r7, #15]
 800a148:	e01b      	b.n	800a182 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fa9e 	bl	800a698 <USB_CoreReset>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a160:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	639a      	str	r2, [r3, #56]	@ 0x38
 800a174:	e005      	b.n	800a182 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a17a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a182:	7fbb      	ldrb	r3, [r7, #30]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d116      	bne.n	800a1b6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a196:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <USB_CoreInit+0xe0>)
 800a198:	4313      	orrs	r3, r2
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f043 0206 	orr.w	r2, r3, #6
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	f043 0220 	orr.w	r2, r3, #32
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1c2:	b004      	add	sp, #16
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	ffbdffbf 	.word	0xffbdffbf
 800a1cc:	03ee0000 	.word	0x03ee0000

0800a1d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f023 0201 	bic.w	r2, r3, #1
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	370c      	adds	r7, #12
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f0:	4770      	bx	lr

0800a1f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d115      	bne.n	800a240 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a220:	200a      	movs	r0, #10
 800a222:	f7f7 fb7b 	bl	800191c <HAL_Delay>
      ms += 10U;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	330a      	adds	r3, #10
 800a22a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fa25 	bl	800a67c <USB_GetMode>
 800a232:	4603      	mov	r3, r0
 800a234:	2b01      	cmp	r3, #1
 800a236:	d01e      	beq.n	800a276 <USB_SetCurrentMode+0x84>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a23c:	d9f0      	bls.n	800a220 <USB_SetCurrentMode+0x2e>
 800a23e:	e01a      	b.n	800a276 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a240:	78fb      	ldrb	r3, [r7, #3]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d115      	bne.n	800a272 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a252:	200a      	movs	r0, #10
 800a254:	f7f7 fb62 	bl	800191c <HAL_Delay>
      ms += 10U;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	330a      	adds	r3, #10
 800a25c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fa0c 	bl	800a67c <USB_GetMode>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <USB_SetCurrentMode+0x84>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a26e:	d9f0      	bls.n	800a252 <USB_SetCurrentMode+0x60>
 800a270:	e001      	b.n	800a276 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e005      	b.n	800a282 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2bc8      	cmp	r3, #200	@ 0xc8
 800a27a:	d101      	bne.n	800a280 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e000      	b.n	800a282 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
	...

0800a28c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a28c:	b084      	sub	sp, #16
 800a28e:	b580      	push	{r7, lr}
 800a290:	b086      	sub	sp, #24
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a29a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	613b      	str	r3, [r7, #16]
 800a2aa:	e009      	b.n	800a2c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	3340      	adds	r3, #64	@ 0x40
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	613b      	str	r3, [r7, #16]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2b0e      	cmp	r3, #14
 800a2c4:	d9f2      	bls.n	800a2ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a2c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d11c      	bne.n	800a308 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2dc:	f043 0302 	orr.w	r3, r3, #2
 800a2e0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	e005      	b.n	800a314 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a31a:	461a      	mov	r2, r3
 800a31c:	2300      	movs	r3, #0
 800a31e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a320:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a324:	2b01      	cmp	r3, #1
 800a326:	d10d      	bne.n	800a344 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d104      	bne.n	800a33a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a330:	2100      	movs	r1, #0
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 f968 	bl	800a608 <USB_SetDevSpeed>
 800a338:	e008      	b.n	800a34c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a33a:	2101      	movs	r1, #1
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 f963 	bl	800a608 <USB_SetDevSpeed>
 800a342:	e003      	b.n	800a34c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a344:	2103      	movs	r1, #3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f95e 	bl	800a608 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a34c:	2110      	movs	r1, #16
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f8fa 	bl	800a548 <USB_FlushTxFifo>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f924 	bl	800a5ac <USB_FlushRxFifo>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d001      	beq.n	800a36e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a374:	461a      	mov	r2, r3
 800a376:	2300      	movs	r3, #0
 800a378:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a380:	461a      	mov	r2, r3
 800a382:	2300      	movs	r3, #0
 800a384:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a38c:	461a      	mov	r2, r3
 800a38e:	2300      	movs	r3, #0
 800a390:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a392:	2300      	movs	r3, #0
 800a394:	613b      	str	r3, [r7, #16]
 800a396:	e043      	b.n	800a420 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3ae:	d118      	bne.n	800a3e2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10a      	bne.n	800a3cc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	e013      	b.n	800a3f4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	015a      	lsls	r2, r3, #5
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d8:	461a      	mov	r2, r3
 800a3da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e008      	b.n	800a3f4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a400:	461a      	mov	r2, r3
 800a402:	2300      	movs	r3, #0
 800a404:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	015a      	lsls	r2, r3, #5
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a412:	461a      	mov	r2, r3
 800a414:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a418:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	3301      	adds	r3, #1
 800a41e:	613b      	str	r3, [r7, #16]
 800a420:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a424:	461a      	mov	r2, r3
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	4293      	cmp	r3, r2
 800a42a:	d3b5      	bcc.n	800a398 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a42c:	2300      	movs	r3, #0
 800a42e:	613b      	str	r3, [r7, #16]
 800a430:	e043      	b.n	800a4ba <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	015a      	lsls	r2, r3, #5
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	4413      	add	r3, r2
 800a43a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a448:	d118      	bne.n	800a47c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10a      	bne.n	800a466 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a45c:	461a      	mov	r2, r3
 800a45e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	e013      	b.n	800a48e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a472:	461a      	mov	r2, r3
 800a474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	e008      	b.n	800a48e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a488:	461a      	mov	r2, r3
 800a48a:	2300      	movs	r3, #0
 800a48c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	461a      	mov	r2, r3
 800a49c:	2300      	movs	r3, #0
 800a49e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	613b      	str	r3, [r7, #16]
 800a4ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4be:	461a      	mov	r2, r3
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d3b5      	bcc.n	800a432 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a4d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a4e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a4e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d105      	bne.n	800a4fc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	f043 0210 	orr.w	r2, r3, #16
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	699a      	ldr	r2, [r3, #24]
 800a500:	4b0f      	ldr	r3, [pc, #60]	@ (800a540 <USB_DevInit+0x2b4>)
 800a502:	4313      	orrs	r3, r2
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a508:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d005      	beq.n	800a51c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	f043 0208 	orr.w	r2, r3, #8
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a51c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a520:	2b01      	cmp	r3, #1
 800a522:	d105      	bne.n	800a530 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	699a      	ldr	r2, [r3, #24]
 800a528:	4b06      	ldr	r3, [pc, #24]	@ (800a544 <USB_DevInit+0x2b8>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a530:	7dfb      	ldrb	r3, [r7, #23]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3718      	adds	r7, #24
 800a536:	46bd      	mov	sp, r7
 800a538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a53c:	b004      	add	sp, #16
 800a53e:	4770      	bx	lr
 800a540:	803c3800 	.word	0x803c3800
 800a544:	40000004 	.word	0x40000004

0800a548 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3301      	adds	r3, #1
 800a55a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a562:	d901      	bls.n	800a568 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a564:	2303      	movs	r3, #3
 800a566:	e01b      	b.n	800a5a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	daf2      	bge.n	800a556 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a570:	2300      	movs	r3, #0
 800a572:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	019b      	lsls	r3, r3, #6
 800a578:	f043 0220 	orr.w	r2, r3, #32
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a58c:	d901      	bls.n	800a592 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e006      	b.n	800a5a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	f003 0320 	and.w	r3, r3, #32
 800a59a:	2b20      	cmp	r3, #32
 800a59c:	d0f0      	beq.n	800a580 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5c4:	d901      	bls.n	800a5ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	e018      	b.n	800a5fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	daf2      	bge.n	800a5b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2210      	movs	r2, #16
 800a5da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5e8:	d901      	bls.n	800a5ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	e006      	b.n	800a5fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	f003 0310 	and.w	r3, r3, #16
 800a5f6:	2b10      	cmp	r3, #16
 800a5f8:	d0f0      	beq.n	800a5dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	460b      	mov	r3, r1
 800a612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	78fb      	ldrb	r3, [r7, #3]
 800a622:	68f9      	ldr	r1, [r7, #12]
 800a624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a628:	4313      	orrs	r3, r2
 800a62a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a654:	f023 0303 	bic.w	r3, r3, #3
 800a658:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a668:	f043 0302 	orr.w	r3, r3, #2
 800a66c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	f003 0301 	and.w	r3, r3, #1
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6b0:	d901      	bls.n	800a6b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e01b      	b.n	800a6ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	daf2      	bge.n	800a6a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	f043 0201 	orr.w	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a6da:	d901      	bls.n	800a6e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e006      	b.n	800a6ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d0f0      	beq.n	800a6ce <USB_CoreReset+0x36>

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <atoi>:
 800a6fa:	220a      	movs	r2, #10
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	f000 b87b 	b.w	800a7f8 <strtol>
	...

0800a704 <_strtol_l.constprop.0>:
 800a704:	2b24      	cmp	r3, #36	@ 0x24
 800a706:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a70a:	4686      	mov	lr, r0
 800a70c:	4690      	mov	r8, r2
 800a70e:	d801      	bhi.n	800a714 <_strtol_l.constprop.0+0x10>
 800a710:	2b01      	cmp	r3, #1
 800a712:	d106      	bne.n	800a722 <_strtol_l.constprop.0+0x1e>
 800a714:	f000 f8c8 	bl	800a8a8 <__errno>
 800a718:	2316      	movs	r3, #22
 800a71a:	6003      	str	r3, [r0, #0]
 800a71c:	2000      	movs	r0, #0
 800a71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a722:	4834      	ldr	r0, [pc, #208]	@ (800a7f4 <_strtol_l.constprop.0+0xf0>)
 800a724:	460d      	mov	r5, r1
 800a726:	462a      	mov	r2, r5
 800a728:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a72c:	5d06      	ldrb	r6, [r0, r4]
 800a72e:	f016 0608 	ands.w	r6, r6, #8
 800a732:	d1f8      	bne.n	800a726 <_strtol_l.constprop.0+0x22>
 800a734:	2c2d      	cmp	r4, #45	@ 0x2d
 800a736:	d12d      	bne.n	800a794 <_strtol_l.constprop.0+0x90>
 800a738:	782c      	ldrb	r4, [r5, #0]
 800a73a:	2601      	movs	r6, #1
 800a73c:	1c95      	adds	r5, r2, #2
 800a73e:	f033 0210 	bics.w	r2, r3, #16
 800a742:	d109      	bne.n	800a758 <_strtol_l.constprop.0+0x54>
 800a744:	2c30      	cmp	r4, #48	@ 0x30
 800a746:	d12a      	bne.n	800a79e <_strtol_l.constprop.0+0x9a>
 800a748:	782a      	ldrb	r2, [r5, #0]
 800a74a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a74e:	2a58      	cmp	r2, #88	@ 0x58
 800a750:	d125      	bne.n	800a79e <_strtol_l.constprop.0+0x9a>
 800a752:	786c      	ldrb	r4, [r5, #1]
 800a754:	2310      	movs	r3, #16
 800a756:	3502      	adds	r5, #2
 800a758:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a75c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a760:	2200      	movs	r2, #0
 800a762:	fbbc f9f3 	udiv	r9, ip, r3
 800a766:	4610      	mov	r0, r2
 800a768:	fb03 ca19 	mls	sl, r3, r9, ip
 800a76c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a770:	2f09      	cmp	r7, #9
 800a772:	d81b      	bhi.n	800a7ac <_strtol_l.constprop.0+0xa8>
 800a774:	463c      	mov	r4, r7
 800a776:	42a3      	cmp	r3, r4
 800a778:	dd27      	ble.n	800a7ca <_strtol_l.constprop.0+0xc6>
 800a77a:	1c57      	adds	r7, r2, #1
 800a77c:	d007      	beq.n	800a78e <_strtol_l.constprop.0+0x8a>
 800a77e:	4581      	cmp	r9, r0
 800a780:	d320      	bcc.n	800a7c4 <_strtol_l.constprop.0+0xc0>
 800a782:	d101      	bne.n	800a788 <_strtol_l.constprop.0+0x84>
 800a784:	45a2      	cmp	sl, r4
 800a786:	db1d      	blt.n	800a7c4 <_strtol_l.constprop.0+0xc0>
 800a788:	fb00 4003 	mla	r0, r0, r3, r4
 800a78c:	2201      	movs	r2, #1
 800a78e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a792:	e7eb      	b.n	800a76c <_strtol_l.constprop.0+0x68>
 800a794:	2c2b      	cmp	r4, #43	@ 0x2b
 800a796:	bf04      	itt	eq
 800a798:	782c      	ldrbeq	r4, [r5, #0]
 800a79a:	1c95      	addeq	r5, r2, #2
 800a79c:	e7cf      	b.n	800a73e <_strtol_l.constprop.0+0x3a>
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d1da      	bne.n	800a758 <_strtol_l.constprop.0+0x54>
 800a7a2:	2c30      	cmp	r4, #48	@ 0x30
 800a7a4:	bf0c      	ite	eq
 800a7a6:	2308      	moveq	r3, #8
 800a7a8:	230a      	movne	r3, #10
 800a7aa:	e7d5      	b.n	800a758 <_strtol_l.constprop.0+0x54>
 800a7ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a7b0:	2f19      	cmp	r7, #25
 800a7b2:	d801      	bhi.n	800a7b8 <_strtol_l.constprop.0+0xb4>
 800a7b4:	3c37      	subs	r4, #55	@ 0x37
 800a7b6:	e7de      	b.n	800a776 <_strtol_l.constprop.0+0x72>
 800a7b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a7bc:	2f19      	cmp	r7, #25
 800a7be:	d804      	bhi.n	800a7ca <_strtol_l.constprop.0+0xc6>
 800a7c0:	3c57      	subs	r4, #87	@ 0x57
 800a7c2:	e7d8      	b.n	800a776 <_strtol_l.constprop.0+0x72>
 800a7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c8:	e7e1      	b.n	800a78e <_strtol_l.constprop.0+0x8a>
 800a7ca:	1c53      	adds	r3, r2, #1
 800a7cc:	d108      	bne.n	800a7e0 <_strtol_l.constprop.0+0xdc>
 800a7ce:	2322      	movs	r3, #34	@ 0x22
 800a7d0:	f8ce 3000 	str.w	r3, [lr]
 800a7d4:	4660      	mov	r0, ip
 800a7d6:	f1b8 0f00 	cmp.w	r8, #0
 800a7da:	d0a0      	beq.n	800a71e <_strtol_l.constprop.0+0x1a>
 800a7dc:	1e69      	subs	r1, r5, #1
 800a7de:	e006      	b.n	800a7ee <_strtol_l.constprop.0+0xea>
 800a7e0:	b106      	cbz	r6, 800a7e4 <_strtol_l.constprop.0+0xe0>
 800a7e2:	4240      	negs	r0, r0
 800a7e4:	f1b8 0f00 	cmp.w	r8, #0
 800a7e8:	d099      	beq.n	800a71e <_strtol_l.constprop.0+0x1a>
 800a7ea:	2a00      	cmp	r2, #0
 800a7ec:	d1f6      	bne.n	800a7dc <_strtol_l.constprop.0+0xd8>
 800a7ee:	f8c8 1000 	str.w	r1, [r8]
 800a7f2:	e794      	b.n	800a71e <_strtol_l.constprop.0+0x1a>
 800a7f4:	0800b299 	.word	0x0800b299

0800a7f8 <strtol>:
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	460a      	mov	r2, r1
 800a7fc:	4601      	mov	r1, r0
 800a7fe:	4802      	ldr	r0, [pc, #8]	@ (800a808 <strtol+0x10>)
 800a800:	6800      	ldr	r0, [r0, #0]
 800a802:	f7ff bf7f 	b.w	800a704 <_strtol_l.constprop.0>
 800a806:	bf00      	nop
 800a808:	24000010 	.word	0x24000010

0800a80c <siprintf>:
 800a80c:	b40e      	push	{r1, r2, r3}
 800a80e:	b500      	push	{lr}
 800a810:	b09c      	sub	sp, #112	@ 0x70
 800a812:	ab1d      	add	r3, sp, #116	@ 0x74
 800a814:	9002      	str	r0, [sp, #8]
 800a816:	9006      	str	r0, [sp, #24]
 800a818:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a81c:	4809      	ldr	r0, [pc, #36]	@ (800a844 <siprintf+0x38>)
 800a81e:	9107      	str	r1, [sp, #28]
 800a820:	9104      	str	r1, [sp, #16]
 800a822:	4909      	ldr	r1, [pc, #36]	@ (800a848 <siprintf+0x3c>)
 800a824:	f853 2b04 	ldr.w	r2, [r3], #4
 800a828:	9105      	str	r1, [sp, #20]
 800a82a:	6800      	ldr	r0, [r0, #0]
 800a82c:	9301      	str	r3, [sp, #4]
 800a82e:	a902      	add	r1, sp, #8
 800a830:	f000 f9ba 	bl	800aba8 <_svfiprintf_r>
 800a834:	9b02      	ldr	r3, [sp, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	701a      	strb	r2, [r3, #0]
 800a83a:	b01c      	add	sp, #112	@ 0x70
 800a83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a840:	b003      	add	sp, #12
 800a842:	4770      	bx	lr
 800a844:	24000010 	.word	0x24000010
 800a848:	ffff0208 	.word	0xffff0208

0800a84c <memset>:
 800a84c:	4402      	add	r2, r0
 800a84e:	4603      	mov	r3, r0
 800a850:	4293      	cmp	r3, r2
 800a852:	d100      	bne.n	800a856 <memset+0xa>
 800a854:	4770      	bx	lr
 800a856:	f803 1b01 	strb.w	r1, [r3], #1
 800a85a:	e7f9      	b.n	800a850 <memset+0x4>

0800a85c <strncmp>:
 800a85c:	b510      	push	{r4, lr}
 800a85e:	b16a      	cbz	r2, 800a87c <strncmp+0x20>
 800a860:	3901      	subs	r1, #1
 800a862:	1884      	adds	r4, r0, r2
 800a864:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a868:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d103      	bne.n	800a878 <strncmp+0x1c>
 800a870:	42a0      	cmp	r0, r4
 800a872:	d001      	beq.n	800a878 <strncmp+0x1c>
 800a874:	2a00      	cmp	r2, #0
 800a876:	d1f5      	bne.n	800a864 <strncmp+0x8>
 800a878:	1ad0      	subs	r0, r2, r3
 800a87a:	bd10      	pop	{r4, pc}
 800a87c:	4610      	mov	r0, r2
 800a87e:	e7fc      	b.n	800a87a <strncmp+0x1e>

0800a880 <strncpy>:
 800a880:	b510      	push	{r4, lr}
 800a882:	3901      	subs	r1, #1
 800a884:	4603      	mov	r3, r0
 800a886:	b132      	cbz	r2, 800a896 <strncpy+0x16>
 800a888:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a88c:	f803 4b01 	strb.w	r4, [r3], #1
 800a890:	3a01      	subs	r2, #1
 800a892:	2c00      	cmp	r4, #0
 800a894:	d1f7      	bne.n	800a886 <strncpy+0x6>
 800a896:	441a      	add	r2, r3
 800a898:	2100      	movs	r1, #0
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d100      	bne.n	800a8a0 <strncpy+0x20>
 800a89e:	bd10      	pop	{r4, pc}
 800a8a0:	f803 1b01 	strb.w	r1, [r3], #1
 800a8a4:	e7f9      	b.n	800a89a <strncpy+0x1a>
	...

0800a8a8 <__errno>:
 800a8a8:	4b01      	ldr	r3, [pc, #4]	@ (800a8b0 <__errno+0x8>)
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	4770      	bx	lr
 800a8ae:	bf00      	nop
 800a8b0:	24000010 	.word	0x24000010

0800a8b4 <__libc_init_array>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	4d0d      	ldr	r5, [pc, #52]	@ (800a8ec <__libc_init_array+0x38>)
 800a8b8:	4c0d      	ldr	r4, [pc, #52]	@ (800a8f0 <__libc_init_array+0x3c>)
 800a8ba:	1b64      	subs	r4, r4, r5
 800a8bc:	10a4      	asrs	r4, r4, #2
 800a8be:	2600      	movs	r6, #0
 800a8c0:	42a6      	cmp	r6, r4
 800a8c2:	d109      	bne.n	800a8d8 <__libc_init_array+0x24>
 800a8c4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8f4 <__libc_init_array+0x40>)
 800a8c6:	4c0c      	ldr	r4, [pc, #48]	@ (800a8f8 <__libc_init_array+0x44>)
 800a8c8:	f000 fc66 	bl	800b198 <_init>
 800a8cc:	1b64      	subs	r4, r4, r5
 800a8ce:	10a4      	asrs	r4, r4, #2
 800a8d0:	2600      	movs	r6, #0
 800a8d2:	42a6      	cmp	r6, r4
 800a8d4:	d105      	bne.n	800a8e2 <__libc_init_array+0x2e>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8dc:	4798      	blx	r3
 800a8de:	3601      	adds	r6, #1
 800a8e0:	e7ee      	b.n	800a8c0 <__libc_init_array+0xc>
 800a8e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e6:	4798      	blx	r3
 800a8e8:	3601      	adds	r6, #1
 800a8ea:	e7f2      	b.n	800a8d2 <__libc_init_array+0x1e>
 800a8ec:	0800b3d4 	.word	0x0800b3d4
 800a8f0:	0800b3d4 	.word	0x0800b3d4
 800a8f4:	0800b3d4 	.word	0x0800b3d4
 800a8f8:	0800b3d8 	.word	0x0800b3d8

0800a8fc <__retarget_lock_acquire_recursive>:
 800a8fc:	4770      	bx	lr

0800a8fe <__retarget_lock_release_recursive>:
 800a8fe:	4770      	bx	lr

0800a900 <_free_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4605      	mov	r5, r0
 800a904:	2900      	cmp	r1, #0
 800a906:	d041      	beq.n	800a98c <_free_r+0x8c>
 800a908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a90c:	1f0c      	subs	r4, r1, #4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	bfb8      	it	lt
 800a912:	18e4      	addlt	r4, r4, r3
 800a914:	f000 f8e0 	bl	800aad8 <__malloc_lock>
 800a918:	4a1d      	ldr	r2, [pc, #116]	@ (800a990 <_free_r+0x90>)
 800a91a:	6813      	ldr	r3, [r2, #0]
 800a91c:	b933      	cbnz	r3, 800a92c <_free_r+0x2c>
 800a91e:	6063      	str	r3, [r4, #4]
 800a920:	6014      	str	r4, [r2, #0]
 800a922:	4628      	mov	r0, r5
 800a924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a928:	f000 b8dc 	b.w	800aae4 <__malloc_unlock>
 800a92c:	42a3      	cmp	r3, r4
 800a92e:	d908      	bls.n	800a942 <_free_r+0x42>
 800a930:	6820      	ldr	r0, [r4, #0]
 800a932:	1821      	adds	r1, r4, r0
 800a934:	428b      	cmp	r3, r1
 800a936:	bf01      	itttt	eq
 800a938:	6819      	ldreq	r1, [r3, #0]
 800a93a:	685b      	ldreq	r3, [r3, #4]
 800a93c:	1809      	addeq	r1, r1, r0
 800a93e:	6021      	streq	r1, [r4, #0]
 800a940:	e7ed      	b.n	800a91e <_free_r+0x1e>
 800a942:	461a      	mov	r2, r3
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	b10b      	cbz	r3, 800a94c <_free_r+0x4c>
 800a948:	42a3      	cmp	r3, r4
 800a94a:	d9fa      	bls.n	800a942 <_free_r+0x42>
 800a94c:	6811      	ldr	r1, [r2, #0]
 800a94e:	1850      	adds	r0, r2, r1
 800a950:	42a0      	cmp	r0, r4
 800a952:	d10b      	bne.n	800a96c <_free_r+0x6c>
 800a954:	6820      	ldr	r0, [r4, #0]
 800a956:	4401      	add	r1, r0
 800a958:	1850      	adds	r0, r2, r1
 800a95a:	4283      	cmp	r3, r0
 800a95c:	6011      	str	r1, [r2, #0]
 800a95e:	d1e0      	bne.n	800a922 <_free_r+0x22>
 800a960:	6818      	ldr	r0, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	6053      	str	r3, [r2, #4]
 800a966:	4408      	add	r0, r1
 800a968:	6010      	str	r0, [r2, #0]
 800a96a:	e7da      	b.n	800a922 <_free_r+0x22>
 800a96c:	d902      	bls.n	800a974 <_free_r+0x74>
 800a96e:	230c      	movs	r3, #12
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	e7d6      	b.n	800a922 <_free_r+0x22>
 800a974:	6820      	ldr	r0, [r4, #0]
 800a976:	1821      	adds	r1, r4, r0
 800a978:	428b      	cmp	r3, r1
 800a97a:	bf04      	itt	eq
 800a97c:	6819      	ldreq	r1, [r3, #0]
 800a97e:	685b      	ldreq	r3, [r3, #4]
 800a980:	6063      	str	r3, [r4, #4]
 800a982:	bf04      	itt	eq
 800a984:	1809      	addeq	r1, r1, r0
 800a986:	6021      	streq	r1, [r4, #0]
 800a988:	6054      	str	r4, [r2, #4]
 800a98a:	e7ca      	b.n	800a922 <_free_r+0x22>
 800a98c:	bd38      	pop	{r3, r4, r5, pc}
 800a98e:	bf00      	nop
 800a990:	2400083c 	.word	0x2400083c

0800a994 <sbrk_aligned>:
 800a994:	b570      	push	{r4, r5, r6, lr}
 800a996:	4e0f      	ldr	r6, [pc, #60]	@ (800a9d4 <sbrk_aligned+0x40>)
 800a998:	460c      	mov	r4, r1
 800a99a:	6831      	ldr	r1, [r6, #0]
 800a99c:	4605      	mov	r5, r0
 800a99e:	b911      	cbnz	r1, 800a9a6 <sbrk_aligned+0x12>
 800a9a0:	f000 fba6 	bl	800b0f0 <_sbrk_r>
 800a9a4:	6030      	str	r0, [r6, #0]
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4628      	mov	r0, r5
 800a9aa:	f000 fba1 	bl	800b0f0 <_sbrk_r>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d103      	bne.n	800a9ba <sbrk_aligned+0x26>
 800a9b2:	f04f 34ff 	mov.w	r4, #4294967295
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	1cc4      	adds	r4, r0, #3
 800a9bc:	f024 0403 	bic.w	r4, r4, #3
 800a9c0:	42a0      	cmp	r0, r4
 800a9c2:	d0f8      	beq.n	800a9b6 <sbrk_aligned+0x22>
 800a9c4:	1a21      	subs	r1, r4, r0
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 fb92 	bl	800b0f0 <_sbrk_r>
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d1f2      	bne.n	800a9b6 <sbrk_aligned+0x22>
 800a9d0:	e7ef      	b.n	800a9b2 <sbrk_aligned+0x1e>
 800a9d2:	bf00      	nop
 800a9d4:	24000838 	.word	0x24000838

0800a9d8 <_malloc_r>:
 800a9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9dc:	1ccd      	adds	r5, r1, #3
 800a9de:	f025 0503 	bic.w	r5, r5, #3
 800a9e2:	3508      	adds	r5, #8
 800a9e4:	2d0c      	cmp	r5, #12
 800a9e6:	bf38      	it	cc
 800a9e8:	250c      	movcc	r5, #12
 800a9ea:	2d00      	cmp	r5, #0
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	db01      	blt.n	800a9f4 <_malloc_r+0x1c>
 800a9f0:	42a9      	cmp	r1, r5
 800a9f2:	d904      	bls.n	800a9fe <_malloc_r+0x26>
 800a9f4:	230c      	movs	r3, #12
 800a9f6:	6033      	str	r3, [r6, #0]
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aad4 <_malloc_r+0xfc>
 800aa02:	f000 f869 	bl	800aad8 <__malloc_lock>
 800aa06:	f8d8 3000 	ldr.w	r3, [r8]
 800aa0a:	461c      	mov	r4, r3
 800aa0c:	bb44      	cbnz	r4, 800aa60 <_malloc_r+0x88>
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4630      	mov	r0, r6
 800aa12:	f7ff ffbf 	bl	800a994 <sbrk_aligned>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	4604      	mov	r4, r0
 800aa1a:	d158      	bne.n	800aace <_malloc_r+0xf6>
 800aa1c:	f8d8 4000 	ldr.w	r4, [r8]
 800aa20:	4627      	mov	r7, r4
 800aa22:	2f00      	cmp	r7, #0
 800aa24:	d143      	bne.n	800aaae <_malloc_r+0xd6>
 800aa26:	2c00      	cmp	r4, #0
 800aa28:	d04b      	beq.n	800aac2 <_malloc_r+0xea>
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	4639      	mov	r1, r7
 800aa2e:	4630      	mov	r0, r6
 800aa30:	eb04 0903 	add.w	r9, r4, r3
 800aa34:	f000 fb5c 	bl	800b0f0 <_sbrk_r>
 800aa38:	4581      	cmp	r9, r0
 800aa3a:	d142      	bne.n	800aac2 <_malloc_r+0xea>
 800aa3c:	6821      	ldr	r1, [r4, #0]
 800aa3e:	1a6d      	subs	r5, r5, r1
 800aa40:	4629      	mov	r1, r5
 800aa42:	4630      	mov	r0, r6
 800aa44:	f7ff ffa6 	bl	800a994 <sbrk_aligned>
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d03a      	beq.n	800aac2 <_malloc_r+0xea>
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	442b      	add	r3, r5
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	f8d8 3000 	ldr.w	r3, [r8]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	bb62      	cbnz	r2, 800aab4 <_malloc_r+0xdc>
 800aa5a:	f8c8 7000 	str.w	r7, [r8]
 800aa5e:	e00f      	b.n	800aa80 <_malloc_r+0xa8>
 800aa60:	6822      	ldr	r2, [r4, #0]
 800aa62:	1b52      	subs	r2, r2, r5
 800aa64:	d420      	bmi.n	800aaa8 <_malloc_r+0xd0>
 800aa66:	2a0b      	cmp	r2, #11
 800aa68:	d917      	bls.n	800aa9a <_malloc_r+0xc2>
 800aa6a:	1961      	adds	r1, r4, r5
 800aa6c:	42a3      	cmp	r3, r4
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	bf18      	it	ne
 800aa72:	6059      	strne	r1, [r3, #4]
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	bf08      	it	eq
 800aa78:	f8c8 1000 	streq.w	r1, [r8]
 800aa7c:	5162      	str	r2, [r4, r5]
 800aa7e:	604b      	str	r3, [r1, #4]
 800aa80:	4630      	mov	r0, r6
 800aa82:	f000 f82f 	bl	800aae4 <__malloc_unlock>
 800aa86:	f104 000b 	add.w	r0, r4, #11
 800aa8a:	1d23      	adds	r3, r4, #4
 800aa8c:	f020 0007 	bic.w	r0, r0, #7
 800aa90:	1ac2      	subs	r2, r0, r3
 800aa92:	bf1c      	itt	ne
 800aa94:	1a1b      	subne	r3, r3, r0
 800aa96:	50a3      	strne	r3, [r4, r2]
 800aa98:	e7af      	b.n	800a9fa <_malloc_r+0x22>
 800aa9a:	6862      	ldr	r2, [r4, #4]
 800aa9c:	42a3      	cmp	r3, r4
 800aa9e:	bf0c      	ite	eq
 800aaa0:	f8c8 2000 	streq.w	r2, [r8]
 800aaa4:	605a      	strne	r2, [r3, #4]
 800aaa6:	e7eb      	b.n	800aa80 <_malloc_r+0xa8>
 800aaa8:	4623      	mov	r3, r4
 800aaaa:	6864      	ldr	r4, [r4, #4]
 800aaac:	e7ae      	b.n	800aa0c <_malloc_r+0x34>
 800aaae:	463c      	mov	r4, r7
 800aab0:	687f      	ldr	r7, [r7, #4]
 800aab2:	e7b6      	b.n	800aa22 <_malloc_r+0x4a>
 800aab4:	461a      	mov	r2, r3
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	d1fb      	bne.n	800aab4 <_malloc_r+0xdc>
 800aabc:	2300      	movs	r3, #0
 800aabe:	6053      	str	r3, [r2, #4]
 800aac0:	e7de      	b.n	800aa80 <_malloc_r+0xa8>
 800aac2:	230c      	movs	r3, #12
 800aac4:	6033      	str	r3, [r6, #0]
 800aac6:	4630      	mov	r0, r6
 800aac8:	f000 f80c 	bl	800aae4 <__malloc_unlock>
 800aacc:	e794      	b.n	800a9f8 <_malloc_r+0x20>
 800aace:	6005      	str	r5, [r0, #0]
 800aad0:	e7d6      	b.n	800aa80 <_malloc_r+0xa8>
 800aad2:	bf00      	nop
 800aad4:	2400083c 	.word	0x2400083c

0800aad8 <__malloc_lock>:
 800aad8:	4801      	ldr	r0, [pc, #4]	@ (800aae0 <__malloc_lock+0x8>)
 800aada:	f7ff bf0f 	b.w	800a8fc <__retarget_lock_acquire_recursive>
 800aade:	bf00      	nop
 800aae0:	24000834 	.word	0x24000834

0800aae4 <__malloc_unlock>:
 800aae4:	4801      	ldr	r0, [pc, #4]	@ (800aaec <__malloc_unlock+0x8>)
 800aae6:	f7ff bf0a 	b.w	800a8fe <__retarget_lock_release_recursive>
 800aaea:	bf00      	nop
 800aaec:	24000834 	.word	0x24000834

0800aaf0 <__ssputs_r>:
 800aaf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf4:	688e      	ldr	r6, [r1, #8]
 800aaf6:	461f      	mov	r7, r3
 800aaf8:	42be      	cmp	r6, r7
 800aafa:	680b      	ldr	r3, [r1, #0]
 800aafc:	4682      	mov	sl, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	4690      	mov	r8, r2
 800ab02:	d82d      	bhi.n	800ab60 <__ssputs_r+0x70>
 800ab04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab0c:	d026      	beq.n	800ab5c <__ssputs_r+0x6c>
 800ab0e:	6965      	ldr	r5, [r4, #20]
 800ab10:	6909      	ldr	r1, [r1, #16]
 800ab12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab16:	eba3 0901 	sub.w	r9, r3, r1
 800ab1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab1e:	1c7b      	adds	r3, r7, #1
 800ab20:	444b      	add	r3, r9
 800ab22:	106d      	asrs	r5, r5, #1
 800ab24:	429d      	cmp	r5, r3
 800ab26:	bf38      	it	cc
 800ab28:	461d      	movcc	r5, r3
 800ab2a:	0553      	lsls	r3, r2, #21
 800ab2c:	d527      	bpl.n	800ab7e <__ssputs_r+0x8e>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	f7ff ff52 	bl	800a9d8 <_malloc_r>
 800ab34:	4606      	mov	r6, r0
 800ab36:	b360      	cbz	r0, 800ab92 <__ssputs_r+0xa2>
 800ab38:	6921      	ldr	r1, [r4, #16]
 800ab3a:	464a      	mov	r2, r9
 800ab3c:	f000 fae8 	bl	800b110 <memcpy>
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ab46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab4a:	81a3      	strh	r3, [r4, #12]
 800ab4c:	6126      	str	r6, [r4, #16]
 800ab4e:	6165      	str	r5, [r4, #20]
 800ab50:	444e      	add	r6, r9
 800ab52:	eba5 0509 	sub.w	r5, r5, r9
 800ab56:	6026      	str	r6, [r4, #0]
 800ab58:	60a5      	str	r5, [r4, #8]
 800ab5a:	463e      	mov	r6, r7
 800ab5c:	42be      	cmp	r6, r7
 800ab5e:	d900      	bls.n	800ab62 <__ssputs_r+0x72>
 800ab60:	463e      	mov	r6, r7
 800ab62:	6820      	ldr	r0, [r4, #0]
 800ab64:	4632      	mov	r2, r6
 800ab66:	4641      	mov	r1, r8
 800ab68:	f000 faa8 	bl	800b0bc <memmove>
 800ab6c:	68a3      	ldr	r3, [r4, #8]
 800ab6e:	1b9b      	subs	r3, r3, r6
 800ab70:	60a3      	str	r3, [r4, #8]
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	4433      	add	r3, r6
 800ab76:	6023      	str	r3, [r4, #0]
 800ab78:	2000      	movs	r0, #0
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	462a      	mov	r2, r5
 800ab80:	f000 fad4 	bl	800b12c <_realloc_r>
 800ab84:	4606      	mov	r6, r0
 800ab86:	2800      	cmp	r0, #0
 800ab88:	d1e0      	bne.n	800ab4c <__ssputs_r+0x5c>
 800ab8a:	6921      	ldr	r1, [r4, #16]
 800ab8c:	4650      	mov	r0, sl
 800ab8e:	f7ff feb7 	bl	800a900 <_free_r>
 800ab92:	230c      	movs	r3, #12
 800ab94:	f8ca 3000 	str.w	r3, [sl]
 800ab98:	89a3      	ldrh	r3, [r4, #12]
 800ab9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab9e:	81a3      	strh	r3, [r4, #12]
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	e7e9      	b.n	800ab7a <__ssputs_r+0x8a>
	...

0800aba8 <_svfiprintf_r>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	4698      	mov	r8, r3
 800abae:	898b      	ldrh	r3, [r1, #12]
 800abb0:	061b      	lsls	r3, r3, #24
 800abb2:	b09d      	sub	sp, #116	@ 0x74
 800abb4:	4607      	mov	r7, r0
 800abb6:	460d      	mov	r5, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	d510      	bpl.n	800abde <_svfiprintf_r+0x36>
 800abbc:	690b      	ldr	r3, [r1, #16]
 800abbe:	b973      	cbnz	r3, 800abde <_svfiprintf_r+0x36>
 800abc0:	2140      	movs	r1, #64	@ 0x40
 800abc2:	f7ff ff09 	bl	800a9d8 <_malloc_r>
 800abc6:	6028      	str	r0, [r5, #0]
 800abc8:	6128      	str	r0, [r5, #16]
 800abca:	b930      	cbnz	r0, 800abda <_svfiprintf_r+0x32>
 800abcc:	230c      	movs	r3, #12
 800abce:	603b      	str	r3, [r7, #0]
 800abd0:	f04f 30ff 	mov.w	r0, #4294967295
 800abd4:	b01d      	add	sp, #116	@ 0x74
 800abd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abda:	2340      	movs	r3, #64	@ 0x40
 800abdc:	616b      	str	r3, [r5, #20]
 800abde:	2300      	movs	r3, #0
 800abe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800abe2:	2320      	movs	r3, #32
 800abe4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abec:	2330      	movs	r3, #48	@ 0x30
 800abee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad8c <_svfiprintf_r+0x1e4>
 800abf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abf6:	f04f 0901 	mov.w	r9, #1
 800abfa:	4623      	mov	r3, r4
 800abfc:	469a      	mov	sl, r3
 800abfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac02:	b10a      	cbz	r2, 800ac08 <_svfiprintf_r+0x60>
 800ac04:	2a25      	cmp	r2, #37	@ 0x25
 800ac06:	d1f9      	bne.n	800abfc <_svfiprintf_r+0x54>
 800ac08:	ebba 0b04 	subs.w	fp, sl, r4
 800ac0c:	d00b      	beq.n	800ac26 <_svfiprintf_r+0x7e>
 800ac0e:	465b      	mov	r3, fp
 800ac10:	4622      	mov	r2, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	4638      	mov	r0, r7
 800ac16:	f7ff ff6b 	bl	800aaf0 <__ssputs_r>
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	f000 80a7 	beq.w	800ad6e <_svfiprintf_r+0x1c6>
 800ac20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac22:	445a      	add	r2, fp
 800ac24:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac26:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 809f 	beq.w	800ad6e <_svfiprintf_r+0x1c6>
 800ac30:	2300      	movs	r3, #0
 800ac32:	f04f 32ff 	mov.w	r2, #4294967295
 800ac36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac3a:	f10a 0a01 	add.w	sl, sl, #1
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	9307      	str	r3, [sp, #28]
 800ac42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac46:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac48:	4654      	mov	r4, sl
 800ac4a:	2205      	movs	r2, #5
 800ac4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac50:	484e      	ldr	r0, [pc, #312]	@ (800ad8c <_svfiprintf_r+0x1e4>)
 800ac52:	f7f5 fb4d 	bl	80002f0 <memchr>
 800ac56:	9a04      	ldr	r2, [sp, #16]
 800ac58:	b9d8      	cbnz	r0, 800ac92 <_svfiprintf_r+0xea>
 800ac5a:	06d0      	lsls	r0, r2, #27
 800ac5c:	bf44      	itt	mi
 800ac5e:	2320      	movmi	r3, #32
 800ac60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac64:	0711      	lsls	r1, r2, #28
 800ac66:	bf44      	itt	mi
 800ac68:	232b      	movmi	r3, #43	@ 0x2b
 800ac6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac72:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac74:	d015      	beq.n	800aca2 <_svfiprintf_r+0xfa>
 800ac76:	9a07      	ldr	r2, [sp, #28]
 800ac78:	4654      	mov	r4, sl
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	f04f 0c0a 	mov.w	ip, #10
 800ac80:	4621      	mov	r1, r4
 800ac82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac86:	3b30      	subs	r3, #48	@ 0x30
 800ac88:	2b09      	cmp	r3, #9
 800ac8a:	d94b      	bls.n	800ad24 <_svfiprintf_r+0x17c>
 800ac8c:	b1b0      	cbz	r0, 800acbc <_svfiprintf_r+0x114>
 800ac8e:	9207      	str	r2, [sp, #28]
 800ac90:	e014      	b.n	800acbc <_svfiprintf_r+0x114>
 800ac92:	eba0 0308 	sub.w	r3, r0, r8
 800ac96:	fa09 f303 	lsl.w	r3, r9, r3
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	46a2      	mov	sl, r4
 800aca0:	e7d2      	b.n	800ac48 <_svfiprintf_r+0xa0>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	1d19      	adds	r1, r3, #4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	9103      	str	r1, [sp, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	bfbb      	ittet	lt
 800acae:	425b      	neglt	r3, r3
 800acb0:	f042 0202 	orrlt.w	r2, r2, #2
 800acb4:	9307      	strge	r3, [sp, #28]
 800acb6:	9307      	strlt	r3, [sp, #28]
 800acb8:	bfb8      	it	lt
 800acba:	9204      	strlt	r2, [sp, #16]
 800acbc:	7823      	ldrb	r3, [r4, #0]
 800acbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800acc0:	d10a      	bne.n	800acd8 <_svfiprintf_r+0x130>
 800acc2:	7863      	ldrb	r3, [r4, #1]
 800acc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800acc6:	d132      	bne.n	800ad2e <_svfiprintf_r+0x186>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	1d1a      	adds	r2, r3, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	9203      	str	r2, [sp, #12]
 800acd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acd4:	3402      	adds	r4, #2
 800acd6:	9305      	str	r3, [sp, #20]
 800acd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad9c <_svfiprintf_r+0x1f4>
 800acdc:	7821      	ldrb	r1, [r4, #0]
 800acde:	2203      	movs	r2, #3
 800ace0:	4650      	mov	r0, sl
 800ace2:	f7f5 fb05 	bl	80002f0 <memchr>
 800ace6:	b138      	cbz	r0, 800acf8 <_svfiprintf_r+0x150>
 800ace8:	9b04      	ldr	r3, [sp, #16]
 800acea:	eba0 000a 	sub.w	r0, r0, sl
 800acee:	2240      	movs	r2, #64	@ 0x40
 800acf0:	4082      	lsls	r2, r0
 800acf2:	4313      	orrs	r3, r2
 800acf4:	3401      	adds	r4, #1
 800acf6:	9304      	str	r3, [sp, #16]
 800acf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acfc:	4824      	ldr	r0, [pc, #144]	@ (800ad90 <_svfiprintf_r+0x1e8>)
 800acfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad02:	2206      	movs	r2, #6
 800ad04:	f7f5 faf4 	bl	80002f0 <memchr>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d036      	beq.n	800ad7a <_svfiprintf_r+0x1d2>
 800ad0c:	4b21      	ldr	r3, [pc, #132]	@ (800ad94 <_svfiprintf_r+0x1ec>)
 800ad0e:	bb1b      	cbnz	r3, 800ad58 <_svfiprintf_r+0x1b0>
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	3307      	adds	r3, #7
 800ad14:	f023 0307 	bic.w	r3, r3, #7
 800ad18:	3308      	adds	r3, #8
 800ad1a:	9303      	str	r3, [sp, #12]
 800ad1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad1e:	4433      	add	r3, r6
 800ad20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad22:	e76a      	b.n	800abfa <_svfiprintf_r+0x52>
 800ad24:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad28:	460c      	mov	r4, r1
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	e7a8      	b.n	800ac80 <_svfiprintf_r+0xd8>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	3401      	adds	r4, #1
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	4619      	mov	r1, r3
 800ad36:	f04f 0c0a 	mov.w	ip, #10
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad40:	3a30      	subs	r2, #48	@ 0x30
 800ad42:	2a09      	cmp	r2, #9
 800ad44:	d903      	bls.n	800ad4e <_svfiprintf_r+0x1a6>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d0c6      	beq.n	800acd8 <_svfiprintf_r+0x130>
 800ad4a:	9105      	str	r1, [sp, #20]
 800ad4c:	e7c4      	b.n	800acd8 <_svfiprintf_r+0x130>
 800ad4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad52:	4604      	mov	r4, r0
 800ad54:	2301      	movs	r3, #1
 800ad56:	e7f0      	b.n	800ad3a <_svfiprintf_r+0x192>
 800ad58:	ab03      	add	r3, sp, #12
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	462a      	mov	r2, r5
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad98 <_svfiprintf_r+0x1f0>)
 800ad60:	a904      	add	r1, sp, #16
 800ad62:	4638      	mov	r0, r7
 800ad64:	f3af 8000 	nop.w
 800ad68:	1c42      	adds	r2, r0, #1
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	d1d6      	bne.n	800ad1c <_svfiprintf_r+0x174>
 800ad6e:	89ab      	ldrh	r3, [r5, #12]
 800ad70:	065b      	lsls	r3, r3, #25
 800ad72:	f53f af2d 	bmi.w	800abd0 <_svfiprintf_r+0x28>
 800ad76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad78:	e72c      	b.n	800abd4 <_svfiprintf_r+0x2c>
 800ad7a:	ab03      	add	r3, sp, #12
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	462a      	mov	r2, r5
 800ad80:	4b05      	ldr	r3, [pc, #20]	@ (800ad98 <_svfiprintf_r+0x1f0>)
 800ad82:	a904      	add	r1, sp, #16
 800ad84:	4638      	mov	r0, r7
 800ad86:	f000 f879 	bl	800ae7c <_printf_i>
 800ad8a:	e7ed      	b.n	800ad68 <_svfiprintf_r+0x1c0>
 800ad8c:	0800b399 	.word	0x0800b399
 800ad90:	0800b3a3 	.word	0x0800b3a3
 800ad94:	00000000 	.word	0x00000000
 800ad98:	0800aaf1 	.word	0x0800aaf1
 800ad9c:	0800b39f 	.word	0x0800b39f

0800ada0 <_printf_common>:
 800ada0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada4:	4616      	mov	r6, r2
 800ada6:	4698      	mov	r8, r3
 800ada8:	688a      	ldr	r2, [r1, #8]
 800adaa:	690b      	ldr	r3, [r1, #16]
 800adac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800adb0:	4293      	cmp	r3, r2
 800adb2:	bfb8      	it	lt
 800adb4:	4613      	movlt	r3, r2
 800adb6:	6033      	str	r3, [r6, #0]
 800adb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800adbc:	4607      	mov	r7, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	b10a      	cbz	r2, 800adc6 <_printf_common+0x26>
 800adc2:	3301      	adds	r3, #1
 800adc4:	6033      	str	r3, [r6, #0]
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	0699      	lsls	r1, r3, #26
 800adca:	bf42      	ittt	mi
 800adcc:	6833      	ldrmi	r3, [r6, #0]
 800adce:	3302      	addmi	r3, #2
 800add0:	6033      	strmi	r3, [r6, #0]
 800add2:	6825      	ldr	r5, [r4, #0]
 800add4:	f015 0506 	ands.w	r5, r5, #6
 800add8:	d106      	bne.n	800ade8 <_printf_common+0x48>
 800adda:	f104 0a19 	add.w	sl, r4, #25
 800adde:	68e3      	ldr	r3, [r4, #12]
 800ade0:	6832      	ldr	r2, [r6, #0]
 800ade2:	1a9b      	subs	r3, r3, r2
 800ade4:	42ab      	cmp	r3, r5
 800ade6:	dc26      	bgt.n	800ae36 <_printf_common+0x96>
 800ade8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	3b00      	subs	r3, #0
 800adf0:	bf18      	it	ne
 800adf2:	2301      	movne	r3, #1
 800adf4:	0692      	lsls	r2, r2, #26
 800adf6:	d42b      	bmi.n	800ae50 <_printf_common+0xb0>
 800adf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800adfc:	4641      	mov	r1, r8
 800adfe:	4638      	mov	r0, r7
 800ae00:	47c8      	blx	r9
 800ae02:	3001      	adds	r0, #1
 800ae04:	d01e      	beq.n	800ae44 <_printf_common+0xa4>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	6922      	ldr	r2, [r4, #16]
 800ae0a:	f003 0306 	and.w	r3, r3, #6
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	bf02      	ittt	eq
 800ae12:	68e5      	ldreq	r5, [r4, #12]
 800ae14:	6833      	ldreq	r3, [r6, #0]
 800ae16:	1aed      	subeq	r5, r5, r3
 800ae18:	68a3      	ldr	r3, [r4, #8]
 800ae1a:	bf0c      	ite	eq
 800ae1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae20:	2500      	movne	r5, #0
 800ae22:	4293      	cmp	r3, r2
 800ae24:	bfc4      	itt	gt
 800ae26:	1a9b      	subgt	r3, r3, r2
 800ae28:	18ed      	addgt	r5, r5, r3
 800ae2a:	2600      	movs	r6, #0
 800ae2c:	341a      	adds	r4, #26
 800ae2e:	42b5      	cmp	r5, r6
 800ae30:	d11a      	bne.n	800ae68 <_printf_common+0xc8>
 800ae32:	2000      	movs	r0, #0
 800ae34:	e008      	b.n	800ae48 <_printf_common+0xa8>
 800ae36:	2301      	movs	r3, #1
 800ae38:	4652      	mov	r2, sl
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	47c8      	blx	r9
 800ae40:	3001      	adds	r0, #1
 800ae42:	d103      	bne.n	800ae4c <_printf_common+0xac>
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295
 800ae48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	e7c6      	b.n	800adde <_printf_common+0x3e>
 800ae50:	18e1      	adds	r1, r4, r3
 800ae52:	1c5a      	adds	r2, r3, #1
 800ae54:	2030      	movs	r0, #48	@ 0x30
 800ae56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ae5a:	4422      	add	r2, r4
 800ae5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ae60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ae64:	3302      	adds	r3, #2
 800ae66:	e7c7      	b.n	800adf8 <_printf_common+0x58>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	4641      	mov	r1, r8
 800ae6e:	4638      	mov	r0, r7
 800ae70:	47c8      	blx	r9
 800ae72:	3001      	adds	r0, #1
 800ae74:	d0e6      	beq.n	800ae44 <_printf_common+0xa4>
 800ae76:	3601      	adds	r6, #1
 800ae78:	e7d9      	b.n	800ae2e <_printf_common+0x8e>
	...

0800ae7c <_printf_i>:
 800ae7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae80:	7e0f      	ldrb	r7, [r1, #24]
 800ae82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ae84:	2f78      	cmp	r7, #120	@ 0x78
 800ae86:	4691      	mov	r9, r2
 800ae88:	4680      	mov	r8, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	469a      	mov	sl, r3
 800ae8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae92:	d807      	bhi.n	800aea4 <_printf_i+0x28>
 800ae94:	2f62      	cmp	r7, #98	@ 0x62
 800ae96:	d80a      	bhi.n	800aeae <_printf_i+0x32>
 800ae98:	2f00      	cmp	r7, #0
 800ae9a:	f000 80d2 	beq.w	800b042 <_printf_i+0x1c6>
 800ae9e:	2f58      	cmp	r7, #88	@ 0x58
 800aea0:	f000 80b9 	beq.w	800b016 <_printf_i+0x19a>
 800aea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aea8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aeac:	e03a      	b.n	800af24 <_printf_i+0xa8>
 800aeae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aeb2:	2b15      	cmp	r3, #21
 800aeb4:	d8f6      	bhi.n	800aea4 <_printf_i+0x28>
 800aeb6:	a101      	add	r1, pc, #4	@ (adr r1, 800aebc <_printf_i+0x40>)
 800aeb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aebc:	0800af15 	.word	0x0800af15
 800aec0:	0800af29 	.word	0x0800af29
 800aec4:	0800aea5 	.word	0x0800aea5
 800aec8:	0800aea5 	.word	0x0800aea5
 800aecc:	0800aea5 	.word	0x0800aea5
 800aed0:	0800aea5 	.word	0x0800aea5
 800aed4:	0800af29 	.word	0x0800af29
 800aed8:	0800aea5 	.word	0x0800aea5
 800aedc:	0800aea5 	.word	0x0800aea5
 800aee0:	0800aea5 	.word	0x0800aea5
 800aee4:	0800aea5 	.word	0x0800aea5
 800aee8:	0800b029 	.word	0x0800b029
 800aeec:	0800af53 	.word	0x0800af53
 800aef0:	0800afe3 	.word	0x0800afe3
 800aef4:	0800aea5 	.word	0x0800aea5
 800aef8:	0800aea5 	.word	0x0800aea5
 800aefc:	0800b04b 	.word	0x0800b04b
 800af00:	0800aea5 	.word	0x0800aea5
 800af04:	0800af53 	.word	0x0800af53
 800af08:	0800aea5 	.word	0x0800aea5
 800af0c:	0800aea5 	.word	0x0800aea5
 800af10:	0800afeb 	.word	0x0800afeb
 800af14:	6833      	ldr	r3, [r6, #0]
 800af16:	1d1a      	adds	r2, r3, #4
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	6032      	str	r2, [r6, #0]
 800af1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af24:	2301      	movs	r3, #1
 800af26:	e09d      	b.n	800b064 <_printf_i+0x1e8>
 800af28:	6833      	ldr	r3, [r6, #0]
 800af2a:	6820      	ldr	r0, [r4, #0]
 800af2c:	1d19      	adds	r1, r3, #4
 800af2e:	6031      	str	r1, [r6, #0]
 800af30:	0606      	lsls	r6, r0, #24
 800af32:	d501      	bpl.n	800af38 <_printf_i+0xbc>
 800af34:	681d      	ldr	r5, [r3, #0]
 800af36:	e003      	b.n	800af40 <_printf_i+0xc4>
 800af38:	0645      	lsls	r5, r0, #25
 800af3a:	d5fb      	bpl.n	800af34 <_printf_i+0xb8>
 800af3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800af40:	2d00      	cmp	r5, #0
 800af42:	da03      	bge.n	800af4c <_printf_i+0xd0>
 800af44:	232d      	movs	r3, #45	@ 0x2d
 800af46:	426d      	negs	r5, r5
 800af48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af4c:	4859      	ldr	r0, [pc, #356]	@ (800b0b4 <_printf_i+0x238>)
 800af4e:	230a      	movs	r3, #10
 800af50:	e011      	b.n	800af76 <_printf_i+0xfa>
 800af52:	6821      	ldr	r1, [r4, #0]
 800af54:	6833      	ldr	r3, [r6, #0]
 800af56:	0608      	lsls	r0, r1, #24
 800af58:	f853 5b04 	ldr.w	r5, [r3], #4
 800af5c:	d402      	bmi.n	800af64 <_printf_i+0xe8>
 800af5e:	0649      	lsls	r1, r1, #25
 800af60:	bf48      	it	mi
 800af62:	b2ad      	uxthmi	r5, r5
 800af64:	2f6f      	cmp	r7, #111	@ 0x6f
 800af66:	4853      	ldr	r0, [pc, #332]	@ (800b0b4 <_printf_i+0x238>)
 800af68:	6033      	str	r3, [r6, #0]
 800af6a:	bf14      	ite	ne
 800af6c:	230a      	movne	r3, #10
 800af6e:	2308      	moveq	r3, #8
 800af70:	2100      	movs	r1, #0
 800af72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800af76:	6866      	ldr	r6, [r4, #4]
 800af78:	60a6      	str	r6, [r4, #8]
 800af7a:	2e00      	cmp	r6, #0
 800af7c:	bfa2      	ittt	ge
 800af7e:	6821      	ldrge	r1, [r4, #0]
 800af80:	f021 0104 	bicge.w	r1, r1, #4
 800af84:	6021      	strge	r1, [r4, #0]
 800af86:	b90d      	cbnz	r5, 800af8c <_printf_i+0x110>
 800af88:	2e00      	cmp	r6, #0
 800af8a:	d04b      	beq.n	800b024 <_printf_i+0x1a8>
 800af8c:	4616      	mov	r6, r2
 800af8e:	fbb5 f1f3 	udiv	r1, r5, r3
 800af92:	fb03 5711 	mls	r7, r3, r1, r5
 800af96:	5dc7      	ldrb	r7, [r0, r7]
 800af98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af9c:	462f      	mov	r7, r5
 800af9e:	42bb      	cmp	r3, r7
 800afa0:	460d      	mov	r5, r1
 800afa2:	d9f4      	bls.n	800af8e <_printf_i+0x112>
 800afa4:	2b08      	cmp	r3, #8
 800afa6:	d10b      	bne.n	800afc0 <_printf_i+0x144>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	07df      	lsls	r7, r3, #31
 800afac:	d508      	bpl.n	800afc0 <_printf_i+0x144>
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	6861      	ldr	r1, [r4, #4]
 800afb2:	4299      	cmp	r1, r3
 800afb4:	bfde      	ittt	le
 800afb6:	2330      	movle	r3, #48	@ 0x30
 800afb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800afbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800afc0:	1b92      	subs	r2, r2, r6
 800afc2:	6122      	str	r2, [r4, #16]
 800afc4:	f8cd a000 	str.w	sl, [sp]
 800afc8:	464b      	mov	r3, r9
 800afca:	aa03      	add	r2, sp, #12
 800afcc:	4621      	mov	r1, r4
 800afce:	4640      	mov	r0, r8
 800afd0:	f7ff fee6 	bl	800ada0 <_printf_common>
 800afd4:	3001      	adds	r0, #1
 800afd6:	d14a      	bne.n	800b06e <_printf_i+0x1f2>
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	b004      	add	sp, #16
 800afde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	f043 0320 	orr.w	r3, r3, #32
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	4833      	ldr	r0, [pc, #204]	@ (800b0b8 <_printf_i+0x23c>)
 800afec:	2778      	movs	r7, #120	@ 0x78
 800afee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	6831      	ldr	r1, [r6, #0]
 800aff6:	061f      	lsls	r7, r3, #24
 800aff8:	f851 5b04 	ldr.w	r5, [r1], #4
 800affc:	d402      	bmi.n	800b004 <_printf_i+0x188>
 800affe:	065f      	lsls	r7, r3, #25
 800b000:	bf48      	it	mi
 800b002:	b2ad      	uxthmi	r5, r5
 800b004:	6031      	str	r1, [r6, #0]
 800b006:	07d9      	lsls	r1, r3, #31
 800b008:	bf44      	itt	mi
 800b00a:	f043 0320 	orrmi.w	r3, r3, #32
 800b00e:	6023      	strmi	r3, [r4, #0]
 800b010:	b11d      	cbz	r5, 800b01a <_printf_i+0x19e>
 800b012:	2310      	movs	r3, #16
 800b014:	e7ac      	b.n	800af70 <_printf_i+0xf4>
 800b016:	4827      	ldr	r0, [pc, #156]	@ (800b0b4 <_printf_i+0x238>)
 800b018:	e7e9      	b.n	800afee <_printf_i+0x172>
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	f023 0320 	bic.w	r3, r3, #32
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	e7f6      	b.n	800b012 <_printf_i+0x196>
 800b024:	4616      	mov	r6, r2
 800b026:	e7bd      	b.n	800afa4 <_printf_i+0x128>
 800b028:	6833      	ldr	r3, [r6, #0]
 800b02a:	6825      	ldr	r5, [r4, #0]
 800b02c:	6961      	ldr	r1, [r4, #20]
 800b02e:	1d18      	adds	r0, r3, #4
 800b030:	6030      	str	r0, [r6, #0]
 800b032:	062e      	lsls	r6, r5, #24
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	d501      	bpl.n	800b03c <_printf_i+0x1c0>
 800b038:	6019      	str	r1, [r3, #0]
 800b03a:	e002      	b.n	800b042 <_printf_i+0x1c6>
 800b03c:	0668      	lsls	r0, r5, #25
 800b03e:	d5fb      	bpl.n	800b038 <_printf_i+0x1bc>
 800b040:	8019      	strh	r1, [r3, #0]
 800b042:	2300      	movs	r3, #0
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	4616      	mov	r6, r2
 800b048:	e7bc      	b.n	800afc4 <_printf_i+0x148>
 800b04a:	6833      	ldr	r3, [r6, #0]
 800b04c:	1d1a      	adds	r2, r3, #4
 800b04e:	6032      	str	r2, [r6, #0]
 800b050:	681e      	ldr	r6, [r3, #0]
 800b052:	6862      	ldr	r2, [r4, #4]
 800b054:	2100      	movs	r1, #0
 800b056:	4630      	mov	r0, r6
 800b058:	f7f5 f94a 	bl	80002f0 <memchr>
 800b05c:	b108      	cbz	r0, 800b062 <_printf_i+0x1e6>
 800b05e:	1b80      	subs	r0, r0, r6
 800b060:	6060      	str	r0, [r4, #4]
 800b062:	6863      	ldr	r3, [r4, #4]
 800b064:	6123      	str	r3, [r4, #16]
 800b066:	2300      	movs	r3, #0
 800b068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b06c:	e7aa      	b.n	800afc4 <_printf_i+0x148>
 800b06e:	6923      	ldr	r3, [r4, #16]
 800b070:	4632      	mov	r2, r6
 800b072:	4649      	mov	r1, r9
 800b074:	4640      	mov	r0, r8
 800b076:	47d0      	blx	sl
 800b078:	3001      	adds	r0, #1
 800b07a:	d0ad      	beq.n	800afd8 <_printf_i+0x15c>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	079b      	lsls	r3, r3, #30
 800b080:	d413      	bmi.n	800b0aa <_printf_i+0x22e>
 800b082:	68e0      	ldr	r0, [r4, #12]
 800b084:	9b03      	ldr	r3, [sp, #12]
 800b086:	4298      	cmp	r0, r3
 800b088:	bfb8      	it	lt
 800b08a:	4618      	movlt	r0, r3
 800b08c:	e7a6      	b.n	800afdc <_printf_i+0x160>
 800b08e:	2301      	movs	r3, #1
 800b090:	4632      	mov	r2, r6
 800b092:	4649      	mov	r1, r9
 800b094:	4640      	mov	r0, r8
 800b096:	47d0      	blx	sl
 800b098:	3001      	adds	r0, #1
 800b09a:	d09d      	beq.n	800afd8 <_printf_i+0x15c>
 800b09c:	3501      	adds	r5, #1
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	9903      	ldr	r1, [sp, #12]
 800b0a2:	1a5b      	subs	r3, r3, r1
 800b0a4:	42ab      	cmp	r3, r5
 800b0a6:	dcf2      	bgt.n	800b08e <_printf_i+0x212>
 800b0a8:	e7eb      	b.n	800b082 <_printf_i+0x206>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	f104 0619 	add.w	r6, r4, #25
 800b0b0:	e7f5      	b.n	800b09e <_printf_i+0x222>
 800b0b2:	bf00      	nop
 800b0b4:	0800b3aa 	.word	0x0800b3aa
 800b0b8:	0800b3bb 	.word	0x0800b3bb

0800b0bc <memmove>:
 800b0bc:	4288      	cmp	r0, r1
 800b0be:	b510      	push	{r4, lr}
 800b0c0:	eb01 0402 	add.w	r4, r1, r2
 800b0c4:	d902      	bls.n	800b0cc <memmove+0x10>
 800b0c6:	4284      	cmp	r4, r0
 800b0c8:	4623      	mov	r3, r4
 800b0ca:	d807      	bhi.n	800b0dc <memmove+0x20>
 800b0cc:	1e43      	subs	r3, r0, #1
 800b0ce:	42a1      	cmp	r1, r4
 800b0d0:	d008      	beq.n	800b0e4 <memmove+0x28>
 800b0d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0da:	e7f8      	b.n	800b0ce <memmove+0x12>
 800b0dc:	4402      	add	r2, r0
 800b0de:	4601      	mov	r1, r0
 800b0e0:	428a      	cmp	r2, r1
 800b0e2:	d100      	bne.n	800b0e6 <memmove+0x2a>
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0ee:	e7f7      	b.n	800b0e0 <memmove+0x24>

0800b0f0 <_sbrk_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d06      	ldr	r5, [pc, #24]	@ (800b10c <_sbrk_r+0x1c>)
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	602b      	str	r3, [r5, #0]
 800b0fc:	f7f6 fa94 	bl	8001628 <_sbrk>
 800b100:	1c43      	adds	r3, r0, #1
 800b102:	d102      	bne.n	800b10a <_sbrk_r+0x1a>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	b103      	cbz	r3, 800b10a <_sbrk_r+0x1a>
 800b108:	6023      	str	r3, [r4, #0]
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	24000830 	.word	0x24000830

0800b110 <memcpy>:
 800b110:	440a      	add	r2, r1
 800b112:	4291      	cmp	r1, r2
 800b114:	f100 33ff 	add.w	r3, r0, #4294967295
 800b118:	d100      	bne.n	800b11c <memcpy+0xc>
 800b11a:	4770      	bx	lr
 800b11c:	b510      	push	{r4, lr}
 800b11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b122:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b126:	4291      	cmp	r1, r2
 800b128:	d1f9      	bne.n	800b11e <memcpy+0xe>
 800b12a:	bd10      	pop	{r4, pc}

0800b12c <_realloc_r>:
 800b12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b130:	4680      	mov	r8, r0
 800b132:	4615      	mov	r5, r2
 800b134:	460c      	mov	r4, r1
 800b136:	b921      	cbnz	r1, 800b142 <_realloc_r+0x16>
 800b138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b13c:	4611      	mov	r1, r2
 800b13e:	f7ff bc4b 	b.w	800a9d8 <_malloc_r>
 800b142:	b92a      	cbnz	r2, 800b150 <_realloc_r+0x24>
 800b144:	f7ff fbdc 	bl	800a900 <_free_r>
 800b148:	2400      	movs	r4, #0
 800b14a:	4620      	mov	r0, r4
 800b14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b150:	f000 f81a 	bl	800b188 <_malloc_usable_size_r>
 800b154:	4285      	cmp	r5, r0
 800b156:	4606      	mov	r6, r0
 800b158:	d802      	bhi.n	800b160 <_realloc_r+0x34>
 800b15a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b15e:	d8f4      	bhi.n	800b14a <_realloc_r+0x1e>
 800b160:	4629      	mov	r1, r5
 800b162:	4640      	mov	r0, r8
 800b164:	f7ff fc38 	bl	800a9d8 <_malloc_r>
 800b168:	4607      	mov	r7, r0
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d0ec      	beq.n	800b148 <_realloc_r+0x1c>
 800b16e:	42b5      	cmp	r5, r6
 800b170:	462a      	mov	r2, r5
 800b172:	4621      	mov	r1, r4
 800b174:	bf28      	it	cs
 800b176:	4632      	movcs	r2, r6
 800b178:	f7ff ffca 	bl	800b110 <memcpy>
 800b17c:	4621      	mov	r1, r4
 800b17e:	4640      	mov	r0, r8
 800b180:	f7ff fbbe 	bl	800a900 <_free_r>
 800b184:	463c      	mov	r4, r7
 800b186:	e7e0      	b.n	800b14a <_realloc_r+0x1e>

0800b188 <_malloc_usable_size_r>:
 800b188:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b18c:	1f18      	subs	r0, r3, #4
 800b18e:	2b00      	cmp	r3, #0
 800b190:	bfbc      	itt	lt
 800b192:	580b      	ldrlt	r3, [r1, r0]
 800b194:	18c0      	addlt	r0, r0, r3
 800b196:	4770      	bx	lr

0800b198 <_init>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	bf00      	nop
 800b19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19e:	bc08      	pop	{r3}
 800b1a0:	469e      	mov	lr, r3
 800b1a2:	4770      	bx	lr

0800b1a4 <_fini>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	bf00      	nop
 800b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1aa:	bc08      	pop	{r3}
 800b1ac:	469e      	mov	lr, r3
 800b1ae:	4770      	bx	lr
