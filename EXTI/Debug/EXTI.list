
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000650c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080067a4  080067a4  000077a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067e4  080067e4  000077e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080067ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  08006800  00008014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08006860  00008074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000068c  240000d4  080068c0  000080d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000760  080068c0  00008760  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018037  00000000  00000000  00008102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289c  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  000229d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be3  00000000  00000000  00023938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037932  00000000  00000000  0002451b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146c0  00000000  00000000  0005be4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001604cb  00000000  00000000  0007050d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d09d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004160  00000000  00000000  001d0a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001d4b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800678c 	.word	0x0800678c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	0800678c 	.word	0x0800678c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fd44 	bl	8001058 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f830 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f978 	bl	80008c8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f8ac 	bl	8000734 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f8f6 	bl	80007cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f940 	bl	8000864 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ea:	4810      	ldr	r0, [pc, #64]	@ (800062c <main+0x64>)
 80005ec:	f001 fcfe 	bl	8001fec <HAL_GPIO_WritePin>


	     HAL_Delay(500 / led_frequency);  // Metade do período (ON)
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <main+0x68>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	461a      	mov	r2, r3
 80005f8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80005fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fdbb 	bl	800117c <HAL_Delay>


	     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800060c:	4807      	ldr	r0, [pc, #28]	@ (800062c <main+0x64>)
 800060e:	f001 fced 	bl	8001fec <HAL_GPIO_WritePin>


	     HAL_Delay(500 / led_frequency);  // Metade do período (OFF)
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <main+0x68>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	b2db      	uxtb	r3, r3
 8000618:	461a      	mov	r2, r3
 800061a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800061e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fdaa 	bl	800117c <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000628:	bf00      	nop
 800062a:	e7db      	b.n	80005e4 <main+0x1c>
 800062c:	58020400 	.word	0x58020400
 8000630:	24000000 	.word	0x24000000

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063e:	224c      	movs	r2, #76	@ 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f006 f875 	bl	8006732 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 f86f 	bl	8006732 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000654:	2002      	movs	r0, #2
 8000656:	f001 fe2d 	bl	80022b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b33      	ldr	r3, [pc, #204]	@ (800072c <SystemClock_Config+0xf8>)
 8000660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000662:	4a32      	ldr	r2, [pc, #200]	@ (800072c <SystemClock_Config+0xf8>)
 8000664:	f023 0301 	bic.w	r3, r3, #1
 8000668:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800066a:	4b30      	ldr	r3, [pc, #192]	@ (800072c <SystemClock_Config+0xf8>)
 800066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <SystemClock_Config+0xfc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800067c:	4a2c      	ldr	r2, [pc, #176]	@ (8000730 <SystemClock_Config+0xfc>)
 800067e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <SystemClock_Config+0xfc>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000690:	bf00      	nop
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemClock_Config+0xfc>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800069a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800069e:	d1f8      	bne.n	8000692 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006a0:	2303      	movs	r3, #3
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2340      	movs	r3, #64	@ 0x40
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006be:	2318      	movs	r3, #24
 80006c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ce:	230c      	movs	r3, #12
 80006d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fe32 	bl	8002348 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ea:	f000 f9f7 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	233f      	movs	r3, #63	@ 0x3f
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2101      	movs	r1, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fa72 	bl	8002bfc <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800071e:	f000 f9dd 	bl	8000adc <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3770      	adds	r7, #112	@ 0x70
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	58000400 	.word	0x58000400
 8000730:	58024800 	.word	0x58024800

08000734 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <MX_ETH_Init+0x80>)
 800073a:	4a1f      	ldr	r2, [pc, #124]	@ (80007b8 <MX_ETH_Init+0x84>)
 800073c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <MX_ETH_Init+0x88>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000744:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_ETH_Init+0x88>)
 8000746:	2280      	movs	r2, #128	@ 0x80
 8000748:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800074a:	4b1c      	ldr	r3, [pc, #112]	@ (80007bc <MX_ETH_Init+0x88>)
 800074c:	22e1      	movs	r2, #225	@ 0xe1
 800074e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000750:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_ETH_Init+0x88>)
 8000752:	2200      	movs	r2, #0
 8000754:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <MX_ETH_Init+0x88>)
 8000758:	2200      	movs	r2, #0
 800075a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_ETH_Init+0x88>)
 800075e:	2200      	movs	r2, #0
 8000760:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000764:	4a15      	ldr	r2, [pc, #84]	@ (80007bc <MX_ETH_Init+0x88>)
 8000766:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <MX_ETH_Init+0x80>)
 800076a:	2201      	movs	r2, #1
 800076c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800076e:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000770:	4a13      	ldr	r2, [pc, #76]	@ (80007c0 <MX_ETH_Init+0x8c>)
 8000772:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000776:	4a13      	ldr	r2, [pc, #76]	@ (80007c4 <MX_ETH_Init+0x90>)
 8000778:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_ETH_Init+0x80>)
 800077c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000780:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000782:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <MX_ETH_Init+0x80>)
 8000784:	f000 fe4e 	bl	8001424 <HAL_ETH_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800078e:	f000 f9a5 	bl	8000adc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000792:	2238      	movs	r2, #56	@ 0x38
 8000794:	2100      	movs	r1, #0
 8000796:	480c      	ldr	r0, [pc, #48]	@ (80007c8 <MX_ETH_Init+0x94>)
 8000798:	f005 ffcb 	bl	8006732 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800079c:	4b0a      	ldr	r3, [pc, #40]	@ (80007c8 <MX_ETH_Init+0x94>)
 800079e:	2221      	movs	r2, #33	@ 0x21
 80007a0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_ETH_Init+0x94>)
 80007a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007a8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007aa:	4b07      	ldr	r3, [pc, #28]	@ (80007c8 <MX_ETH_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	24000128 	.word	0x24000128
 80007b8:	40028000 	.word	0x40028000
 80007bc:	24000754 	.word	0x24000754
 80007c0:	24000074 	.word	0x24000074
 80007c4:	24000014 	.word	0x24000014
 80007c8:	240000f0 	.word	0x240000f0

080007cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007d2:	4a23      	ldr	r2, [pc, #140]	@ (8000860 <MX_USART3_UART_Init+0x94>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART3_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000814:	4811      	ldr	r0, [pc, #68]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000816:	f004 fba9 	bl	8004f6c <HAL_UART_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000820:	f000 f95c 	bl	8000adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000828:	f005 fbb1 	bl	8005f8e <HAL_UARTEx_SetTxFifoThreshold>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000832:	f000 f953 	bl	8000adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4808      	ldr	r0, [pc, #32]	@ (800085c <MX_USART3_UART_Init+0x90>)
 800083a:	f005 fbe6 	bl	800600a <HAL_UARTEx_SetRxFifoThreshold>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000844:	f000 f94a 	bl	8000adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_USART3_UART_Init+0x90>)
 800084a:	f005 fb67 	bl	8005f1c <HAL_UARTEx_DisableFifoMode>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000854:	f000 f942 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	240001d8 	.word	0x240001d8
 8000860:	40004800 	.word	0x40004800

08000864 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086a:	4a16      	ldr	r2, [pc, #88]	@ (80008c4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800086c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800086e:	4b14      	ldr	r3, [pc, #80]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000870:	2209      	movs	r2, #9
 8000872:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000876:	2202      	movs	r2, #2
 8000878:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087c:	2200      	movs	r2, #0
 800087e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000880:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000882:	2202      	movs	r2, #2
 8000884:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000888:	2201      	movs	r2, #1
 800088a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088e:	2200      	movs	r2, #0
 8000890:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000894:	2200      	movs	r2, #0
 8000896:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089a:	2201      	movs	r2, #1
 800089c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ac:	f001 fbd1 	bl	8002052 <HAL_PCD_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008b6:	f000 f911 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	2400026c 	.word	0x2400026c
 80008c4:	40080000 	.word	0x40080000

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	@ 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b66      	ldr	r3, [pc, #408]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	4a64      	ldr	r2, [pc, #400]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ee:	4b62      	ldr	r3, [pc, #392]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fc:	4b5e      	ldr	r3, [pc, #376]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	4a5d      	ldr	r2, [pc, #372]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090c:	4b5a      	ldr	r3, [pc, #360]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	4b57      	ldr	r3, [pc, #348]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	4a55      	ldr	r2, [pc, #340]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092a:	4b53      	ldr	r3, [pc, #332]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000938:	4b4f      	ldr	r3, [pc, #316]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	4a4e      	ldr	r2, [pc, #312]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000948:	4b4b      	ldr	r3, [pc, #300]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b48      	ldr	r3, [pc, #288]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a46      	ldr	r2, [pc, #280]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b44      	ldr	r3, [pc, #272]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0308 	and.w	r3, r3, #8
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000974:	4b40      	ldr	r3, [pc, #256]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a3f      	ldr	r2, [pc, #252]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b3c      	ldr	r3, [pc, #240]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000992:	4b39      	ldr	r3, [pc, #228]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a37      	ldr	r2, [pc, #220]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b35      	ldr	r3, [pc, #212]	@ (8000a78 <MX_GPIO_Init+0x1b0>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009b6:	4831      	ldr	r0, [pc, #196]	@ (8000a7c <MX_GPIO_Init+0x1b4>)
 80009b8:	f001 fb18 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c2:	482f      	ldr	r0, [pc, #188]	@ (8000a80 <MX_GPIO_Init+0x1b8>)
 80009c4:	f001 fb12 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2102      	movs	r1, #2
 80009cc:	482d      	ldr	r0, [pc, #180]	@ (8000a84 <MX_GPIO_Init+0x1bc>)
 80009ce:	f001 fb0d 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4827      	ldr	r0, [pc, #156]	@ (8000a88 <MX_GPIO_Init+0x1c0>)
 80009ea:	f001 f94f 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009ee:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481d      	ldr	r0, [pc, #116]	@ (8000a7c <MX_GPIO_Init+0x1b4>)
 8000a08:	f001 f940 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4816      	ldr	r0, [pc, #88]	@ (8000a80 <MX_GPIO_Init+0x1b8>)
 8000a26:	f001 f931 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <MX_GPIO_Init+0x1c4>)
 8000a40:	f001 f924 	bl	8001c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <MX_GPIO_Init+0x1bc>)
 8000a5c:	f001 f916 	bl	8001c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2028      	movs	r0, #40	@ 0x28
 8000a66:	f000 fca8 	bl	80013ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a6a:	2028      	movs	r0, #40	@ 0x28
 8000a6c:	f000 fcbf 	bl	80013ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a70:	bf00      	nop
 8000a72:	3730      	adds	r7, #48	@ 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	58024400 	.word	0x58024400
 8000a7c:	58020400 	.word	0x58020400
 8000a80:	58020c00 	.word	0x58020c00
 8000a84:	58021000 	.word	0x58021000
 8000a88:	58020800 	.word	0x58020800
 8000a8c:	58021800 	.word	0x58021800

08000a90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
  {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) // Botão de usuário
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aa0:	d111      	bne.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x36>
    {

      if (toggle == 0)
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d106      	bne.n	8000aba <HAL_GPIO_EXTI_Callback+0x2a>
      {
        led_frequency = 2;  // Alterna para 2 Hz
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	701a      	strb	r2, [r3, #0]
        toggle = 1;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
      {
        led_frequency = 1;  // Alterna para 1 Hz
        toggle = 0;
      }
    }
  }
 8000ab8:	e005      	b.n	8000ac6 <HAL_GPIO_EXTI_Callback+0x36>
        led_frequency = 1;  // Alterna para 1 Hz
 8000aba:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
        toggle = 0;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <HAL_GPIO_EXTI_Callback+0x44>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
  }
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	24000750 	.word	0x24000750
 8000ad8:	24000000 	.word	0x24000000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <HAL_MspInit+0x30>)
 8000af0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af4:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x30>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x30>)
 8000b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	58024400 	.word	0x58024400

08000b1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	@ 0x38
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a59      	ldr	r2, [pc, #356]	@ (8000ca0 <HAL_ETH_MspInit+0x184>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	f040 80ab 	bne.w	8000c96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b40:	4b58      	ldr	r3, [pc, #352]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b46:	4a57      	ldr	r2, [pc, #348]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b50:	4b54      	ldr	r3, [pc, #336]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b5a:	623b      	str	r3, [r7, #32]
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b5e:	4b51      	ldr	r3, [pc, #324]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b64:	4a4f      	ldr	r2, [pc, #316]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b78:	61fb      	str	r3, [r7, #28]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b7c:	4b49      	ldr	r3, [pc, #292]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b82:	4a48      	ldr	r2, [pc, #288]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b8c:	4b45      	ldr	r3, [pc, #276]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	4a40      	ldr	r2, [pc, #256]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000baa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	4a39      	ldr	r2, [pc, #228]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc8:	4b36      	ldr	r3, [pc, #216]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b33      	ldr	r3, [pc, #204]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	4a31      	ldr	r2, [pc, #196]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bec:	f003 0302 	and.w	r3, r3, #2
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <HAL_ETH_MspInit+0x188>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c12:	2332      	movs	r3, #50	@ 0x32
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481e      	ldr	r0, [pc, #120]	@ (8000ca8 <HAL_ETH_MspInit+0x18c>)
 8000c2e:	f001 f82d 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c32:	2386      	movs	r3, #134	@ 0x86
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c42:	230b      	movs	r3, #11
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4817      	ldr	r0, [pc, #92]	@ (8000cac <HAL_ETH_MspInit+0x190>)
 8000c4e:	f001 f81d 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4810      	ldr	r0, [pc, #64]	@ (8000cb0 <HAL_ETH_MspInit+0x194>)
 8000c70:	f001 f80c 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c74:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4808      	ldr	r0, [pc, #32]	@ (8000cb4 <HAL_ETH_MspInit+0x198>)
 8000c92:	f000 fffb 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c96:	bf00      	nop
 8000c98:	3738      	adds	r7, #56	@ 0x38
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40028000 	.word	0x40028000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	58020800 	.word	0x58020800
 8000cac:	58020000 	.word	0x58020000
 8000cb0:	58020400 	.word	0x58020400
 8000cb4:	58021800 	.word	0x58021800

08000cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b0ba      	sub	sp, #232	@ 0xe8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	22c0      	movs	r2, #192	@ 0xc0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 fd2a 	bl	8006732 <memset>
  if(huart->Instance==USART3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a27      	ldr	r2, [pc, #156]	@ (8000d80 <HAL_UART_MspInit+0xc8>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d146      	bne.n	8000d76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ce8:	f04f 0202 	mov.w	r2, #2
 8000cec:	f04f 0300 	mov.w	r3, #0
 8000cf0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f002 fb08 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d0a:	f7ff fee7 	bl	8000adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <HAL_UART_MspInit+0xcc>)
 8000d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d14:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <HAL_UART_MspInit+0xcc>)
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_UART_MspInit+0xcc>)
 8000d20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_UART_MspInit+0xcc>)
 8000d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d32:	4a14      	ldr	r2, [pc, #80]	@ (8000d84 <HAL_UART_MspInit+0xcc>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_UART_MspInit+0xcc>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d64:	2307      	movs	r3, #7
 8000d66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <HAL_UART_MspInit+0xd0>)
 8000d72:	f000 ff8b 	bl	8001c8c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d76:	bf00      	nop
 8000d78:	37e8      	adds	r7, #232	@ 0xe8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40004800 	.word	0x40004800
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020c00 	.word	0x58020c00

08000d8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ba      	sub	sp, #232	@ 0xe8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	22c0      	movs	r2, #192	@ 0xc0
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 fcc0 	bl	8006732 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a30      	ldr	r2, [pc, #192]	@ (8000e78 <HAL_PCD_MspInit+0xec>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d159      	bne.n	8000e70 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dbc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000dc8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fa9d 	bl	8003314 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000de0:	f7ff fe7c 	bl	8000adc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000de4:	f001 faa0 	bl	8002328 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <HAL_PCD_MspInit+0xf0>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a23      	ldr	r2, [pc, #140]	@ (8000e7c <HAL_PCD_MspInit+0xf0>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <HAL_PCD_MspInit+0xf0>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e06:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e20:	230a      	movs	r3, #10
 8000e22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4814      	ldr	r0, [pc, #80]	@ (8000e80 <HAL_PCD_MspInit+0xf4>)
 8000e2e:	f000 ff2d 	bl	8001c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <HAL_PCD_MspInit+0xf4>)
 8000e4e:	f000 ff1d 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_PCD_MspInit+0xf0>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <HAL_PCD_MspInit+0xf0>)
 8000e5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_PCD_MspInit+0xf0>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e70:	bf00      	nop
 8000e72:	37e8      	adds	r7, #232	@ 0xe8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40080000 	.word	0x40080000
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	58020000 	.word	0x58020000

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <NMI_Handler+0x4>

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eda:	f000 f92f 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ee6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000eea:	f001 f898 	bl	800201e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <SystemInit+0xe4>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000efe:	4a36      	ldr	r2, [pc, #216]	@ (8000fd8 <SystemInit+0xe4>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f08:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <SystemInit+0xe8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 030f 	and.w	r3, r3, #15
 8000f10:	2b06      	cmp	r3, #6
 8000f12:	d807      	bhi.n	8000f24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f14:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <SystemInit+0xe8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f023 030f 	bic.w	r3, r3, #15
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000fdc <SystemInit+0xe8>)
 8000f1e:	f043 0307 	orr.w	r3, r3, #7
 8000f22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f24:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <SystemInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a2d      	ldr	r2, [pc, #180]	@ (8000fe0 <SystemInit+0xec>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <SystemInit+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f36:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <SystemInit+0xec>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4929      	ldr	r1, [pc, #164]	@ (8000fe0 <SystemInit+0xec>)
 8000f3c:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <SystemInit+0xf0>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <SystemInit+0xe8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f4e:	4b23      	ldr	r3, [pc, #140]	@ (8000fdc <SystemInit+0xe8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 030f 	bic.w	r3, r3, #15
 8000f56:	4a21      	ldr	r2, [pc, #132]	@ (8000fdc <SystemInit+0xe8>)
 8000f58:	f043 0307 	orr.w	r3, r3, #7
 8000f5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <SystemInit+0xec>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <SystemInit+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <SystemInit+0xec>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <SystemInit+0xec>)
 8000f72:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <SystemInit+0xf4>)
 8000f74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <SystemInit+0xec>)
 8000f78:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <SystemInit+0xf8>)
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <SystemInit+0xec>)
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <SystemInit+0xfc>)
 8000f80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <SystemInit+0xec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <SystemInit+0xec>)
 8000f8a:	4a19      	ldr	r2, [pc, #100]	@ (8000ff0 <SystemInit+0xfc>)
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <SystemInit+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <SystemInit+0xec>)
 8000f96:	4a16      	ldr	r2, [pc, #88]	@ (8000ff0 <SystemInit+0xfc>)
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <SystemInit+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <SystemInit+0xec>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <SystemInit+0xec>)
 8000fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000faa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <SystemInit+0xec>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <SystemInit+0x100>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <SystemInit+0x104>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fbe:	d202      	bcs.n	8000fc6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <SystemInit+0x108>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001000 <SystemInit+0x10c>)
 8000fc8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000fcc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	52002000 	.word	0x52002000
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fe8:	02020200 	.word	0x02020200
 8000fec:	01ff0000 	.word	0x01ff0000
 8000ff0:	01010280 	.word	0x01010280
 8000ff4:	5c001000 	.word	0x5c001000
 8000ff8:	ffff0000 	.word	0xffff0000
 8000ffc:	51008108 	.word	0x51008108
 8001000:	52004000 	.word	0x52004000

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800103c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001008:	f7ff ff74 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	@ (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f005 fb87 	bl	8006744 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fac7 	bl	80005c8 <main>
  bx  lr
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001040:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001044:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001048:	080067ec 	.word	0x080067ec
  ldr r2, =_sbss
 800104c:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001050:	24000760 	.word	0x24000760

08001054 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC3_IRQHandler>
	...

08001058 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f9a0 	bl	80013a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001064:	f001 ff80 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8001068:	4602      	mov	r2, r0
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <HAL_Init+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	0a1b      	lsrs	r3, r3, #8
 8001070:	f003 030f 	and.w	r3, r3, #15
 8001074:	4913      	ldr	r1, [pc, #76]	@ (80010c4 <HAL_Init+0x6c>)
 8001076:	5ccb      	ldrb	r3, [r1, r3]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <HAL_Init+0x68>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_Init+0x6c>)
 800108c:	5cd3      	ldrb	r3, [r2, r3]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	fa22 f303 	lsr.w	r3, r2, r3
 8001098:	4a0b      	ldr	r2, [pc, #44]	@ (80010c8 <HAL_Init+0x70>)
 800109a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <HAL_Init+0x74>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010a2:	2000      	movs	r0, #0
 80010a4:	f000 f814 	bl	80010d0 <HAL_InitTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e002      	b.n	80010b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010b2:	f7ff fd19 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	58024400 	.word	0x58024400
 80010c4:	080067a4 	.word	0x080067a4
 80010c8:	24000008 	.word	0x24000008
 80010cc:	24000004 	.word	0x24000004

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_InitTick+0x60>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e021      	b.n	8001128 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <HAL_InitTick+0x64>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_InitTick+0x60>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f985 	bl	800140a <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 f94f 	bl	80013ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x68>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	24000010 	.word	0x24000010
 8001134:	24000004 	.word	0x24000004
 8001138:	2400000c 	.word	0x2400000c

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	@ (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	24000010 	.word	0x24000010
 8001160:	2400075c 	.word	0x2400075c

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	2400075c 	.word	0x2400075c

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	24000010 	.word	0x24000010

080011c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <HAL_GetREVID+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0c1b      	lsrs	r3, r3, #16
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	5c001000 	.word	0x5c001000

080011dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80011ec:	4904      	ldr	r1, [pc, #16]	@ (8001200 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	58000400 	.word	0x58000400

08001204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <__NVIC_SetPriorityGrouping+0x40>)
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001220:	4013      	ands	r3, r2
 8001222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	4313      	orrs	r3, r2
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <__NVIC_SetPriorityGrouping+0x40>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00
 8001248:	05fa0000 	.word	0x05fa0000

0800124c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001250:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <__NVIC_GetPriorityGrouping+0x18>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	f003 0307 	and.w	r3, r3, #7
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0b      	blt.n	8001292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	f003 021f 	and.w	r2, r3, #31
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <__NVIC_EnableIRQ+0x38>)
 8001282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001286:	095b      	lsrs	r3, r3, #5
 8001288:	2001      	movs	r0, #1
 800128a:	fa00 f202 	lsl.w	r2, r0, r2
 800128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	db0a      	blt.n	80012ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	490c      	ldr	r1, [pc, #48]	@ (80012f0 <__NVIC_SetPriority+0x4c>)
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	440b      	add	r3, r1
 80012c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012cc:	e00a      	b.n	80012e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4908      	ldr	r1, [pc, #32]	@ (80012f4 <__NVIC_SetPriority+0x50>)
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	3b04      	subs	r3, #4
 80012dc:	0112      	lsls	r2, r2, #4
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	440b      	add	r3, r1
 80012e2:	761a      	strb	r2, [r3, #24]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000e100 	.word	0xe000e100
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f1c3 0307 	rsb	r3, r3, #7
 8001312:	2b04      	cmp	r3, #4
 8001314:	bf28      	it	cs
 8001316:	2304      	movcs	r3, #4
 8001318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3304      	adds	r3, #4
 800131e:	2b06      	cmp	r3, #6
 8001320:	d902      	bls.n	8001328 <NVIC_EncodePriority+0x30>
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3b03      	subs	r3, #3
 8001326:	e000      	b.n	800132a <NVIC_EncodePriority+0x32>
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43da      	mvns	r2, r3
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	401a      	ands	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001340:	f04f 31ff 	mov.w	r1, #4294967295
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43d9      	mvns	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	4313      	orrs	r3, r2
         );
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
	...

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001370:	d301      	bcc.n	8001376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001372:	2301      	movs	r3, #1
 8001374:	e00f      	b.n	8001396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001376:	4a0a      	ldr	r2, [pc, #40]	@ (80013a0 <SysTick_Config+0x40>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3b01      	subs	r3, #1
 800137c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137e:	210f      	movs	r1, #15
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f7ff ff8e 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <SysTick_Config+0x40>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138e:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <SysTick_Config+0x40>)
 8001390:	2207      	movs	r2, #7
 8001392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	e000e010 	.word	0xe000e010

080013a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff ff29 	bl	8001204 <__NVIC_SetPriorityGrouping>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff40 	bl	800124c <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff90 	bl	80012f8 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5f 	bl	80012a4 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff33 	bl	8001268 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa4 	bl	8001360 <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0e3      	b.n	80015fe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2223      	movs	r2, #35	@ 0x23
 8001444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff fb67 	bl	8000b1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b6e      	ldr	r3, [pc, #440]	@ (8001608 <HAL_ETH_Init+0x1e4>)
 8001450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001454:	4a6c      	ldr	r2, [pc, #432]	@ (8001608 <HAL_ETH_Init+0x1e4>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800145e:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <HAL_ETH_Init+0x1e4>)
 8001460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7a1b      	ldrb	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d103      	bne.n	800147c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001474:	2000      	movs	r0, #0
 8001476:	f7ff feb1 	bl	80011dc <HAL_SYSCFG_ETHInterfaceSelect>
 800147a:	e003      	b.n	8001484 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800147c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001480:	f7ff feac 	bl	80011dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001484:	4b61      	ldr	r3, [pc, #388]	@ (800160c <HAL_ETH_Init+0x1e8>)
 8001486:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800149e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a0:	f7ff fe60 	bl	8001164 <HAL_GetTick>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014a6:	e011      	b.n	80014cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014a8:	f7ff fe5c 	bl	8001164 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014b6:	d909      	bls.n	80014cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2204      	movs	r2, #4
 80014bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	22e0      	movs	r2, #224	@ 0xe0
 80014c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e098      	b.n	80015fe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1e4      	bne.n	80014a8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f89e 	bl	8001620 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80014e4:	f001 feba 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a49      	ldr	r2, [pc, #292]	@ (8001610 <HAL_ETH_Init+0x1ec>)
 80014ec:	fba2 2303 	umull	r2, r3, r2, r3
 80014f0:	0c9a      	lsrs	r2, r3, #18
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3a01      	subs	r2, #1
 80014f8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 fa81 	bl	8001a04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800150a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800150e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6812      	ldr	r2, [r2, #0]
 8001516:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800151a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800151e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	22e0      	movs	r2, #224	@ 0xe0
 800153a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e05d      	b.n	80015fe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800154a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <HAL_ETH_Init+0x1f0>)
 8001550:	4013      	ands	r3, r2
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6952      	ldr	r2, [r2, #20]
 8001556:	0051      	lsls	r1, r2, #1
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	430b      	orrs	r3, r1
 800155e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001562:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fae9 	bl	8001b3e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 fb2f 	bl	8001bd0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	3305      	adds	r3, #5
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	021a      	lsls	r2, r3, #8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	3304      	adds	r3, #4
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	430a      	orrs	r2, r1
 800158c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	3303      	adds	r3, #3
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	061a      	lsls	r2, r3, #24
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	3302      	adds	r3, #2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	041b      	lsls	r3, r3, #16
 80015a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80015be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80015c0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_ETH_Init+0x1f4>)
 80015d2:	430b      	orrs	r3, r1
 80015d4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b0d      	ldr	r3, [pc, #52]	@ (800161c <HAL_ETH_Init+0x1f8>)
 80015e6:	430b      	orrs	r3, r1
 80015e8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2210      	movs	r2, #16
 80015f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	58024400 	.word	0x58024400
 800160c:	58000400 	.word	0x58000400
 8001610:	431bde83 	.word	0x431bde83
 8001614:	ffff8001 	.word	0xffff8001
 8001618:	0c020060 	.word	0x0c020060
 800161c:	0c20c000 	.word	0x0c20c000

08001620 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001630:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001638:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800163a:	f001 fe0f 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800163e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4a1a      	ldr	r2, [pc, #104]	@ (80016ac <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d804      	bhi.n	8001652 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e022      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	4a16      	ldr	r2, [pc, #88]	@ (80016b0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d204      	bcs.n	8001664 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e019      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d915      	bls.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d804      	bhi.n	800167e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e00c      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	4a0e      	ldr	r2, [pc, #56]	@ (80016bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d804      	bhi.n	8001690 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	e003      	b.n	8001698 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001696:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	02160ebf 	.word	0x02160ebf
 80016b0:	03938700 	.word	0x03938700
 80016b4:	05f5e0ff 	.word	0x05f5e0ff
 80016b8:	08f0d17f 	.word	0x08f0d17f
 80016bc:	0ee6b27f 	.word	0x0ee6b27f

080016c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80016d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	791b      	ldrb	r3, [r3, #4]
 80016d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80016da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	7b1b      	ldrb	r3, [r3, #12]
 80016e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80016e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	7b5b      	ldrb	r3, [r3, #13]
 80016e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80016ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	7b9b      	ldrb	r3, [r3, #14]
 80016f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80016f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	7bdb      	ldrb	r3, [r3, #15]
 80016f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80016fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	7c12      	ldrb	r2, [r2, #16]
 8001700:	2a00      	cmp	r2, #0
 8001702:	d102      	bne.n	800170a <ETH_SetMACConfig+0x4a>
 8001704:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001708:	e000      	b.n	800170c <ETH_SetMACConfig+0x4c>
 800170a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800170c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	7c52      	ldrb	r2, [r2, #17]
 8001712:	2a00      	cmp	r2, #0
 8001714:	d102      	bne.n	800171c <ETH_SetMACConfig+0x5c>
 8001716:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800171a:	e000      	b.n	800171e <ETH_SetMACConfig+0x5e>
 800171c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800171e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	7c9b      	ldrb	r3, [r3, #18]
 8001724:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001726:	431a      	orrs	r2, r3
               macconf->Speed |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800172c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001732:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	7f1b      	ldrb	r3, [r3, #28]
 8001738:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800173a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	7f5b      	ldrb	r3, [r3, #29]
 8001740:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001742:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	7f92      	ldrb	r2, [r2, #30]
 8001748:	2a00      	cmp	r2, #0
 800174a:	d102      	bne.n	8001752 <ETH_SetMACConfig+0x92>
 800174c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001750:	e000      	b.n	8001754 <ETH_SetMACConfig+0x94>
 8001752:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001754:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7fdb      	ldrb	r3, [r3, #31]
 800175a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800175c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001764:	2a00      	cmp	r2, #0
 8001766:	d102      	bne.n	800176e <ETH_SetMACConfig+0xae>
 8001768:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800176c:	e000      	b.n	8001770 <ETH_SetMACConfig+0xb0>
 800176e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001770:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001776:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800177e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001780:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b56      	ldr	r3, [pc, #344]	@ (80018ec <ETH_SetMACConfig+0x22c>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	430b      	orrs	r3, r1
 800179c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80017c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80017c8:	2a00      	cmp	r2, #0
 80017ca:	d102      	bne.n	80017d2 <ETH_SetMACConfig+0x112>
 80017cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017d0:	e000      	b.n	80017d4 <ETH_SetMACConfig+0x114>
 80017d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017da:	4313      	orrs	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4b42      	ldr	r3, [pc, #264]	@ (80018f0 <ETH_SetMACConfig+0x230>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	68f9      	ldr	r1, [r7, #12]
 80017ee:	430b      	orrs	r3, r1
 80017f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80017f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <ETH_SetMACConfig+0x234>)
 800180a:	4013      	ands	r3, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	68f9      	ldr	r1, [r7, #12]
 8001812:	430b      	orrs	r3, r1
 8001814:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800181c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001822:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800182a:	2a00      	cmp	r2, #0
 800182c:	d101      	bne.n	8001832 <ETH_SetMACConfig+0x172>
 800182e:	2280      	movs	r2, #128	@ 0x80
 8001830:	e000      	b.n	8001834 <ETH_SetMACConfig+0x174>
 8001832:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001834:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800183c:	4313      	orrs	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001846:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800184a:	4013      	ands	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	68f9      	ldr	r1, [r7, #12]
 8001852:	430b      	orrs	r3, r1
 8001854:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800185c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001864:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001872:	f023 0103 	bic.w	r1, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	430a      	orrs	r2, r1
 800187e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800188a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d101      	bne.n	80018ae <ETH_SetMACConfig+0x1ee>
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	e000      	b.n	80018b0 <ETH_SetMACConfig+0x1f0>
 80018ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80018b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80018b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80018c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80018c4:	4313      	orrs	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80018d0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	430a      	orrs	r2, r1
 80018dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	00048083 	.word	0x00048083
 80018f0:	c0f88000 	.word	0xc0f88000
 80018f4:	fffffef0 	.word	0xfffffef0

080018f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b38      	ldr	r3, [pc, #224]	@ (80019f0 <ETH_SetDMAConfig+0xf8>)
 800190e:	4013      	ands	r3, r2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	6811      	ldr	r1, [r2, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	430b      	orrs	r3, r1
 800191a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800191e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800192a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001932:	4313      	orrs	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <ETH_SetDMAConfig+0xfc>)
 8001942:	4013      	ands	r3, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	68f9      	ldr	r1, [r7, #12]
 800194a:	430b      	orrs	r3, r1
 800194c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001950:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	7b5b      	ldrb	r3, [r3, #13]
 8001956:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800195c:	4313      	orrs	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001968:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <ETH_SetDMAConfig+0x100>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	430b      	orrs	r3, r1
 8001978:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800197c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	7d1b      	ldrb	r3, [r3, #20]
 8001988:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800198a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7f5b      	ldrb	r3, [r3, #29]
 8001990:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800199e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80019a2:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <ETH_SetDMAConfig+0x104>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	68f9      	ldr	r1, [r7, #12]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019b2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	7f1b      	ldrb	r3, [r3, #28]
 80019ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <ETH_SetDMAConfig+0x108>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	430b      	orrs	r3, r1
 80019dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019e0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	ffff87fd 	.word	0xffff87fd
 80019f4:	ffff2ffe 	.word	0xffff2ffe
 80019f8:	fffec000 	.word	0xfffec000
 80019fc:	ffc0efef 	.word	0xffc0efef
 8001a00:	7fc0ffff 	.word	0x7fc0ffff

08001a04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b0a4      	sub	sp, #144	@ 0x90
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a12:	2300      	movs	r3, #0
 8001a14:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a22:	2301      	movs	r3, #1
 8001a24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a44:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001a5c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001a60:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a96:	2301      	movs	r3, #1
 8001a98:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001aae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ab4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ab8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7ff fde6 	bl	80016c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001af4:	2301      	movs	r3, #1
 8001af6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b0e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001b24:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff fee1 	bl	80018f8 <ETH_SetDMAConfig>
}
 8001b36:	bf00      	nop
 8001b38:	3790      	adds	r7, #144	@ 0x90
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e01d      	b.n	8001b88 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68d9      	ldr	r1, [r3, #12]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	3206      	adds	r2, #6
 8001b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3301      	adds	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d9de      	bls.n	8001b4c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	e023      	b.n	8001c26 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6919      	ldr	r1, [r3, #16]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	440b      	add	r3, r1
 8001bee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	3212      	adds	r2, #18
 8001c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d9d8      	bls.n	8001bde <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c52:	461a      	mov	r2, r3
 8001c54:	2303      	movs	r3, #3
 8001c56:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c66:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c7a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c9a:	4b89      	ldr	r3, [pc, #548]	@ (8001ec0 <HAL_GPIO_Init+0x234>)
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c9e:	e194      	b.n	8001fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 8186 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x44>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d017      	beq.n	8001d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	69b9      	ldr	r1, [r7, #24]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80e0 	beq.w	8001fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e14:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec4 <HAL_GPIO_Init+0x238>)
 8001e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a29      	ldr	r2, [pc, #164]	@ (8001ec8 <HAL_GPIO_Init+0x23c>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a20      	ldr	r2, [pc, #128]	@ (8001ecc <HAL_GPIO_Init+0x240>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d052      	beq.n	8001ef4 <HAL_GPIO_Init+0x268>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	@ (8001ed0 <HAL_GPIO_Init+0x244>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d031      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed4 <HAL_GPIO_Init+0x248>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed8 <HAL_GPIO_Init+0x24c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d025      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <HAL_GPIO_Init+0x250>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d01f      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_GPIO_Init+0x254>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d019      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1a      	ldr	r2, [pc, #104]	@ (8001ee4 <HAL_GPIO_Init+0x258>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d013      	beq.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a19      	ldr	r2, [pc, #100]	@ (8001ee8 <HAL_GPIO_Init+0x25c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d00d      	beq.n	8001ea2 <HAL_GPIO_Init+0x216>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a18      	ldr	r2, [pc, #96]	@ (8001eec <HAL_GPIO_Init+0x260>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x212>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <HAL_GPIO_Init+0x264>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_GPIO_Init+0x20e>
 8001e96:	2309      	movs	r3, #9
 8001e98:	e02d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	e02b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	e029      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	e027      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ea6:	2306      	movs	r3, #6
 8001ea8:	e025      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eaa:	2305      	movs	r3, #5
 8001eac:	e023      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e021      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e01f      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e01d      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01b      	b.n	8001ef6 <HAL_GPIO_Init+0x26a>
 8001ebe:	bf00      	nop
 8001ec0:	58000080 	.word	0x58000080
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58000400 	.word	0x58000400
 8001ecc:	58020000 	.word	0x58020000
 8001ed0:	58020400 	.word	0x58020400
 8001ed4:	58020800 	.word	0x58020800
 8001ed8:	58020c00 	.word	0x58020c00
 8001edc:	58021000 	.word	0x58021000
 8001ee0:	58021400 	.word	0x58021400
 8001ee4:	58021800 	.word	0x58021800
 8001ee8:	58021c00 	.word	0x58021c00
 8001eec:	58022000 	.word	0x58022000
 8001ef0:	58022400 	.word	0x58022400
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f06:	4938      	ldr	r1, [pc, #224]	@ (8001fe8 <HAL_GPIO_Init+0x35c>)
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f47f ae63 	bne.w	8001ca0 <HAL_GPIO_Init+0x14>
  }
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	3724      	adds	r7, #36	@ 0x24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	58000400 	.word	0x58000400

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002008:	e003      	b.n	8002012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800200a:	887b      	ldrh	r3, [r7, #2]
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002038:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fd23 	bl	8000a90 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af02      	add	r7, sp, #8
 8002058:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0fe      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe fe87 	bl	8000d8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2203      	movs	r2, #3
 8002082:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f004 f8bc 	bl	8006208 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7c1a      	ldrb	r2, [r3, #16]
 8002098:	f88d 2000 	strb.w	r2, [sp]
 800209c:	3304      	adds	r3, #4
 800209e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020a0:	f004 f840 	bl	8006124 <USB_CoreInit>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0d5      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 f8b4 	bl	800622a <USB_SetCurrentMode>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0c6      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	e04a      	b.n	8002170 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3315      	adds	r3, #21
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	3314      	adds	r3, #20
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	b298      	uxth	r0, r3
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	332e      	adds	r3, #46	@ 0x2e
 8002116:	4602      	mov	r2, r0
 8002118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3318      	adds	r3, #24
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	331c      	adds	r3, #28
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3320      	adds	r3, #32
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	440b      	add	r3, r1
 8002164:	3324      	adds	r3, #36	@ 0x24
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	3301      	adds	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	791b      	ldrb	r3, [r3, #4]
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	429a      	cmp	r2, r3
 8002178:	d3af      	bcc.n	80020da <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	e044      	b.n	800220a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002180:	7bfa      	ldrb	r2, [r7, #15]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021c2:	7bfa      	ldrb	r2, [r7, #15]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	440b      	add	r3, r1
 80021d0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	3301      	adds	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	791b      	ldrb	r3, [r3, #4]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	429a      	cmp	r2, r3
 8002212:	d3b5      	bcc.n	8002180 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7c1a      	ldrb	r2, [r3, #16]
 800221c:	f88d 2000 	strb.w	r2, [sp]
 8002220:	3304      	adds	r3, #4
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	f004 f84e 	bl	80062c4 <USB_DevInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e013      	b.n	8002262 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7b1b      	ldrb	r3, [r3, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f80b 	bl	800226c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f004 fa09 	bl	8006672 <USB_DevDisconnect>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800229c:	4313      	orrs	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	10000003 	.word	0x10000003

080022b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00a      	beq.n	80022de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022c8:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e01f      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e01d      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	490f      	ldr	r1, [pc, #60]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022ee:	f7fe ff39 	bl	8001164 <HAL_GetTick>
 80022f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022f4:	e009      	b.n	800230a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022f6:	f7fe ff35 	bl	8001164 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002304:	d901      	bls.n	800230a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e007      	b.n	800231a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_PWREx_ConfigSupply+0x70>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002316:	d1ee      	bne.n	80022f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	58024800 	.word	0x58024800

08002328 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	58024800 	.word	0x58024800

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	@ 0x30
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f000 bc48 	b.w	8002bec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8088 	beq.w	800247a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4b99      	ldr	r3, [pc, #612]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002374:	4b96      	ldr	r3, [pc, #600]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800237a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237c:	2b10      	cmp	r3, #16
 800237e:	d007      	beq.n	8002390 <HAL_RCC_OscConfig+0x48>
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	2b18      	cmp	r3, #24
 8002384:	d111      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
 8002386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d10c      	bne.n	80023aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b8f      	ldr	r3, [pc, #572]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06d      	beq.n	8002478 <HAL_RCC_OscConfig+0x130>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d169      	bne.n	8002478 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f000 bc21 	b.w	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x7a>
 80023b4:	4b86      	ldr	r3, [pc, #536]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a85      	ldr	r2, [pc, #532]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x9c>
 80023ca:	4b81      	ldr	r3, [pc, #516]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a80      	ldr	r2, [pc, #512]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b7e      	ldr	r3, [pc, #504]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a7d      	ldr	r2, [pc, #500]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xc0>
 80023ee:	4b78      	ldr	r3, [pc, #480]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a77      	ldr	r2, [pc, #476]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b75      	ldr	r3, [pc, #468]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a74      	ldr	r2, [pc, #464]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xd8>
 8002408:	4b71      	ldr	r3, [pc, #452]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a70      	ldr	r2, [pc, #448]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b6e      	ldr	r3, [pc, #440]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a6d      	ldr	r2, [pc, #436]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800241e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fe9c 	bl	8001164 <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7fe fe98 	bl	8001164 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	@ 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e3d4      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002442:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xe8>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fe88 	bl	8001164 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fe fe84 	bl	8001164 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	@ 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e3c0      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800246a:	4b59      	ldr	r3, [pc, #356]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x110>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80ca 	beq.w	800261c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002488:	4b51      	ldr	r3, [pc, #324]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002490:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002492:	4b4f      	ldr	r3, [pc, #316]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_RCC_OscConfig+0x166>
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	d156      	bne.n	8002552 <HAL_RCC_OscConfig+0x20a>
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d151      	bne.n	8002552 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ae:	4b48      	ldr	r3, [pc, #288]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x17e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e392      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c6:	4b42      	ldr	r3, [pc, #264]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 0219 	bic.w	r2, r3, #25
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	493f      	ldr	r1, [pc, #252]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fe44 	bl	8001164 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fe40 	bl	8001164 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e37c      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f2:	4b37      	ldr	r3, [pc, #220]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fe:	f7fe fe61 	bl	80011c4 <HAL_GetREVID>
 8002502:	4603      	mov	r3, r0
 8002504:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002508:	4293      	cmp	r3, r2
 800250a:	d817      	bhi.n	800253c <HAL_RCC_OscConfig+0x1f4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b40      	cmp	r3, #64	@ 0x40
 8002512:	d108      	bne.n	8002526 <HAL_RCC_OscConfig+0x1de>
 8002514:	4b2e      	ldr	r3, [pc, #184]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800251c:	4a2c      	ldr	r2, [pc, #176]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800251e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002522:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	e07a      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	031b      	lsls	r3, r3, #12
 8002534:	4926      	ldr	r1, [pc, #152]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253a:	e06f      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b24      	ldr	r3, [pc, #144]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	4921      	ldr	r1, [pc, #132]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	e064      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d047      	beq.n	80025ea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800255a:	4b1d      	ldr	r3, [pc, #116]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0219 	bic.w	r2, r3, #25
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	491a      	ldr	r1, [pc, #104]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7fe fdfa 	bl	8001164 <HAL_GetTick>
 8002570:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7fe fdf6 	bl	8001164 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e332      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	f7fe fe17 	bl	80011c4 <HAL_GetREVID>
 8002596:	4603      	mov	r3, r0
 8002598:	f241 0203 	movw	r2, #4099	@ 0x1003
 800259c:	4293      	cmp	r3, r2
 800259e:	d819      	bhi.n	80025d4 <HAL_RCC_OscConfig+0x28c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	2b40      	cmp	r3, #64	@ 0x40
 80025a6:	d108      	bne.n	80025ba <HAL_RCC_OscConfig+0x272>
 80025a8:	4b09      	ldr	r3, [pc, #36]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025b0:	4a07      	ldr	r2, [pc, #28]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b6:	6053      	str	r3, [r2, #4]
 80025b8:	e030      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
 80025ba:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	031b      	lsls	r3, r3, #12
 80025c8:	4901      	ldr	r1, [pc, #4]	@ (80025d0 <HAL_RCC_OscConfig+0x288>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	604b      	str	r3, [r1, #4]
 80025ce:	e025      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
 80025d0:	58024400 	.word	0x58024400
 80025d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	4997      	ldr	r1, [pc, #604]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	604b      	str	r3, [r1, #4]
 80025e8:	e018      	b.n	800261c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b95      	ldr	r3, [pc, #596]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a94      	ldr	r2, [pc, #592]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fdb5 	bl	8001164 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fdb1 	bl	8001164 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e2ed      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002610:	4b8b      	ldr	r3, [pc, #556]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a9 	beq.w	800277c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262a:	4b85      	ldr	r3, [pc, #532]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002632:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002634:	4b82      	ldr	r3, [pc, #520]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002638:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d007      	beq.n	8002650 <HAL_RCC_OscConfig+0x308>
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b18      	cmp	r3, #24
 8002644:	d13a      	bne.n	80026bc <HAL_RCC_OscConfig+0x374>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d135      	bne.n	80026bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002650:	4b7b      	ldr	r3, [pc, #492]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_OscConfig+0x320>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	2b80      	cmp	r3, #128	@ 0x80
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e2c1      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002668:	f7fe fdac 	bl	80011c4 <HAL_GetREVID>
 800266c:	4603      	mov	r3, r0
 800266e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002672:	4293      	cmp	r3, r2
 8002674:	d817      	bhi.n	80026a6 <HAL_RCC_OscConfig+0x35e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	2b20      	cmp	r3, #32
 800267c:	d108      	bne.n	8002690 <HAL_RCC_OscConfig+0x348>
 800267e:	4b70      	ldr	r3, [pc, #448]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002686:	4a6e      	ldr	r2, [pc, #440]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800268c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800268e:	e075      	b.n	800277c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002690:	4b6b      	ldr	r3, [pc, #428]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	4968      	ldr	r1, [pc, #416]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a4:	e06a      	b.n	800277c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a6:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	061b      	lsls	r3, r3, #24
 80026b4:	4962      	ldr	r1, [pc, #392]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ba:	e05f      	b.n	800277c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d042      	beq.n	800274a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fd48 	bl	8001164 <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026d8:	f7fe fd44 	bl	8001164 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e280      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ea:	4b55      	ldr	r3, [pc, #340]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f6:	f7fe fd65 	bl	80011c4 <HAL_GetREVID>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002700:	4293      	cmp	r3, r2
 8002702:	d817      	bhi.n	8002734 <HAL_RCC_OscConfig+0x3ec>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	2b20      	cmp	r3, #32
 800270a:	d108      	bne.n	800271e <HAL_RCC_OscConfig+0x3d6>
 800270c:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002714:	4a4a      	ldr	r2, [pc, #296]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800271a:	6053      	str	r3, [r2, #4]
 800271c:	e02e      	b.n	800277c <HAL_RCC_OscConfig+0x434>
 800271e:	4b48      	ldr	r3, [pc, #288]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	069b      	lsls	r3, r3, #26
 800272c:	4944      	ldr	r1, [pc, #272]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
 8002732:	e023      	b.n	800277c <HAL_RCC_OscConfig+0x434>
 8002734:	4b42      	ldr	r3, [pc, #264]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	493f      	ldr	r1, [pc, #252]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800274a:	4b3d      	ldr	r3, [pc, #244]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a3c      	ldr	r2, [pc, #240]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fd05 	bl	8001164 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800275e:	f7fe fd01 	bl	8001164 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e23d      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002770:	4b33      	ldr	r3, [pc, #204]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d036      	beq.n	80027f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d019      	beq.n	80027c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002790:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002794:	4a2a      	ldr	r2, [pc, #168]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fce2 	bl	8001164 <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe fcde 	bl	8001164 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e21a      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027b6:	4b22      	ldr	r3, [pc, #136]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x45c>
 80027c2:	e018      	b.n	80027f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fcc8 	bl	8001164 <HAL_GetTick>
 80027d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fcc4 	bl	8001164 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e200      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ea:	4b15      	ldr	r3, [pc, #84]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d039      	beq.n	8002876 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d01c      	beq.n	8002844 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002814:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002816:	f7fe fca5 	bl	8001164 <HAL_GetTick>
 800281a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281e:	f7fe fca1 	bl	8001164 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e1dd      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x4d6>
 800283c:	e01b      	b.n	8002876 <HAL_RCC_OscConfig+0x52e>
 800283e:	bf00      	nop
 8002840:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002844:	4b9b      	ldr	r3, [pc, #620]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a9a      	ldr	r2, [pc, #616]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800284a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800284e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002850:	f7fe fc88 	bl	8001164 <HAL_GetTick>
 8002854:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002858:	f7fe fc84 	bl	8001164 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1c0      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800286a:	4b92      	ldr	r3, [pc, #584]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8081 	beq.w	8002986 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002884:	4b8c      	ldr	r3, [pc, #560]	@ (8002ab8 <HAL_RCC_OscConfig+0x770>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a8b      	ldr	r2, [pc, #556]	@ (8002ab8 <HAL_RCC_OscConfig+0x770>)
 800288a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800288e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002890:	f7fe fc68 	bl	8001164 <HAL_GetTick>
 8002894:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002898:	f7fe fc64 	bl	8001164 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1a0      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028aa:	4b83      	ldr	r3, [pc, #524]	@ (8002ab8 <HAL_RCC_OscConfig+0x770>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <HAL_RCC_OscConfig+0x584>
 80028be:	4b7d      	ldr	r3, [pc, #500]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	f043 0301 	orr.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ca:	e02d      	b.n	8002928 <HAL_RCC_OscConfig+0x5e0>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10c      	bne.n	80028ee <HAL_RCC_OscConfig+0x5a6>
 80028d4:	4b77      	ldr	r3, [pc, #476]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	4a76      	ldr	r2, [pc, #472]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e0:	4b74      	ldr	r3, [pc, #464]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	4a73      	ldr	r2, [pc, #460]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	f023 0304 	bic.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ec:	e01c      	b.n	8002928 <HAL_RCC_OscConfig+0x5e0>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b05      	cmp	r3, #5
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x5c8>
 80028f6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	4a6e      	ldr	r2, [pc, #440]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	@ 0x70
 8002902:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002906:	4a6b      	ldr	r2, [pc, #428]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6713      	str	r3, [r2, #112]	@ 0x70
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x5e0>
 8002910:	4b68      	ldr	r3, [pc, #416]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002914:	4a67      	ldr	r2, [pc, #412]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	6713      	str	r3, [r2, #112]	@ 0x70
 800291c:	4b65      	ldr	r3, [pc, #404]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	4a64      	ldr	r2, [pc, #400]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fc18 	bl	8001164 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002936:	e00a      	b.n	800294e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002938:	f7fe fc14 	bl	8001164 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e14e      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800294e:	4b59      	ldr	r3, [pc, #356]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d0ee      	beq.n	8002938 <HAL_RCC_OscConfig+0x5f0>
 800295a:	e014      	b.n	8002986 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fc02 	bl	8001164 <HAL_GetTick>
 8002960:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002964:	f7fe fbfe 	bl	8001164 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002972:	4293      	cmp	r3, r2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e138      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800297a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1ee      	bne.n	8002964 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 812d 	beq.w	8002bea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002990:	4b48      	ldr	r3, [pc, #288]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002998:	2b18      	cmp	r3, #24
 800299a:	f000 80bd 	beq.w	8002b18 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	f040 809e 	bne.w	8002ae4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a8:	4b42      	ldr	r3, [pc, #264]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a41      	ldr	r2, [pc, #260]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fbd6 	bl	8001164 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fbd2 	bl	8001164 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e10e      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ce:	4b39      	ldr	r3, [pc, #228]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029da:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029de:	4b37      	ldr	r3, [pc, #220]	@ (8002abc <HAL_RCC_OscConfig+0x774>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	430a      	orrs	r2, r1
 80029ee:	4931      	ldr	r1, [pc, #196]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f8:	3b01      	subs	r3, #1
 80029fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a02:	3b01      	subs	r3, #1
 8002a04:	025b      	lsls	r3, r3, #9
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	041b      	lsls	r3, r3, #16
 8002a12:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a24:	4923      	ldr	r1, [pc, #140]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a2a:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2e:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a36:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a3a:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <HAL_RCC_OscConfig+0x778>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a42:	00d2      	lsls	r2, r2, #3
 8002a44:	491b      	ldr	r1, [pc, #108]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	f023 020c 	bic.w	r2, r3, #12
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	4917      	ldr	r1, [pc, #92]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a5c:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	f023 0202 	bic.w	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a68:	4912      	ldr	r1, [pc, #72]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	4a10      	ldr	r2, [pc, #64]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a86:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a92:	4b08      	ldr	r3, [pc, #32]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9e:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a04      	ldr	r2, [pc, #16]	@ (8002ab4 <HAL_RCC_OscConfig+0x76c>)
 8002aa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fb5b 	bl	8001164 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ab0:	e011      	b.n	8002ad6 <HAL_RCC_OscConfig+0x78e>
 8002ab2:	bf00      	nop
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	58024800 	.word	0x58024800
 8002abc:	fffffc0c 	.word	0xfffffc0c
 8002ac0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fb4e 	bl	8001164 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e08a      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad6:	4b47      	ldr	r3, [pc, #284]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x77c>
 8002ae2:	e082      	b.n	8002bea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b43      	ldr	r3, [pc, #268]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a42      	ldr	r2, [pc, #264]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fb38 	bl	8001164 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fb34 	bl	8001164 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e070      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b0a:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x7b0>
 8002b16:	e068      	b.n	8002bea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b18:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b1e:	4b35      	ldr	r3, [pc, #212]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d031      	beq.n	8002b90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 0203 	and.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d12a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d122      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	0a5b      	lsrs	r3, r3, #9
 8002b5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b78:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	0e1b      	lsrs	r3, r3, #24
 8002b82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e02b      	b.n	8002bec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b94:	4b17      	ldr	r3, [pc, #92]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b9e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d01f      	beq.n	8002bea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	4a11      	ldr	r2, [pc, #68]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb6:	f7fe fad5 	bl	8001164 <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bbc:	bf00      	nop
 8002bbe:	f7fe fad1 	bl	8001164 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d0f9      	beq.n	8002bbe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bca:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bce:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf8 <HAL_RCC_OscConfig+0x8b0>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bd6:	00d2      	lsls	r2, r2, #3
 8002bd8:	4906      	ldr	r1, [pc, #24]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <HAL_RCC_OscConfig+0x8ac>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3730      	adds	r7, #48	@ 0x30
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	58024400 	.word	0x58024400
 8002bf8:	ffff0007 	.word	0xffff0007

08002bfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e19c      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b8a      	ldr	r3, [pc, #552]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b87      	ldr	r3, [pc, #540]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 020f 	bic.w	r2, r3, #15
 8002c26:	4985      	ldr	r1, [pc, #532]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b83      	ldr	r3, [pc, #524]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e184      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	4b7b      	ldr	r3, [pc, #492]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d908      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c5c:	4b78      	ldr	r3, [pc, #480]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	4975      	ldr	r1, [pc, #468]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	4b70      	ldr	r3, [pc, #448]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	496a      	ldr	r1, [pc, #424]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	4b64      	ldr	r3, [pc, #400]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d908      	bls.n	8002cca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cb8:	4b61      	ldr	r3, [pc, #388]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	495e      	ldr	r1, [pc, #376]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d010      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69da      	ldr	r2, [r3, #28]
 8002cda:	4b59      	ldr	r3, [pc, #356]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d908      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ce6:	4b56      	ldr	r3, [pc, #344]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4953      	ldr	r1, [pc, #332]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	4b4d      	ldr	r3, [pc, #308]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d908      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d14:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f023 020f 	bic.w	r2, r3, #15
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4947      	ldr	r1, [pc, #284]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d055      	beq.n	8002dde <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d32:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	4940      	ldr	r1, [pc, #256]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d121      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0f6      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d64:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d115      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0ea      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d7c:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0de      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d6      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d9c:	4b28      	ldr	r3, [pc, #160]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f023 0207 	bic.w	r2, r3, #7
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	4925      	ldr	r1, [pc, #148]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dae:	f7fe f9d9 	bl	8001164 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db6:	f7fe f9d5 	bl	8001164 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e0be      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d1eb      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b14      	ldr	r3, [pc, #80]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d208      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	f023 020f 	bic.w	r2, r3, #15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	490e      	ldr	r1, [pc, #56]	@ (8002e40 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d214      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 020f 	bic.w	r2, r3, #15
 8002e22:	4906      	ldr	r1, [pc, #24]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b04      	ldr	r3, [pc, #16]	@ (8002e3c <HAL_RCC_ClockConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e086      	b.n	8002f4a <HAL_RCC_ClockConfig+0x34e>
 8002e3c:	52002000 	.word	0x52002000
 8002e40:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	4b3f      	ldr	r3, [pc, #252]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d208      	bcs.n	8002e72 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e60:	4b3c      	ldr	r3, [pc, #240]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	4939      	ldr	r1, [pc, #228]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	4b34      	ldr	r3, [pc, #208]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d208      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	492e      	ldr	r1, [pc, #184]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d208      	bcs.n	8002ece <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ebc:	4b25      	ldr	r3, [pc, #148]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4922      	ldr	r1, [pc, #136]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d010      	beq.n	8002efc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69da      	ldr	r2, [r3, #28]
 8002ede:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d208      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eea:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4917      	ldr	r1, [pc, #92]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002efc:	f000 f834 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	0a1b      	lsrs	r3, r3, #8
 8002f08:	f003 030f 	and.w	r3, r3, #15
 8002f0c:	4912      	ldr	r1, [pc, #72]	@ (8002f58 <HAL_RCC_ClockConfig+0x35c>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	f003 031f 	and.w	r3, r3, #31
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
 8002f18:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a0d      	ldr	r2, [pc, #52]	@ (8002f58 <HAL_RCC_ClockConfig+0x35c>)
 8002f24:	5cd3      	ldrb	r3, [r2, r3]
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f30:	4a0a      	ldr	r2, [pc, #40]	@ (8002f5c <HAL_RCC_ClockConfig+0x360>)
 8002f32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f34:	4a0a      	ldr	r2, [pc, #40]	@ (8002f60 <HAL_RCC_ClockConfig+0x364>)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <HAL_RCC_ClockConfig+0x368>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fe f8c6 	bl	80010d0 <HAL_InitTick>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	58024400 	.word	0x58024400
 8002f58:	080067a4 	.word	0x080067a4
 8002f5c:	24000008 	.word	0x24000008
 8002f60:	24000004 	.word	0x24000004
 8002f64:	2400000c 	.word	0x2400000c

08002f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6e:	4bb3      	ldr	r3, [pc, #716]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f76:	2b18      	cmp	r3, #24
 8002f78:	f200 8155 	bhi.w	8003226 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fe9 	.word	0x08002fe9
 8002f88:	08003227 	.word	0x08003227
 8002f8c:	08003227 	.word	0x08003227
 8002f90:	08003227 	.word	0x08003227
 8002f94:	08003227 	.word	0x08003227
 8002f98:	08003227 	.word	0x08003227
 8002f9c:	08003227 	.word	0x08003227
 8002fa0:	08003227 	.word	0x08003227
 8002fa4:	0800300f 	.word	0x0800300f
 8002fa8:	08003227 	.word	0x08003227
 8002fac:	08003227 	.word	0x08003227
 8002fb0:	08003227 	.word	0x08003227
 8002fb4:	08003227 	.word	0x08003227
 8002fb8:	08003227 	.word	0x08003227
 8002fbc:	08003227 	.word	0x08003227
 8002fc0:	08003227 	.word	0x08003227
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08003227 	.word	0x08003227
 8002fcc:	08003227 	.word	0x08003227
 8002fd0:	08003227 	.word	0x08003227
 8002fd4:	08003227 	.word	0x08003227
 8002fd8:	08003227 	.word	0x08003227
 8002fdc:	08003227 	.word	0x08003227
 8002fe0:	08003227 	.word	0x08003227
 8002fe4:	0800301b 	.word	0x0800301b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe8:	4b94      	ldr	r3, [pc, #592]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0320 	and.w	r3, r3, #32
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ff4:	4b91      	ldr	r3, [pc, #580]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	4a90      	ldr	r2, [pc, #576]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
 8003004:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003006:	e111      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003008:	4b8d      	ldr	r3, [pc, #564]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800300a:	61bb      	str	r3, [r7, #24]
      break;
 800300c:	e10e      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800300e:	4b8d      	ldr	r3, [pc, #564]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003010:	61bb      	str	r3, [r7, #24]
      break;
 8003012:	e10b      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003014:	4b8c      	ldr	r3, [pc, #560]	@ (8003248 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003016:	61bb      	str	r3, [r7, #24]
      break;
 8003018:	e108      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800301a:	4b88      	ldr	r3, [pc, #544]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003024:	4b85      	ldr	r3, [pc, #532]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800302e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003030:	4b82      	ldr	r3, [pc, #520]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800303a:	4b80      	ldr	r3, [pc, #512]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800303e:	08db      	lsrs	r3, r3, #3
 8003040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	ee07 3a90 	vmov	s15, r3
 800304e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003052:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80e1 	beq.w	8003220 <HAL_RCC_GetSysClockFreq+0x2b8>
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	2b02      	cmp	r3, #2
 8003062:	f000 8083 	beq.w	800316c <HAL_RCC_GetSysClockFreq+0x204>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b02      	cmp	r3, #2
 800306a:	f200 80a1 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x248>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x114>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d056      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x1c0>
 800307a:	e099      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800307c:	4b6f      	ldr	r3, [pc, #444]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d02d      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003088:	4b6c      	ldr	r3, [pc, #432]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	4a6b      	ldr	r2, [pc, #428]	@ (8003240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	ee07 3a90 	vmov	s15, r3
 80030a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b2:	4b62      	ldr	r3, [pc, #392]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030e2:	e087      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	ee07 3a90 	vmov	s15, r3
 80030ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003250 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f6:	4b51      	ldr	r3, [pc, #324]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003106:	ed97 6a02 	vldr	s12, [r7, #8]
 800310a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 800310e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800311a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003126:	e065      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003132:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003254 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313a:	4b40      	ldr	r3, [pc, #256]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314a:	ed97 6a02 	vldr	s12, [r7, #8]
 800314e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800315e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800316a:	e043      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003258 <HAL_RCC_GetSysClockFreq+0x2f0>
 800317a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317e:	4b2f      	ldr	r3, [pc, #188]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003192:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ae:	e021      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003254 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c2:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800324c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031f4:	4b11      	ldr	r3, [pc, #68]	@ (800323c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f8:	0a5b      	lsrs	r3, r3, #9
 80031fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031fe:	3301      	adds	r3, #1
 8003200:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	ee07 3a90 	vmov	s15, r3
 8003208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800320c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003218:	ee17 3a90 	vmov	r3, s15
 800321c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800321e:	e005      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	61bb      	str	r3, [r7, #24]
      break;
 8003224:	e002      	b.n	800322c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003226:	4b07      	ldr	r3, [pc, #28]	@ (8003244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003228:	61bb      	str	r3, [r7, #24]
      break;
 800322a:	bf00      	nop
  }

  return sysclockfreq;
 800322c:	69bb      	ldr	r3, [r7, #24]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	@ 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	58024400 	.word	0x58024400
 8003240:	03d09000 	.word	0x03d09000
 8003244:	003d0900 	.word	0x003d0900
 8003248:	007a1200 	.word	0x007a1200
 800324c:	46000000 	.word	0x46000000
 8003250:	4c742400 	.word	0x4c742400
 8003254:	4a742400 	.word	0x4a742400
 8003258:	4af42400 	.word	0x4af42400

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003262:	f7ff fe81 	bl	8002f68 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x50>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490f      	ldr	r1, [pc, #60]	@ (80032b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003280:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_RCC_GetHCLKFreq+0x50>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800328a:	5cd3      	ldrb	r3, [r2, r3]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	fa22 f303 	lsr.w	r3, r2, r3
 8003296:	4a07      	ldr	r2, [pc, #28]	@ (80032b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003298:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800329a:	4a07      	ldr	r2, [pc, #28]	@ (80032b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032a0:	4b04      	ldr	r3, [pc, #16]	@ (80032b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	58024400 	.word	0x58024400
 80032b0:	080067a4 	.word	0x080067a4
 80032b4:	24000008 	.word	0x24000008
 80032b8:	24000004 	.word	0x24000004

080032bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032c0:	f7ff ffcc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	091b      	lsrs	r3, r3, #4
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4904      	ldr	r1, [pc, #16]	@ (80032e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	58024400 	.word	0x58024400
 80032e4:	080067a4 	.word	0x080067a4

080032e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032ec:	f7ff ffb6 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4904      	ldr	r1, [pc, #16]	@ (8003310 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003308:	4618      	mov	r0, r3
 800330a:	bd80      	pop	{r7, pc}
 800330c:	58024400 	.word	0x58024400
 8003310:	080067a4 	.word	0x080067a4

08003314 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b0ca      	sub	sp, #296	@ 0x128
 800331a:	af00      	add	r7, sp, #0
 800331c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003326:	2300      	movs	r3, #0
 8003328:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003338:	2500      	movs	r5, #0
 800333a:	ea54 0305 	orrs.w	r3, r4, r5
 800333e:	d049      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003346:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800334a:	d02f      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800334c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003350:	d828      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003356:	d01a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003358:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800335c:	d822      	bhi.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003366:	d007      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003368:	e01c      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800336a:	4bb8      	ldr	r3, [pc, #736]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336e:	4ab7      	ldr	r2, [pc, #732]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003374:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003376:	e01a      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337c:	3308      	adds	r3, #8
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f001 fc8f 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800338c:	e00f      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003392:	3328      	adds	r3, #40	@ 0x28
 8003394:	2102      	movs	r1, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f001 fd36 	bl	8004e08 <RCCEx_PLL3_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033a2:	e004      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033aa:	e000      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10a      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033b6:	4ba5      	ldr	r3, [pc, #660]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033c4:	4aa1      	ldr	r2, [pc, #644]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80033ca:	e003      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033e0:	f04f 0900 	mov.w	r9, #0
 80033e4:	ea58 0309 	orrs.w	r3, r8, r9
 80033e8:	d047      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d82a      	bhi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033f4:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003411 	.word	0x08003411
 8003400:	0800341f 	.word	0x0800341f
 8003404:	08003435 	.word	0x08003435
 8003408:	08003453 	.word	0x08003453
 800340c:	08003453 	.word	0x08003453
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003410:	4b8e      	ldr	r3, [pc, #568]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	4a8d      	ldr	r2, [pc, #564]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800341c:	e01a      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	3308      	adds	r3, #8
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f001 fc3c 	bl	8004ca4 <RCCEx_PLL2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003432:	e00f      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003438:	3328      	adds	r3, #40	@ 0x28
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fce3 	bl	8004e08 <RCCEx_PLL3_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003448:	e004      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003450:	e000      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800345c:	4b7b      	ldr	r3, [pc, #492]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800345e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003460:	f023 0107 	bic.w	r1, r3, #7
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800346a:	4a78      	ldr	r2, [pc, #480]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800346c:	430b      	orrs	r3, r1
 800346e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003486:	f04f 0b00 	mov.w	fp, #0
 800348a:	ea5a 030b 	orrs.w	r3, sl, fp
 800348e:	d04c      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800349a:	d030      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800349c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a0:	d829      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80034a4:	d02d      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034a8:	d825      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034aa:	2b80      	cmp	r3, #128	@ 0x80
 80034ac:	d018      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034ae:	2b80      	cmp	r3, #128	@ 0x80
 80034b0:	d821      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d002      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80034b6:	2b40      	cmp	r3, #64	@ 0x40
 80034b8:	d007      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80034ba:	e01c      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034bc:	4b63      	ldr	r3, [pc, #396]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	4a62      	ldr	r2, [pc, #392]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034c8:	e01c      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	3308      	adds	r3, #8
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fbe6 	bl	8004ca4 <RCCEx_PLL2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e4:	3328      	adds	r3, #40	@ 0x28
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fc8d 	bl	8004e08 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034f4:	e006      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034fc:	e002      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800350c:	4b4f      	ldr	r3, [pc, #316]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800350e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003510:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	4a4c      	ldr	r2, [pc, #304]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	430b      	orrs	r3, r1
 800351e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003536:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003540:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d053      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003552:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003556:	d035      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003558:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800355c:	d82e      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800355e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003562:	d031      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003564:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003568:	d828      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800356a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356e:	d01a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003574:	d822      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800357a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800357e:	d007      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003580:	e01c      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003582:	4b32      	ldr	r3, [pc, #200]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	4a31      	ldr	r2, [pc, #196]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800358e:	e01c      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003594:	3308      	adds	r3, #8
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fb83 	bl	8004ca4 <RCCEx_PLL2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035a4:	e011      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	3328      	adds	r3, #40	@ 0x28
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 fc2a 	bl	8004e08 <RCCEx_PLL3_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ba:	e006      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c2:	e002      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035d2:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035e2:	4a1a      	ldr	r2, [pc, #104]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e4:	430b      	orrs	r3, r1
 80035e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035e8:	e003      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003608:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800360c:	460b      	mov	r3, r1
 800360e:	4313      	orrs	r3, r2
 8003610:	d056      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800361a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800361e:	d038      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003624:	d831      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003626:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800362a:	d034      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800362c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003630:	d82b      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003636:	d01d      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003638:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800363c:	d825      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d006      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003642:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003648:	e01f      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800364a:	bf00      	nop
 800364c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003650:	4ba2      	ldr	r3, [pc, #648]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	4aa1      	ldr	r2, [pc, #644]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365c:	e01c      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	3308      	adds	r3, #8
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fb1c 	bl	8004ca4 <RCCEx_PLL2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003672:	e011      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	3328      	adds	r3, #40	@ 0x28
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f001 fbc3 	bl	8004e08 <RCCEx_PLL3_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003688:	e006      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003690:	e002      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003692:	bf00      	nop
 8003694:	e000      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10b      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036a0:	4b8e      	ldr	r3, [pc, #568]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036b0:	4a8a      	ldr	r2, [pc, #552]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b2:	430b      	orrs	r3, r1
 80036b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b6:	e003      	b.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036d6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036da:	460b      	mov	r3, r1
 80036dc:	4313      	orrs	r3, r2
 80036de:	d03a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	2b30      	cmp	r3, #48	@ 0x30
 80036e8:	d01f      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80036ea:	2b30      	cmp	r3, #48	@ 0x30
 80036ec:	d819      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d00c      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d815      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d019      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d111      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036fe:	4b77      	ldr	r3, [pc, #476]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	4a76      	ldr	r2, [pc, #472]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003708:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800370a:	e011      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003710:	3308      	adds	r3, #8
 8003712:	2102      	movs	r1, #2
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fac5 	bl	8004ca4 <RCCEx_PLL2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003720:	e006      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003728:	e002      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800372a:	bf00      	nop
 800372c:	e000      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800372e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003738:	4b68      	ldr	r3, [pc, #416]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800373a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003746:	4a65      	ldr	r2, [pc, #404]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003748:	430b      	orrs	r3, r1
 800374a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003762:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800376c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003770:	460b      	mov	r3, r1
 8003772:	4313      	orrs	r3, r2
 8003774:	d051      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003780:	d035      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003782:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003786:	d82e      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003788:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800378c:	d031      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800378e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003792:	d828      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003798:	d01a      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800379e:	d822      	bhi.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a8:	d007      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037aa:	e01c      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ac:	4b4b      	ldr	r3, [pc, #300]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	4a4a      	ldr	r2, [pc, #296]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037b8:	e01c      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037be:	3308      	adds	r3, #8
 80037c0:	2100      	movs	r1, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f001 fa6e 	bl	8004ca4 <RCCEx_PLL2_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ce:	e011      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d4:	3328      	adds	r3, #40	@ 0x28
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fb15 	bl	8004e08 <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037e4:	e006      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80037f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037fc:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003800:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	4a34      	ldr	r2, [pc, #208]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800380c:	430b      	orrs	r3, r1
 800380e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003816:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003830:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d056      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003844:	d033      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003846:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800384a:	d82c      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800384c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003850:	d02f      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003852:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003856:	d826      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003858:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800385c:	d02b      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800385e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003862:	d820      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003864:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003868:	d012      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800386a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800386e:	d81a      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d022      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003878:	d115      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	3308      	adds	r3, #8
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f001 fa0e 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800388e:	e015      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	3328      	adds	r3, #40	@ 0x28
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fab5 	bl	8004e08 <RCCEx_PLL3_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038a4:	e00a      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ae:	bf00      	nop
 80038b0:	e004      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038c4:	4b05      	ldr	r3, [pc, #20]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038d2:	4a02      	ldr	r2, [pc, #8]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80038d8:	e006      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038da:	bf00      	nop
 80038dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d055      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003910:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003914:	d033      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800391a:	d82c      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003920:	d02f      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003926:	d826      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003928:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800392c:	d02b      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800392e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003932:	d820      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003938:	d012      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800393a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800393e:	d81a      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d022      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003948:	d115      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	3308      	adds	r3, #8
 8003950:	2101      	movs	r1, #1
 8003952:	4618      	mov	r0, r3
 8003954:	f001 f9a6 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800395e:	e015      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003964:	3328      	adds	r3, #40	@ 0x28
 8003966:	2101      	movs	r1, #1
 8003968:	4618      	mov	r0, r3
 800396a:	f001 fa4d 	bl	8004e08 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003974:	e00a      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800398a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003994:	4ba3      	ldr	r3, [pc, #652]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003998:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039a4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a6:	430b      	orrs	r3, r1
 80039a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039aa:	e003      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039ce:	460b      	mov	r3, r1
 80039d0:	4313      	orrs	r3, r2
 80039d2:	d037      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039de:	d00e      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80039e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039e4:	d816      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d018      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80039ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ee:	d111      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	4a8b      	ldr	r2, [pc, #556]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039fc:	e00f      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	3308      	adds	r3, #8
 8003a04:	2101      	movs	r1, #1
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f94c 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a12:	e004      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a26:	4b7f      	ldr	r3, [pc, #508]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a34:	4a7b      	ldr	r2, [pc, #492]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a3a:	e003      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4313      	orrs	r3, r2
 8003a62:	d039      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d81c      	bhi.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003a85 	.word	0x08003a85
 8003a7c:	08003a93 	.word	0x08003a93
 8003a80:	08003ab1 	.word	0x08003ab1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a84:	4b67      	ldr	r3, [pc, #412]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a88:	4a66      	ldr	r2, [pc, #408]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a90:	e00f      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a96:	3308      	adds	r3, #8
 8003a98:	2102      	movs	r1, #2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 f902 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003aa6:	e004      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003aba:	4b5a      	ldr	r3, [pc, #360]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abe:	f023 0103 	bic.w	r1, r3, #3
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac8:	4a56      	ldr	r2, [pc, #344]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ace:	e003      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ae4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003aee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003af2:	460b      	mov	r3, r1
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f000 809f 	beq.w	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003afa:	4b4b      	ldr	r3, [pc, #300]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a4a      	ldr	r2, [pc, #296]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b06:	f7fd fb2d 	bl	8001164 <HAL_GetTick>
 8003b0a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b10:	f7fd fb28 	bl	8001164 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b64      	cmp	r3, #100	@ 0x64
 8003b1e:	d903      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b26:	e005      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b28:	4b3f      	ldr	r3, [pc, #252]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ed      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d179      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b3c:	4b39      	ldr	r3, [pc, #228]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b48:	4053      	eors	r3, r2
 8003b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d015      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b52:	4b34      	ldr	r3, [pc, #208]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b5e:	4b31      	ldr	r3, [pc, #196]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	4a30      	ldr	r2, [pc, #192]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b76:	4a2b      	ldr	r2, [pc, #172]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b8a:	d118      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd faea 	bl	8001164 <HAL_GetTick>
 8003b90:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b94:	e00d      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7fd fae5 	bl	8001164 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ba0:	1ad2      	subs	r2, r2, r3
 8003ba2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d903      	bls.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003bb0:	e005      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0eb      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d129      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003be8:	091a      	lsrs	r2, r3, #4
 8003bea:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	4a0d      	ldr	r2, [pc, #52]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6113      	str	r3, [r2, #16]
 8003bf4:	e005      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c00:	6113      	str	r3, [r2, #16]
 8003c02:	4b08      	ldr	r3, [pc, #32]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c04:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c12:	4a04      	ldr	r2, [pc, #16]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c18:	e00e      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003c22:	e009      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c24:	58024400 	.word	0x58024400
 8003c28:	58024800 	.word	0x58024800
 8003c2c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f002 0301 	and.w	r3, r2, #1
 8003c44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c4e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f000 8089 	beq.w	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c60:	2b28      	cmp	r3, #40	@ 0x28
 8003c62:	d86b      	bhi.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c64:	a201      	add	r2, pc, #4	@ (adr r2, 8003c6c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003d45 	.word	0x08003d45
 8003c70:	08003d3d 	.word	0x08003d3d
 8003c74:	08003d3d 	.word	0x08003d3d
 8003c78:	08003d3d 	.word	0x08003d3d
 8003c7c:	08003d3d 	.word	0x08003d3d
 8003c80:	08003d3d 	.word	0x08003d3d
 8003c84:	08003d3d 	.word	0x08003d3d
 8003c88:	08003d3d 	.word	0x08003d3d
 8003c8c:	08003d11 	.word	0x08003d11
 8003c90:	08003d3d 	.word	0x08003d3d
 8003c94:	08003d3d 	.word	0x08003d3d
 8003c98:	08003d3d 	.word	0x08003d3d
 8003c9c:	08003d3d 	.word	0x08003d3d
 8003ca0:	08003d3d 	.word	0x08003d3d
 8003ca4:	08003d3d 	.word	0x08003d3d
 8003ca8:	08003d3d 	.word	0x08003d3d
 8003cac:	08003d27 	.word	0x08003d27
 8003cb0:	08003d3d 	.word	0x08003d3d
 8003cb4:	08003d3d 	.word	0x08003d3d
 8003cb8:	08003d3d 	.word	0x08003d3d
 8003cbc:	08003d3d 	.word	0x08003d3d
 8003cc0:	08003d3d 	.word	0x08003d3d
 8003cc4:	08003d3d 	.word	0x08003d3d
 8003cc8:	08003d3d 	.word	0x08003d3d
 8003ccc:	08003d45 	.word	0x08003d45
 8003cd0:	08003d3d 	.word	0x08003d3d
 8003cd4:	08003d3d 	.word	0x08003d3d
 8003cd8:	08003d3d 	.word	0x08003d3d
 8003cdc:	08003d3d 	.word	0x08003d3d
 8003ce0:	08003d3d 	.word	0x08003d3d
 8003ce4:	08003d3d 	.word	0x08003d3d
 8003ce8:	08003d3d 	.word	0x08003d3d
 8003cec:	08003d45 	.word	0x08003d45
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003d3d 	.word	0x08003d3d
 8003cf8:	08003d3d 	.word	0x08003d3d
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d3d 	.word	0x08003d3d
 8003d04:	08003d3d 	.word	0x08003d3d
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d45 	.word	0x08003d45
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d14:	3308      	adds	r3, #8
 8003d16:	2101      	movs	r1, #1
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 ffc3 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d24:	e00f      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	3328      	adds	r3, #40	@ 0x28
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f001 f86a 	bl	8004e08 <RCCEx_PLL3_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d3a:	e004      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d42:	e000      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d4e:	4bbf      	ldr	r3, [pc, #764]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d52:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d5c:	4abb      	ldr	r2, [pc, #748]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f002 0302 	and.w	r3, r2, #2
 8003d78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d82:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d041      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d824      	bhi.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003d96:	a201      	add	r2, pc, #4	@ (adr r2, 8003d9c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003de9 	.word	0x08003de9
 8003da0:	08003db5 	.word	0x08003db5
 8003da4:	08003dcb 	.word	0x08003dcb
 8003da8:	08003de9 	.word	0x08003de9
 8003dac:	08003de9 	.word	0x08003de9
 8003db0:	08003de9 	.word	0x08003de9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	3308      	adds	r3, #8
 8003dba:	2101      	movs	r1, #1
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 ff71 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dc8:	e00f      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	3328      	adds	r3, #40	@ 0x28
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 f818 	bl	8004e08 <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dde:	e004      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003df2:	4b96      	ldr	r3, [pc, #600]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df6:	f023 0107 	bic.w	r1, r3, #7
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e00:	4a92      	ldr	r2, [pc, #584]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e06:	e003      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f002 0304 	and.w	r3, r2, #4
 8003e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e26:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	d044      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d825      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e44 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e91 	.word	0x08003e91
 8003e48:	08003e5d 	.word	0x08003e5d
 8003e4c:	08003e73 	.word	0x08003e73
 8003e50:	08003e91 	.word	0x08003e91
 8003e54:	08003e91 	.word	0x08003e91
 8003e58:	08003e91 	.word	0x08003e91
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	3308      	adds	r3, #8
 8003e62:	2101      	movs	r1, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 ff1d 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e70:	e00f      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	3328      	adds	r3, #40	@ 0x28
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 ffc4 	bl	8004e08 <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e86:	e004      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e8e:	e000      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003e90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	f023 0107 	bic.w	r1, r3, #7
 8003ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eaa:	4a68      	ldr	r2, [pc, #416]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb0:	e003      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f002 0320 	and.w	r3, r2, #32
 8003ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ed0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d055      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ee6:	d033      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eec:	d82c      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef2:	d02f      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef8:	d826      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003efa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003efe:	d02b      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f00:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f04:	d820      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f0a:	d012      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f10:	d81a      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d022      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f1a:	d115      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	3308      	adds	r3, #8
 8003f22:	2100      	movs	r1, #0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 febd 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f30:	e015      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	3328      	adds	r3, #40	@ 0x28
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 ff64 	bl	8004e08 <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f46:	e00a      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f4e:	e006      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f50:	bf00      	nop
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f54:	bf00      	nop
 8003f56:	e002      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e000      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f66:	4b39      	ldr	r3, [pc, #228]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f76:	4a35      	ldr	r2, [pc, #212]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f78:	430b      	orrs	r3, r1
 8003f7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f7c:	e003      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f9c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d058      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fb2:	d033      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003fb4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fb8:	d82c      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbe:	d02f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc4:	d826      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fca:	d02b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fd0:	d820      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fd6:	d012      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fdc:	d81a      	bhi.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d022      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe6:	d115      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fec:	3308      	adds	r3, #8
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fe57 	bl	8004ca4 <RCCEx_PLL2_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ffc:	e015      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004002:	3328      	adds	r3, #40	@ 0x28
 8004004:	2102      	movs	r1, #2
 8004006:	4618      	mov	r0, r3
 8004008:	f000 fefe 	bl	8004e08 <RCCEx_PLL3_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004012:	e00a      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800401a:	e006      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800401c:	bf00      	nop
 800401e:	e004      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004020:	bf00      	nop
 8004022:	e002      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10e      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004036:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004042:	4a02      	ldr	r2, [pc, #8]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004044:	430b      	orrs	r3, r1
 8004046:	6593      	str	r3, [r2, #88]	@ 0x58
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800406e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d055      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004080:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004084:	d033      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004086:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800408a:	d82c      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800408c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004090:	d02f      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004096:	d826      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004098:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800409c:	d02b      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800409e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040a2:	d820      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040a8:	d012      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ae:	d81a      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d022      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80040b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b8:	d115      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	3308      	adds	r3, #8
 80040c0:	2100      	movs	r1, #0
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fdee 	bl	8004ca4 <RCCEx_PLL2_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040ce:	e015      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d4:	3328      	adds	r3, #40	@ 0x28
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fe95 	bl	8004e08 <RCCEx_PLL3_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040e4:	e00a      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ec:	e006      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040ee:	bf00      	nop
 80040f0:	e004      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040f2:	bf00      	nop
 80040f4:	e002      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040f6:	bf00      	nop
 80040f8:	e000      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80040fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004104:	4ba1      	ldr	r3, [pc, #644]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004108:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004110:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004114:	4a9d      	ldr	r2, [pc, #628]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6593      	str	r3, [r2, #88]	@ 0x58
 800411a:	e003      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 0308 	and.w	r3, r2, #8
 8004130:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800413a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d01e      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800414c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004150:	d10c      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	3328      	adds	r3, #40	@ 0x28
 8004158:	2102      	movs	r1, #2
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fe54 	bl	8004e08 <RCCEx_PLL3_Config>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800416c:	4b87      	ldr	r3, [pc, #540]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800417c:	4a83      	ldr	r2, [pc, #524]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417e:	430b      	orrs	r3, r1
 8004180:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f002 0310 	and.w	r3, r2, #16
 800418e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004192:	2300      	movs	r3, #0
 8004194:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004198:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800419c:	460b      	mov	r3, r1
 800419e:	4313      	orrs	r3, r2
 80041a0:	d01e      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ae:	d10c      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	3328      	adds	r3, #40	@ 0x28
 80041b6:	2102      	movs	r1, #2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fe25 	bl	8004e08 <RCCEx_PLL3_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ca:	4b70      	ldr	r3, [pc, #448]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041da:	4a6c      	ldr	r2, [pc, #432]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d03e      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800420c:	d022      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800420e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004212:	d81b      	bhi.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800421c:	d00b      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800421e:	e015      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	3308      	adds	r3, #8
 8004226:	2100      	movs	r1, #0
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fd3b 	bl	8004ca4 <RCCEx_PLL2_Config>
 800422e:	4603      	mov	r3, r0
 8004230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004234:	e00f      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	3328      	adds	r3, #40	@ 0x28
 800423c:	2102      	movs	r1, #2
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fde2 	bl	8004e08 <RCCEx_PLL3_Config>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800424a:	e004      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004252:	e000      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800425e:	4b4b      	ldr	r3, [pc, #300]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800426e:	4a47      	ldr	r2, [pc, #284]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004270:	430b      	orrs	r3, r1
 8004272:	6593      	str	r3, [r2, #88]	@ 0x58
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800428a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800428c:	2300      	movs	r3, #0
 800428e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004290:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004294:	460b      	mov	r3, r1
 8004296:	4313      	orrs	r3, r2
 8004298:	d03b      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042a6:	d01f      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80042a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042ac:	d818      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042b2:	d003      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80042b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042b8:	d007      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80042ba:	e011      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042bc:	4b33      	ldr	r3, [pc, #204]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	4a32      	ldr	r2, [pc, #200]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042c8:	e00f      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	3328      	adds	r3, #40	@ 0x28
 80042d0:	2101      	movs	r1, #1
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fd98 	bl	8004e08 <RCCEx_PLL3_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10b      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042f2:	4b26      	ldr	r3, [pc, #152]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004302:	4a22      	ldr	r2, [pc, #136]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004304:	430b      	orrs	r3, r1
 8004306:	6553      	str	r3, [r2, #84]	@ 0x54
 8004308:	e003      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800431e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004320:	2300      	movs	r3, #0
 8004322:	677b      	str	r3, [r7, #116]	@ 0x74
 8004324:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004328:	460b      	mov	r3, r1
 800432a:	4313      	orrs	r3, r2
 800432c:	d034      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433c:	d007      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800433e:	e011      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4b12      	ldr	r3, [pc, #72]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4a11      	ldr	r2, [pc, #68]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800434c:	e00e      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	3308      	adds	r3, #8
 8004354:	2102      	movs	r1, #2
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fca4 	bl	8004ca4 <RCCEx_PLL2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004362:	e003      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800436a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10d      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004378:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004382:	4a02      	ldr	r2, [pc, #8]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004384:	430b      	orrs	r3, r1
 8004386:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004388:	e006      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004394:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043a6:	2300      	movs	r3, #0
 80043a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043ae:	460b      	mov	r3, r1
 80043b0:	4313      	orrs	r3, r2
 80043b2:	d00c      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	3328      	adds	r3, #40	@ 0x28
 80043ba:	2102      	movs	r1, #2
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 fd23 	bl	8004e08 <RCCEx_PLL3_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043da:	663b      	str	r3, [r7, #96]	@ 0x60
 80043dc:	2300      	movs	r3, #0
 80043de:	667b      	str	r3, [r7, #100]	@ 0x64
 80043e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043e4:	460b      	mov	r3, r1
 80043e6:	4313      	orrs	r3, r2
 80043e8:	d038      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f6:	d018      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80043f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043fc:	d811      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80043fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004402:	d014      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004404:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004408:	d80b      	bhi.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d011      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800440e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004412:	d106      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004414:	4bc3      	ldr	r3, [pc, #780]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	4ac2      	ldr	r2, [pc, #776]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800441e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004420:	e008      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004428:	e004      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800442a:	bf00      	nop
 800442c:	e002      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800442e:	bf00      	nop
 8004430:	e000      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800443c:	4bb9      	ldr	r3, [pc, #740]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004440:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800444c:	4ab5      	ldr	r2, [pc, #724]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444e:	430b      	orrs	r3, r1
 8004450:	6553      	str	r3, [r2, #84]	@ 0x54
 8004452:	e003      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800446a:	2300      	movs	r3, #0
 800446c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800446e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d009      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004478:	4baa      	ldr	r3, [pc, #680]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004486:	4aa7      	ldr	r2, [pc, #668]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004488:	430b      	orrs	r3, r1
 800448a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004498:	653b      	str	r3, [r7, #80]	@ 0x50
 800449a:	2300      	movs	r3, #0
 800449c:	657b      	str	r3, [r7, #84]	@ 0x54
 800449e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d00a      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80044b8:	4a9a      	ldr	r2, [pc, #616]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ba:	430b      	orrs	r3, r1
 80044bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044cc:	2300      	movs	r3, #0
 80044ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044d4:	460b      	mov	r3, r1
 80044d6:	4313      	orrs	r3, r2
 80044d8:	d009      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044da:	4b92      	ldr	r3, [pc, #584]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044e8:	4a8e      	ldr	r2, [pc, #568]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80044fc:	2300      	movs	r3, #0
 80044fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004500:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800450a:	4b86      	ldr	r3, [pc, #536]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	4a85      	ldr	r2, [pc, #532]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004510:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004514:	6113      	str	r3, [r2, #16]
 8004516:	4b83      	ldr	r3, [pc, #524]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004518:	6919      	ldr	r1, [r3, #16]
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004522:	4a80      	ldr	r2, [pc, #512]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004524:	430b      	orrs	r3, r1
 8004526:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004536:	2300      	movs	r3, #0
 8004538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800453a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d009      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004544:	4b77      	ldr	r3, [pc, #476]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004548:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004552:	4a74      	ldr	r2, [pc, #464]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004554:	430b      	orrs	r3, r1
 8004556:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004564:	633b      	str	r3, [r7, #48]	@ 0x30
 8004566:	2300      	movs	r3, #0
 8004568:	637b      	str	r3, [r7, #52]	@ 0x34
 800456a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004574:	4b6b      	ldr	r3, [pc, #428]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004578:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800457c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004584:	4a67      	ldr	r2, [pc, #412]	@ (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004586:	430b      	orrs	r3, r1
 8004588:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	2100      	movs	r1, #0
 8004594:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d011      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	3308      	adds	r3, #8
 80045ac:	2100      	movs	r1, #0
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fb78 	bl	8004ca4 <RCCEx_PLL2_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	2100      	movs	r1, #0
 80045d4:	6239      	str	r1, [r7, #32]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
 80045dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d011      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	3308      	adds	r3, #8
 80045ec:	2101      	movs	r1, #1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fb58 	bl	8004ca4 <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800460a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	2100      	movs	r1, #0
 8004614:	61b9      	str	r1, [r7, #24]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004620:	460b      	mov	r3, r1
 8004622:	4313      	orrs	r3, r2
 8004624:	d011      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	3308      	adds	r3, #8
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fb38 	bl	8004ca4 <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800463a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800464a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	2100      	movs	r1, #0
 8004654:	6139      	str	r1, [r7, #16]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d011      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	3328      	adds	r3, #40	@ 0x28
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fbca 	bl	8004e08 <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800467a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	2100      	movs	r1, #0
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d011      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046aa:	3328      	adds	r3, #40	@ 0x28
 80046ac:	2101      	movs	r1, #1
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fbaa 	bl	8004e08 <RCCEx_PLL3_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	2100      	movs	r1, #0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d011      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	3328      	adds	r3, #40	@ 0x28
 80046ec:	2102      	movs	r1, #2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fb8a 	bl	8004e08 <RCCEx_PLL3_Config>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800470a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e000      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
}
 8004718:	4618      	mov	r0, r3
 800471a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800471e:	46bd      	mov	sp, r7
 8004720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004724:	58024400 	.word	0x58024400

08004728 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800472c:	f7fe fd96 	bl	800325c <HAL_RCC_GetHCLKFreq>
 8004730:	4602      	mov	r2, r0
 8004732:	4b06      	ldr	r3, [pc, #24]	@ (800474c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	4904      	ldr	r1, [pc, #16]	@ (8004750 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800473e:	5ccb      	ldrb	r3, [r1, r3]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	58024400 	.word	0x58024400
 8004750:	080067a4 	.word	0x080067a4

08004754 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	@ 0x24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800475c:	4ba1      	ldr	r3, [pc, #644]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004766:	4b9f      	ldr	r3, [pc, #636]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	0b1b      	lsrs	r3, r3, #12
 800476c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004770:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004772:	4b9c      	ldr	r3, [pc, #624]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	091b      	lsrs	r3, r3, #4
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800477e:	4b99      	ldr	r3, [pc, #612]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004782:	08db      	lsrs	r3, r3, #3
 8004784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8111 	beq.w	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	f000 8083 	beq.w	80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	f200 80a1 	bhi.w	80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d056      	beq.n	800486c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047be:	e099      	b.n	80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c0:	4b88      	ldr	r3, [pc, #544]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d02d      	beq.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047cc:	4b85      	ldr	r3, [pc, #532]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	08db      	lsrs	r3, r3, #3
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	4a84      	ldr	r2, [pc, #528]	@ (80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
 80047dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	ee07 3a90 	vmov	s15, r3
 80047e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f6:	4b7b      	ldr	r3, [pc, #492]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004806:	ed97 6a03 	vldr	s12, [r7, #12]
 800480a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800480e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800481a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004822:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004826:	e087      	b.n	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483a:	4b6a      	ldr	r3, [pc, #424]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484a:	ed97 6a03 	vldr	s12, [r7, #12]
 800484e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800485e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486a:	e065      	b.n	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	ee07 3a90 	vmov	s15, r3
 8004872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004876:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800487a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800487e:	4b59      	ldr	r3, [pc, #356]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800488e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004892:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800489e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ae:	e043      	b.n	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c2:	4b48      	ldr	r3, [pc, #288]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f2:	e021      	b.n	8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004906:	4b37      	ldr	r3, [pc, #220]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004916:	ed97 6a03 	vldr	s12, [r7, #12]
 800491a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800491e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004926:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004936:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004938:	4b2a      	ldr	r3, [pc, #168]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493c:	0a5b      	lsrs	r3, r3, #9
 800493e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800494e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004952:	edd7 6a07 	vldr	s13, [r7, #28]
 8004956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495e:	ee17 2a90 	vmov	r2, s15
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004966:	4b1f      	ldr	r3, [pc, #124]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	0c1b      	lsrs	r3, r3, #16
 800496c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004978:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800497c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004980:	edd7 6a07 	vldr	s13, [r7, #28]
 8004984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800498c:	ee17 2a90 	vmov	r2, s15
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004994:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	0e1b      	lsrs	r3, r3, #24
 800499a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ba:	ee17 2a90 	vmov	r2, s15
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049c2:	e008      	b.n	80049d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	609a      	str	r2, [r3, #8]
}
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	@ 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	58024400 	.word	0x58024400
 80049e8:	03d09000 	.word	0x03d09000
 80049ec:	46000000 	.word	0x46000000
 80049f0:	4c742400 	.word	0x4c742400
 80049f4:	4a742400 	.word	0x4a742400
 80049f8:	4af42400 	.word	0x4af42400

080049fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b089      	sub	sp, #36	@ 0x24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a04:	4ba1      	ldr	r3, [pc, #644]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a0e:	4b9f      	ldr	r3, [pc, #636]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	0d1b      	lsrs	r3, r3, #20
 8004a14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	0a1b      	lsrs	r3, r3, #8
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a26:	4b99      	ldr	r3, [pc, #612]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2a:	08db      	lsrs	r3, r3, #3
 8004a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8111 	beq.w	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	f000 8083 	beq.w	8004b58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	f200 80a1 	bhi.w	8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d056      	beq.n	8004b14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a66:	e099      	b.n	8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a68:	4b88      	ldr	r3, [pc, #544]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d02d      	beq.n	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a74:	4b85      	ldr	r3, [pc, #532]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	08db      	lsrs	r3, r3, #3
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	4a84      	ldr	r2, [pc, #528]	@ (8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	ee07 3a90 	vmov	s15, r3
 8004a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ace:	e087      	b.n	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	ee07 3a90 	vmov	s15, r3
 8004ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ada:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b12:	e065      	b.n	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b26:	4b59      	ldr	r3, [pc, #356]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2e:	ee07 3a90 	vmov	s15, r3
 8004b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b56:	e043      	b.n	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6a:	4b48      	ldr	r3, [pc, #288]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b72:	ee07 3a90 	vmov	s15, r3
 8004b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9a:	e021      	b.n	8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bae:	4b37      	ldr	r3, [pc, #220]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb6:	ee07 3a90 	vmov	s15, r3
 8004bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bde:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004be0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be4:	0a5b      	lsrs	r3, r3, #9
 8004be6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c06:	ee17 2a90 	vmov	r2, s15
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c18:	ee07 3a90 	vmov	s15, r3
 8004c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c34:	ee17 2a90 	vmov	r2, s15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c3c:	4b13      	ldr	r3, [pc, #76]	@ (8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c62:	ee17 2a90 	vmov	r2, s15
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c6a:	e008      	b.n	8004c7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
}
 8004c7e:	bf00      	nop
 8004c80:	3724      	adds	r7, #36	@ 0x24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	03d09000 	.word	0x03d09000
 8004c94:	46000000 	.word	0x46000000
 8004c98:	4c742400 	.word	0x4c742400
 8004c9c:	4a742400 	.word	0x4a742400
 8004ca0:	4af42400 	.word	0x4af42400

08004ca4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cb2:	4b53      	ldr	r3, [pc, #332]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b03      	cmp	r3, #3
 8004cbc:	d101      	bne.n	8004cc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e099      	b.n	8004df6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc fa49 	bl	8001164 <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cd6:	f7fc fa45 	bl	8001164 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e086      	b.n	8004df6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ce8:	4b45      	ldr	r3, [pc, #276]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cf4:	4b42      	ldr	r3, [pc, #264]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	493f      	ldr	r1, [pc, #252]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	061b      	lsls	r3, r3, #24
 8004d34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d38:	4931      	ldr	r1, [pc, #196]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d3e:	4b30      	ldr	r3, [pc, #192]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	492d      	ldr	r1, [pc, #180]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	f023 0220 	bic.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	4928      	ldr	r1, [pc, #160]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d62:	4b27      	ldr	r3, [pc, #156]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	4a26      	ldr	r2, [pc, #152]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d68:	f023 0310 	bic.w	r3, r3, #16
 8004d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d6e:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d72:	4b24      	ldr	r3, [pc, #144]	@ (8004e04 <RCCEx_PLL2_Config+0x160>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	69d2      	ldr	r2, [r2, #28]
 8004d7a:	00d2      	lsls	r2, r2, #3
 8004d7c:	4920      	ldr	r1, [pc, #128]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d82:	4b1f      	ldr	r3, [pc, #124]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a1e      	ldr	r2, [pc, #120]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	f043 0310 	orr.w	r3, r3, #16
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d94:	4b1a      	ldr	r3, [pc, #104]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d98:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004d9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004da0:	e00f      	b.n	8004dc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d106      	bne.n	8004db6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004da8:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004db2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004db4:	e005      	b.n	8004dc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004db6:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	4a11      	ldr	r2, [pc, #68]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dce:	f7fc f9c9 	bl	8001164 <HAL_GetTick>
 8004dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004dd4:	e008      	b.n	8004de8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dd6:	f7fc f9c5 	bl	8001164 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
 8004e04:	ffff0007 	.word	0xffff0007

08004e08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e16:	4b53      	ldr	r3, [pc, #332]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d101      	bne.n	8004e26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e099      	b.n	8004f5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e26:	4b4f      	ldr	r3, [pc, #316]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fc f997 	bl	8001164 <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e3a:	f7fc f993 	bl	8001164 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e086      	b.n	8004f5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e58:	4b42      	ldr	r3, [pc, #264]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	051b      	lsls	r3, r3, #20
 8004e66:	493f      	ldr	r1, [pc, #252]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e9c:	4931      	ldr	r1, [pc, #196]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ea2:	4b30      	ldr	r3, [pc, #192]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	492d      	ldr	r1, [pc, #180]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	4928      	ldr	r1, [pc, #160]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ec6:	4b27      	ldr	r3, [pc, #156]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	4a26      	ldr	r2, [pc, #152]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ed6:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <RCCEx_PLL3_Config+0x160>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	69d2      	ldr	r2, [r2, #28]
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	4920      	ldr	r1, [pc, #128]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	4a1e      	ldr	r2, [pc, #120]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efc:	4a19      	ldr	r2, [pc, #100]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004efe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f04:	e00f      	b.n	8004f26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f0c:	4b15      	ldr	r3, [pc, #84]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f10:	4a14      	ldr	r2, [pc, #80]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f18:	e005      	b.n	8004f26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f1a:	4b12      	ldr	r3, [pc, #72]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	4a11      	ldr	r2, [pc, #68]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f26:	4b0f      	ldr	r3, [pc, #60]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f32:	f7fc f917 	bl	8001164 <HAL_GetTick>
 8004f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f3a:	f7fc f913 	bl	8001164 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
 8004f68:	ffff0007 	.word	0xffff0007

08004f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e042      	b.n	8005004 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fb fe91 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2224      	movs	r2, #36	@ 0x24
 8004f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fd90 	bl	8005adc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f825 	bl	800500c <UART_SetConfig>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e01b      	b.n	8005004 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fe0f 	bl	8005c20 <UART_CheckIdleState>
 8005002:	4603      	mov	r3, r0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800500c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005010:	b092      	sub	sp, #72	@ 0x48
 8005012:	af00      	add	r7, sp, #0
 8005014:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	431a      	orrs	r2, r3
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	431a      	orrs	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	4313      	orrs	r3, r2
 8005032:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4bbe      	ldr	r3, [pc, #760]	@ (8005334 <UART_SetConfig+0x328>)
 800503c:	4013      	ands	r3, r2
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005044:	430b      	orrs	r3, r1
 8005046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4ab3      	ldr	r2, [pc, #716]	@ (8005338 <UART_SetConfig+0x32c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005074:	4313      	orrs	r3, r2
 8005076:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4baf      	ldr	r3, [pc, #700]	@ (800533c <UART_SetConfig+0x330>)
 8005080:	4013      	ands	r3, r2
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005088:	430b      	orrs	r3, r1
 800508a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	f023 010f 	bic.w	r1, r3, #15
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4aa6      	ldr	r2, [pc, #664]	@ (8005340 <UART_SetConfig+0x334>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d177      	bne.n	800519c <UART_SetConfig+0x190>
 80050ac:	4ba5      	ldr	r3, [pc, #660]	@ (8005344 <UART_SetConfig+0x338>)
 80050ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b4:	2b28      	cmp	r3, #40	@ 0x28
 80050b6:	d86d      	bhi.n	8005194 <UART_SetConfig+0x188>
 80050b8:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <UART_SetConfig+0xb4>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	08005165 	.word	0x08005165
 80050c4:	08005195 	.word	0x08005195
 80050c8:	08005195 	.word	0x08005195
 80050cc:	08005195 	.word	0x08005195
 80050d0:	08005195 	.word	0x08005195
 80050d4:	08005195 	.word	0x08005195
 80050d8:	08005195 	.word	0x08005195
 80050dc:	08005195 	.word	0x08005195
 80050e0:	0800516d 	.word	0x0800516d
 80050e4:	08005195 	.word	0x08005195
 80050e8:	08005195 	.word	0x08005195
 80050ec:	08005195 	.word	0x08005195
 80050f0:	08005195 	.word	0x08005195
 80050f4:	08005195 	.word	0x08005195
 80050f8:	08005195 	.word	0x08005195
 80050fc:	08005195 	.word	0x08005195
 8005100:	08005175 	.word	0x08005175
 8005104:	08005195 	.word	0x08005195
 8005108:	08005195 	.word	0x08005195
 800510c:	08005195 	.word	0x08005195
 8005110:	08005195 	.word	0x08005195
 8005114:	08005195 	.word	0x08005195
 8005118:	08005195 	.word	0x08005195
 800511c:	08005195 	.word	0x08005195
 8005120:	0800517d 	.word	0x0800517d
 8005124:	08005195 	.word	0x08005195
 8005128:	08005195 	.word	0x08005195
 800512c:	08005195 	.word	0x08005195
 8005130:	08005195 	.word	0x08005195
 8005134:	08005195 	.word	0x08005195
 8005138:	08005195 	.word	0x08005195
 800513c:	08005195 	.word	0x08005195
 8005140:	08005185 	.word	0x08005185
 8005144:	08005195 	.word	0x08005195
 8005148:	08005195 	.word	0x08005195
 800514c:	08005195 	.word	0x08005195
 8005150:	08005195 	.word	0x08005195
 8005154:	08005195 	.word	0x08005195
 8005158:	08005195 	.word	0x08005195
 800515c:	08005195 	.word	0x08005195
 8005160:	0800518d 	.word	0x0800518d
 8005164:	2301      	movs	r3, #1
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e222      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e21e      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e21a      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005182:	e216      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005184:	2320      	movs	r3, #32
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518a:	e212      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800518c:	2340      	movs	r3, #64	@ 0x40
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005192:	e20e      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519a:	e20a      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a69      	ldr	r2, [pc, #420]	@ (8005348 <UART_SetConfig+0x33c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d130      	bne.n	8005208 <UART_SetConfig+0x1fc>
 80051a6:	4b67      	ldr	r3, [pc, #412]	@ (8005344 <UART_SetConfig+0x338>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d826      	bhi.n	8005200 <UART_SetConfig+0x1f4>
 80051b2:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <UART_SetConfig+0x1ac>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051d9 	.word	0x080051d9
 80051c0:	080051e1 	.word	0x080051e1
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051f9 	.word	0x080051f9
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e1ec      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80051d8:	2304      	movs	r3, #4
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051de:	e1e8      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80051e0:	2308      	movs	r3, #8
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e6:	e1e4      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80051e8:	2310      	movs	r3, #16
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e1e0      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80051f0:	2320      	movs	r3, #32
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f6:	e1dc      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80051f8:	2340      	movs	r3, #64	@ 0x40
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fe:	e1d8      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005200:	2380      	movs	r3, #128	@ 0x80
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005206:	e1d4      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a4f      	ldr	r2, [pc, #316]	@ (800534c <UART_SetConfig+0x340>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d130      	bne.n	8005274 <UART_SetConfig+0x268>
 8005212:	4b4c      	ldr	r3, [pc, #304]	@ (8005344 <UART_SetConfig+0x338>)
 8005214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	2b05      	cmp	r3, #5
 800521c:	d826      	bhi.n	800526c <UART_SetConfig+0x260>
 800521e:	a201      	add	r2, pc, #4	@ (adr r2, 8005224 <UART_SetConfig+0x218>)
 8005220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005224:	0800523d 	.word	0x0800523d
 8005228:	08005245 	.word	0x08005245
 800522c:	0800524d 	.word	0x0800524d
 8005230:	08005255 	.word	0x08005255
 8005234:	0800525d 	.word	0x0800525d
 8005238:	08005265 	.word	0x08005265
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005242:	e1b6      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005244:	2304      	movs	r3, #4
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524a:	e1b2      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800524c:	2308      	movs	r3, #8
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005252:	e1ae      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525a:	e1aa      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800525c:	2320      	movs	r3, #32
 800525e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005262:	e1a6      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005264:	2340      	movs	r3, #64	@ 0x40
 8005266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526a:	e1a2      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800526c:	2380      	movs	r3, #128	@ 0x80
 800526e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005272:	e19e      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a35      	ldr	r2, [pc, #212]	@ (8005350 <UART_SetConfig+0x344>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d130      	bne.n	80052e0 <UART_SetConfig+0x2d4>
 800527e:	4b31      	ldr	r3, [pc, #196]	@ (8005344 <UART_SetConfig+0x338>)
 8005280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	2b05      	cmp	r3, #5
 8005288:	d826      	bhi.n	80052d8 <UART_SetConfig+0x2cc>
 800528a:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0x284>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052a9 	.word	0x080052a9
 8005294:	080052b1 	.word	0x080052b1
 8005298:	080052b9 	.word	0x080052b9
 800529c:	080052c1 	.word	0x080052c1
 80052a0:	080052c9 	.word	0x080052c9
 80052a4:	080052d1 	.word	0x080052d1
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ae:	e180      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e17c      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e178      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e174      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80052c8:	2320      	movs	r3, #32
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e170      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80052d0:	2340      	movs	r3, #64	@ 0x40
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e16c      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80052d8:	2380      	movs	r3, #128	@ 0x80
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e168      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005354 <UART_SetConfig+0x348>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d142      	bne.n	8005370 <UART_SetConfig+0x364>
 80052ea:	4b16      	ldr	r3, [pc, #88]	@ (8005344 <UART_SetConfig+0x338>)
 80052ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	2b05      	cmp	r3, #5
 80052f4:	d838      	bhi.n	8005368 <UART_SetConfig+0x35c>
 80052f6:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <UART_SetConfig+0x2f0>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005315 	.word	0x08005315
 8005300:	0800531d 	.word	0x0800531d
 8005304:	08005325 	.word	0x08005325
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005359 	.word	0x08005359
 8005310:	08005361 	.word	0x08005361
 8005314:	2300      	movs	r3, #0
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e14a      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800531c:	2304      	movs	r3, #4
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e146      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005324:	2308      	movs	r3, #8
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e142      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800532c:	2310      	movs	r3, #16
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e13e      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005334:	cfff69f3 	.word	0xcfff69f3
 8005338:	58000c00 	.word	0x58000c00
 800533c:	11fff4ff 	.word	0x11fff4ff
 8005340:	40011000 	.word	0x40011000
 8005344:	58024400 	.word	0x58024400
 8005348:	40004400 	.word	0x40004400
 800534c:	40004800 	.word	0x40004800
 8005350:	40004c00 	.word	0x40004c00
 8005354:	40005000 	.word	0x40005000
 8005358:	2320      	movs	r3, #32
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e128      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005360:	2340      	movs	r3, #64	@ 0x40
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e124      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e120      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4acb      	ldr	r2, [pc, #812]	@ (80056a4 <UART_SetConfig+0x698>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d176      	bne.n	8005468 <UART_SetConfig+0x45c>
 800537a:	4bcb      	ldr	r3, [pc, #812]	@ (80056a8 <UART_SetConfig+0x69c>)
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005382:	2b28      	cmp	r3, #40	@ 0x28
 8005384:	d86c      	bhi.n	8005460 <UART_SetConfig+0x454>
 8005386:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <UART_SetConfig+0x380>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	08005431 	.word	0x08005431
 8005390:	08005461 	.word	0x08005461
 8005394:	08005461 	.word	0x08005461
 8005398:	08005461 	.word	0x08005461
 800539c:	08005461 	.word	0x08005461
 80053a0:	08005461 	.word	0x08005461
 80053a4:	08005461 	.word	0x08005461
 80053a8:	08005461 	.word	0x08005461
 80053ac:	08005439 	.word	0x08005439
 80053b0:	08005461 	.word	0x08005461
 80053b4:	08005461 	.word	0x08005461
 80053b8:	08005461 	.word	0x08005461
 80053bc:	08005461 	.word	0x08005461
 80053c0:	08005461 	.word	0x08005461
 80053c4:	08005461 	.word	0x08005461
 80053c8:	08005461 	.word	0x08005461
 80053cc:	08005441 	.word	0x08005441
 80053d0:	08005461 	.word	0x08005461
 80053d4:	08005461 	.word	0x08005461
 80053d8:	08005461 	.word	0x08005461
 80053dc:	08005461 	.word	0x08005461
 80053e0:	08005461 	.word	0x08005461
 80053e4:	08005461 	.word	0x08005461
 80053e8:	08005461 	.word	0x08005461
 80053ec:	08005449 	.word	0x08005449
 80053f0:	08005461 	.word	0x08005461
 80053f4:	08005461 	.word	0x08005461
 80053f8:	08005461 	.word	0x08005461
 80053fc:	08005461 	.word	0x08005461
 8005400:	08005461 	.word	0x08005461
 8005404:	08005461 	.word	0x08005461
 8005408:	08005461 	.word	0x08005461
 800540c:	08005451 	.word	0x08005451
 8005410:	08005461 	.word	0x08005461
 8005414:	08005461 	.word	0x08005461
 8005418:	08005461 	.word	0x08005461
 800541c:	08005461 	.word	0x08005461
 8005420:	08005461 	.word	0x08005461
 8005424:	08005461 	.word	0x08005461
 8005428:	08005461 	.word	0x08005461
 800542c:	08005459 	.word	0x08005459
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e0bc      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e0b8      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e0b4      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e0b0      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e0ac      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005458:	2340      	movs	r3, #64	@ 0x40
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e0a8      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005460:	2380      	movs	r3, #128	@ 0x80
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e0a4      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a8f      	ldr	r2, [pc, #572]	@ (80056ac <UART_SetConfig+0x6a0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d130      	bne.n	80054d4 <UART_SetConfig+0x4c8>
 8005472:	4b8d      	ldr	r3, [pc, #564]	@ (80056a8 <UART_SetConfig+0x69c>)
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b05      	cmp	r3, #5
 800547c:	d826      	bhi.n	80054cc <UART_SetConfig+0x4c0>
 800547e:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <UART_SetConfig+0x478>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	0800549d 	.word	0x0800549d
 8005488:	080054a5 	.word	0x080054a5
 800548c:	080054ad 	.word	0x080054ad
 8005490:	080054b5 	.word	0x080054b5
 8005494:	080054bd 	.word	0x080054bd
 8005498:	080054c5 	.word	0x080054c5
 800549c:	2300      	movs	r3, #0
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e086      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80054a4:	2304      	movs	r3, #4
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e082      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80054ac:	2308      	movs	r3, #8
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e07e      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80054b4:	2310      	movs	r3, #16
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e07a      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80054bc:	2320      	movs	r3, #32
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c2:	e076      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80054c4:	2340      	movs	r3, #64	@ 0x40
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ca:	e072      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80054cc:	2380      	movs	r3, #128	@ 0x80
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d2:	e06e      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a75      	ldr	r2, [pc, #468]	@ (80056b0 <UART_SetConfig+0x6a4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d130      	bne.n	8005540 <UART_SetConfig+0x534>
 80054de:	4b72      	ldr	r3, [pc, #456]	@ (80056a8 <UART_SetConfig+0x69c>)
 80054e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d826      	bhi.n	8005538 <UART_SetConfig+0x52c>
 80054ea:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x4e4>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005509 	.word	0x08005509
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005519 	.word	0x08005519
 80054fc:	08005521 	.word	0x08005521
 8005500:	08005529 	.word	0x08005529
 8005504:	08005531 	.word	0x08005531
 8005508:	2300      	movs	r3, #0
 800550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550e:	e050      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005510:	2304      	movs	r3, #4
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005516:	e04c      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005518:	2308      	movs	r3, #8
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551e:	e048      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005520:	2310      	movs	r3, #16
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005526:	e044      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005528:	2320      	movs	r3, #32
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552e:	e040      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005530:	2340      	movs	r3, #64	@ 0x40
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005536:	e03c      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553e:	e038      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a5b      	ldr	r2, [pc, #364]	@ (80056b4 <UART_SetConfig+0x6a8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d130      	bne.n	80055ac <UART_SetConfig+0x5a0>
 800554a:	4b57      	ldr	r3, [pc, #348]	@ (80056a8 <UART_SetConfig+0x69c>)
 800554c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b05      	cmp	r3, #5
 8005554:	d826      	bhi.n	80055a4 <UART_SetConfig+0x598>
 8005556:	a201      	add	r2, pc, #4	@ (adr r2, 800555c <UART_SetConfig+0x550>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005575 	.word	0x08005575
 8005560:	0800557d 	.word	0x0800557d
 8005564:	08005585 	.word	0x08005585
 8005568:	0800558d 	.word	0x0800558d
 800556c:	08005595 	.word	0x08005595
 8005570:	0800559d 	.word	0x0800559d
 8005574:	2302      	movs	r3, #2
 8005576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557a:	e01a      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e016      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e012      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e00e      	b.n	80055b2 <UART_SetConfig+0x5a6>
 8005594:	2320      	movs	r3, #32
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e00a      	b.n	80055b2 <UART_SetConfig+0x5a6>
 800559c:	2340      	movs	r3, #64	@ 0x40
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e006      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80055a4:	2380      	movs	r3, #128	@ 0x80
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e002      	b.n	80055b2 <UART_SetConfig+0x5a6>
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3f      	ldr	r2, [pc, #252]	@ (80056b4 <UART_SetConfig+0x6a8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	f040 80f8 	bne.w	80057ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	dc46      	bgt.n	8005654 <UART_SetConfig+0x648>
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	f2c0 8082 	blt.w	80056d0 <UART_SetConfig+0x6c4>
 80055cc:	3b02      	subs	r3, #2
 80055ce:	2b1e      	cmp	r3, #30
 80055d0:	d87e      	bhi.n	80056d0 <UART_SetConfig+0x6c4>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <UART_SetConfig+0x5cc>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	0800565b 	.word	0x0800565b
 80055dc:	080056d1 	.word	0x080056d1
 80055e0:	08005663 	.word	0x08005663
 80055e4:	080056d1 	.word	0x080056d1
 80055e8:	080056d1 	.word	0x080056d1
 80055ec:	080056d1 	.word	0x080056d1
 80055f0:	08005673 	.word	0x08005673
 80055f4:	080056d1 	.word	0x080056d1
 80055f8:	080056d1 	.word	0x080056d1
 80055fc:	080056d1 	.word	0x080056d1
 8005600:	080056d1 	.word	0x080056d1
 8005604:	080056d1 	.word	0x080056d1
 8005608:	080056d1 	.word	0x080056d1
 800560c:	080056d1 	.word	0x080056d1
 8005610:	08005683 	.word	0x08005683
 8005614:	080056d1 	.word	0x080056d1
 8005618:	080056d1 	.word	0x080056d1
 800561c:	080056d1 	.word	0x080056d1
 8005620:	080056d1 	.word	0x080056d1
 8005624:	080056d1 	.word	0x080056d1
 8005628:	080056d1 	.word	0x080056d1
 800562c:	080056d1 	.word	0x080056d1
 8005630:	080056d1 	.word	0x080056d1
 8005634:	080056d1 	.word	0x080056d1
 8005638:	080056d1 	.word	0x080056d1
 800563c:	080056d1 	.word	0x080056d1
 8005640:	080056d1 	.word	0x080056d1
 8005644:	080056d1 	.word	0x080056d1
 8005648:	080056d1 	.word	0x080056d1
 800564c:	080056d1 	.word	0x080056d1
 8005650:	080056c3 	.word	0x080056c3
 8005654:	2b40      	cmp	r3, #64	@ 0x40
 8005656:	d037      	beq.n	80056c8 <UART_SetConfig+0x6bc>
 8005658:	e03a      	b.n	80056d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800565a:	f7ff f865 	bl	8004728 <HAL_RCCEx_GetD3PCLK1Freq>
 800565e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005660:	e03c      	b.n	80056dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005666:	4618      	mov	r0, r3
 8005668:	f7ff f874 	bl	8004754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005670:	e034      	b.n	80056dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005672:	f107 0318 	add.w	r3, r7, #24
 8005676:	4618      	mov	r0, r3
 8005678:	f7ff f9c0 	bl	80049fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005680:	e02c      	b.n	80056dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005682:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <UART_SetConfig+0x69c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d016      	beq.n	80056bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800568e:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <UART_SetConfig+0x69c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	08db      	lsrs	r3, r3, #3
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	4a07      	ldr	r2, [pc, #28]	@ (80056b8 <UART_SetConfig+0x6ac>)
 800569a:	fa22 f303 	lsr.w	r3, r2, r3
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056a0:	e01c      	b.n	80056dc <UART_SetConfig+0x6d0>
 80056a2:	bf00      	nop
 80056a4:	40011400 	.word	0x40011400
 80056a8:	58024400 	.word	0x58024400
 80056ac:	40007800 	.word	0x40007800
 80056b0:	40007c00 	.word	0x40007c00
 80056b4:	58000c00 	.word	0x58000c00
 80056b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80056bc:	4b9d      	ldr	r3, [pc, #628]	@ (8005934 <UART_SetConfig+0x928>)
 80056be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c0:	e00c      	b.n	80056dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80056c2:	4b9d      	ldr	r3, [pc, #628]	@ (8005938 <UART_SetConfig+0x92c>)
 80056c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056c6:	e009      	b.n	80056dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ce:	e005      	b.n	80056dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80056da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 81de 	beq.w	8005aa0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	4a94      	ldr	r2, [pc, #592]	@ (800593c <UART_SetConfig+0x930>)
 80056ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056ee:	461a      	mov	r2, r3
 80056f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80056f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005704:	429a      	cmp	r2, r3
 8005706:	d305      	bcc.n	8005714 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800570e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800571a:	e1c1      	b.n	8005aa0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800571c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800571e:	2200      	movs	r2, #0
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	60fa      	str	r2, [r7, #12]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	4a84      	ldr	r2, [pc, #528]	@ (800593c <UART_SetConfig+0x930>)
 800572a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572e:	b29b      	uxth	r3, r3
 8005730:	2200      	movs	r2, #0
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	607a      	str	r2, [r7, #4]
 8005736:	e9d7 2300 	ldrd	r2, r3, [r7]
 800573a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800573e:	f7fa fdcb 	bl	80002d8 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	020b      	lsls	r3, r1, #8
 8005754:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005758:	0202      	lsls	r2, r0, #8
 800575a:	6979      	ldr	r1, [r7, #20]
 800575c:	6849      	ldr	r1, [r1, #4]
 800575e:	0849      	lsrs	r1, r1, #1
 8005760:	2000      	movs	r0, #0
 8005762:	460c      	mov	r4, r1
 8005764:	4605      	mov	r5, r0
 8005766:	eb12 0804 	adds.w	r8, r2, r4
 800576a:	eb43 0905 	adc.w	r9, r3, r5
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	469a      	mov	sl, r3
 8005776:	4693      	mov	fp, r2
 8005778:	4652      	mov	r2, sl
 800577a:	465b      	mov	r3, fp
 800577c:	4640      	mov	r0, r8
 800577e:	4649      	mov	r1, r9
 8005780:	f7fa fdaa 	bl	80002d8 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4613      	mov	r3, r2
 800578a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005792:	d308      	bcc.n	80057a6 <UART_SetConfig+0x79a>
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800579a:	d204      	bcs.n	80057a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	e17c      	b.n	8005aa0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80057ac:	e178      	b.n	8005aa0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057b6:	f040 80c5 	bne.w	8005944 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80057ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057be:	2b20      	cmp	r3, #32
 80057c0:	dc48      	bgt.n	8005854 <UART_SetConfig+0x848>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	db7b      	blt.n	80058be <UART_SetConfig+0x8b2>
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	d879      	bhi.n	80058be <UART_SetConfig+0x8b2>
 80057ca:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <UART_SetConfig+0x7c4>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	0800585b 	.word	0x0800585b
 80057d4:	08005863 	.word	0x08005863
 80057d8:	080058bf 	.word	0x080058bf
 80057dc:	080058bf 	.word	0x080058bf
 80057e0:	0800586b 	.word	0x0800586b
 80057e4:	080058bf 	.word	0x080058bf
 80057e8:	080058bf 	.word	0x080058bf
 80057ec:	080058bf 	.word	0x080058bf
 80057f0:	0800587b 	.word	0x0800587b
 80057f4:	080058bf 	.word	0x080058bf
 80057f8:	080058bf 	.word	0x080058bf
 80057fc:	080058bf 	.word	0x080058bf
 8005800:	080058bf 	.word	0x080058bf
 8005804:	080058bf 	.word	0x080058bf
 8005808:	080058bf 	.word	0x080058bf
 800580c:	080058bf 	.word	0x080058bf
 8005810:	0800588b 	.word	0x0800588b
 8005814:	080058bf 	.word	0x080058bf
 8005818:	080058bf 	.word	0x080058bf
 800581c:	080058bf 	.word	0x080058bf
 8005820:	080058bf 	.word	0x080058bf
 8005824:	080058bf 	.word	0x080058bf
 8005828:	080058bf 	.word	0x080058bf
 800582c:	080058bf 	.word	0x080058bf
 8005830:	080058bf 	.word	0x080058bf
 8005834:	080058bf 	.word	0x080058bf
 8005838:	080058bf 	.word	0x080058bf
 800583c:	080058bf 	.word	0x080058bf
 8005840:	080058bf 	.word	0x080058bf
 8005844:	080058bf 	.word	0x080058bf
 8005848:	080058bf 	.word	0x080058bf
 800584c:	080058bf 	.word	0x080058bf
 8005850:	080058b1 	.word	0x080058b1
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d02e      	beq.n	80058b6 <UART_SetConfig+0x8aa>
 8005858:	e031      	b.n	80058be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800585a:	f7fd fd2f 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 800585e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005860:	e033      	b.n	80058ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005862:	f7fd fd41 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 8005866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005868:	e02f      	b.n	80058ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800586a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe ff70 	bl	8004754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005878:	e027      	b.n	80058ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800587a:	f107 0318 	add.w	r3, r7, #24
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f8bc 	bl	80049fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005888:	e01f      	b.n	80058ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800588a:	4b2d      	ldr	r3, [pc, #180]	@ (8005940 <UART_SetConfig+0x934>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0320 	and.w	r3, r3, #32
 8005892:	2b00      	cmp	r3, #0
 8005894:	d009      	beq.n	80058aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005896:	4b2a      	ldr	r3, [pc, #168]	@ (8005940 <UART_SetConfig+0x934>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	08db      	lsrs	r3, r3, #3
 800589c:	f003 0303 	and.w	r3, r3, #3
 80058a0:	4a24      	ldr	r2, [pc, #144]	@ (8005934 <UART_SetConfig+0x928>)
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058a8:	e00f      	b.n	80058ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80058aa:	4b22      	ldr	r3, [pc, #136]	@ (8005934 <UART_SetConfig+0x928>)
 80058ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ae:	e00c      	b.n	80058ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058b0:	4b21      	ldr	r3, [pc, #132]	@ (8005938 <UART_SetConfig+0x92c>)
 80058b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058b4:	e009      	b.n	80058ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058bc:	e005      	b.n	80058ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 80e7 	beq.w	8005aa0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	4a19      	ldr	r2, [pc, #100]	@ (800593c <UART_SetConfig+0x930>)
 80058d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058dc:	461a      	mov	r2, r3
 80058de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80058e4:	005a      	lsls	r2, r3, #1
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	085b      	lsrs	r3, r3, #1
 80058ec:	441a      	add	r2, r3
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	2b0f      	cmp	r3, #15
 80058fc:	d916      	bls.n	800592c <UART_SetConfig+0x920>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005904:	d212      	bcs.n	800592c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	b29b      	uxth	r3, r3
 800590a:	f023 030f 	bic.w	r3, r3, #15
 800590e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005912:	085b      	lsrs	r3, r3, #1
 8005914:	b29b      	uxth	r3, r3
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	b29a      	uxth	r2, r3
 800591c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800591e:	4313      	orrs	r3, r2
 8005920:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005928:	60da      	str	r2, [r3, #12]
 800592a:	e0b9      	b.n	8005aa0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005932:	e0b5      	b.n	8005aa0 <UART_SetConfig+0xa94>
 8005934:	03d09000 	.word	0x03d09000
 8005938:	003d0900 	.word	0x003d0900
 800593c:	080067b4 	.word	0x080067b4
 8005940:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005944:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005948:	2b20      	cmp	r3, #32
 800594a:	dc49      	bgt.n	80059e0 <UART_SetConfig+0x9d4>
 800594c:	2b00      	cmp	r3, #0
 800594e:	db7c      	blt.n	8005a4a <UART_SetConfig+0xa3e>
 8005950:	2b20      	cmp	r3, #32
 8005952:	d87a      	bhi.n	8005a4a <UART_SetConfig+0xa3e>
 8005954:	a201      	add	r2, pc, #4	@ (adr r2, 800595c <UART_SetConfig+0x950>)
 8005956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595a:	bf00      	nop
 800595c:	080059e7 	.word	0x080059e7
 8005960:	080059ef 	.word	0x080059ef
 8005964:	08005a4b 	.word	0x08005a4b
 8005968:	08005a4b 	.word	0x08005a4b
 800596c:	080059f7 	.word	0x080059f7
 8005970:	08005a4b 	.word	0x08005a4b
 8005974:	08005a4b 	.word	0x08005a4b
 8005978:	08005a4b 	.word	0x08005a4b
 800597c:	08005a07 	.word	0x08005a07
 8005980:	08005a4b 	.word	0x08005a4b
 8005984:	08005a4b 	.word	0x08005a4b
 8005988:	08005a4b 	.word	0x08005a4b
 800598c:	08005a4b 	.word	0x08005a4b
 8005990:	08005a4b 	.word	0x08005a4b
 8005994:	08005a4b 	.word	0x08005a4b
 8005998:	08005a4b 	.word	0x08005a4b
 800599c:	08005a17 	.word	0x08005a17
 80059a0:	08005a4b 	.word	0x08005a4b
 80059a4:	08005a4b 	.word	0x08005a4b
 80059a8:	08005a4b 	.word	0x08005a4b
 80059ac:	08005a4b 	.word	0x08005a4b
 80059b0:	08005a4b 	.word	0x08005a4b
 80059b4:	08005a4b 	.word	0x08005a4b
 80059b8:	08005a4b 	.word	0x08005a4b
 80059bc:	08005a4b 	.word	0x08005a4b
 80059c0:	08005a4b 	.word	0x08005a4b
 80059c4:	08005a4b 	.word	0x08005a4b
 80059c8:	08005a4b 	.word	0x08005a4b
 80059cc:	08005a4b 	.word	0x08005a4b
 80059d0:	08005a4b 	.word	0x08005a4b
 80059d4:	08005a4b 	.word	0x08005a4b
 80059d8:	08005a4b 	.word	0x08005a4b
 80059dc:	08005a3d 	.word	0x08005a3d
 80059e0:	2b40      	cmp	r3, #64	@ 0x40
 80059e2:	d02e      	beq.n	8005a42 <UART_SetConfig+0xa36>
 80059e4:	e031      	b.n	8005a4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e6:	f7fd fc69 	bl	80032bc <HAL_RCC_GetPCLK1Freq>
 80059ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059ec:	e033      	b.n	8005a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059ee:	f7fd fc7b 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 80059f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059f4:	e02f      	b.n	8005a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe feaa 	bl	8004754 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a04:	e027      	b.n	8005a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a06:	f107 0318 	add.w	r3, r7, #24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fff6 	bl	80049fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a14:	e01f      	b.n	8005a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a16:	4b2d      	ldr	r3, [pc, #180]	@ (8005acc <UART_SetConfig+0xac0>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a22:	4b2a      	ldr	r3, [pc, #168]	@ (8005acc <UART_SetConfig+0xac0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	08db      	lsrs	r3, r3, #3
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	4a28      	ldr	r2, [pc, #160]	@ (8005ad0 <UART_SetConfig+0xac4>)
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a34:	e00f      	b.n	8005a56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005a36:	4b26      	ldr	r3, [pc, #152]	@ (8005ad0 <UART_SetConfig+0xac4>)
 8005a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a3a:	e00c      	b.n	8005a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a3c:	4b25      	ldr	r3, [pc, #148]	@ (8005ad4 <UART_SetConfig+0xac8>)
 8005a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a40:	e009      	b.n	8005a56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a48:	e005      	b.n	8005a56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a54:	bf00      	nop
    }

    if (pclk != 0U)
 8005a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d021      	beq.n	8005aa0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	4a1d      	ldr	r2, [pc, #116]	@ (8005ad8 <UART_SetConfig+0xacc>)
 8005a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	441a      	add	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d909      	bls.n	8005a9a <UART_SetConfig+0xa8e>
 8005a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8c:	d205      	bcs.n	8005a9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e002      	b.n	8005aa0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005abc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3748      	adds	r7, #72	@ 0x48
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aca:	bf00      	nop
 8005acc:	58024400 	.word	0x58024400
 8005ad0:	03d09000 	.word	0x03d09000
 8005ad4:	003d0900 	.word	0x003d0900
 8005ad8:	080067b4 	.word	0x080067b4

08005adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	430a      	orrs	r2, r1
 8005b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	f003 0310 	and.w	r3, r3, #16
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d01a      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bda:	d10a      	bne.n	8005bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b098      	sub	sp, #96	@ 0x60
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c30:	f7fb fa98 	bl	8001164 <HAL_GetTick>
 8005c34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d12f      	bne.n	8005ca4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f88e 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d022      	beq.n	8005ca4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e6      	bne.n	8005c5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e063      	b.n	8005d6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b04      	cmp	r3, #4
 8005cb0:	d149      	bne.n	8005d46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f857 	bl	8005d74 <UART_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d03c      	beq.n	8005d46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cea:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e6      	bne.n	8005ccc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3308      	adds	r3, #8
 8005d04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	e853 3f00 	ldrex	r3, [r3]
 8005d0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3308      	adds	r3, #8
 8005d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d1e:	61fa      	str	r2, [r7, #28]
 8005d20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	69b9      	ldr	r1, [r7, #24]
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e5      	bne.n	8005cfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e012      	b.n	8005d6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3758      	adds	r7, #88	@ 0x58
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	4613      	mov	r3, r2
 8005d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d84:	e04f      	b.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d04b      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d8e:	f7fb f9e9 	bl	8001164 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d302      	bcc.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e04e      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d037      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b80      	cmp	r3, #128	@ 0x80
 8005dba:	d034      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b40      	cmp	r3, #64	@ 0x40
 8005dc0:	d031      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b08      	cmp	r3, #8
 8005dce:	d110      	bne.n	8005df2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 f839 	bl	8005e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2208      	movs	r2, #8
 8005de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e029      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e00:	d111      	bne.n	8005e26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f81f 	bl	8005e50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e00f      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4013      	ands	r3, r2
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	bf0c      	ite	eq
 8005e36:	2301      	moveq	r3, #1
 8005e38:	2300      	movne	r3, #0
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	79fb      	ldrb	r3, [r7, #7]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d0a0      	beq.n	8005d86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b095      	sub	sp, #84	@ 0x54
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e76:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e6      	bne.n	8005e58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8005f18 <UART_EndRxTransfer+0xc8>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e5      	bne.n	8005e8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d118      	bne.n	8005ef8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f023 0310 	bic.w	r3, r3, #16
 8005eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6979      	ldr	r1, [r7, #20]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e6      	bne.n	8005ec6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2220      	movs	r2, #32
 8005efc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f0c:	bf00      	nop
 8005f0e:	3754      	adds	r7, #84	@ 0x54
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	effffffe 	.word	0xeffffffe

08005f1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_UARTEx_DisableFifoMode+0x16>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e027      	b.n	8005f82 <HAL_UARTEx_DisableFifoMode+0x66>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2224      	movs	r2, #36	@ 0x24
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005f60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e02d      	b.n	8006002 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2224      	movs	r2, #36	@ 0x24
 8005fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f850 	bl	8006088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b084      	sub	sp, #16
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800601e:	2302      	movs	r3, #2
 8006020:	e02d      	b.n	800607e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2224      	movs	r2, #36	@ 0x24
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0201 	bic.w	r2, r2, #1
 8006048:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f812 	bl	8006088 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2220      	movs	r2, #32
 8006070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80060a8:	e031      	b.n	800610e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80060aa:	2310      	movs	r3, #16
 80060ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80060ae:	2310      	movs	r3, #16
 80060b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	0e5b      	lsrs	r3, r3, #25
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	0f5b      	lsrs	r3, r3, #29
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	7b3a      	ldrb	r2, [r7, #12]
 80060d6:	4911      	ldr	r1, [pc, #68]	@ (800611c <UARTEx_SetNbDataToProcess+0x94>)
 80060d8:	5c8a      	ldrb	r2, [r1, r2]
 80060da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80060de:	7b3a      	ldrb	r2, [r7, #12]
 80060e0:	490f      	ldr	r1, [pc, #60]	@ (8006120 <UARTEx_SetNbDataToProcess+0x98>)
 80060e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80060e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	7b7a      	ldrb	r2, [r7, #13]
 80060f4:	4909      	ldr	r1, [pc, #36]	@ (800611c <UARTEx_SetNbDataToProcess+0x94>)
 80060f6:	5c8a      	ldrb	r2, [r1, r2]
 80060f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80060fc:	7b7a      	ldrb	r2, [r7, #13]
 80060fe:	4908      	ldr	r1, [pc, #32]	@ (8006120 <UARTEx_SetNbDataToProcess+0x98>)
 8006100:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006102:	fb93 f3f2 	sdiv	r3, r3, r2
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	080067cc 	.word	0x080067cc
 8006120:	080067d4 	.word	0x080067d4

08006124 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006124:	b084      	sub	sp, #16
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	f107 001c 	add.w	r0, r7, #28
 8006132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006136:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800613a:	2b01      	cmp	r3, #1
 800613c:	d121      	bne.n	8006182 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006142:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	4b2c      	ldr	r3, [pc, #176]	@ (8006200 <USB_CoreInit+0xdc>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006162:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006166:	2b01      	cmp	r3, #1
 8006168:	d105      	bne.n	8006176 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 faaa 	bl	80066d0 <USB_CoreReset>
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
 8006180:	e01b      	b.n	80061ba <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa9e 	bl	80066d0 <USB_CoreReset>
 8006194:	4603      	mov	r3, r0
 8006196:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006198:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80061ac:	e005      	b.n	80061ba <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061ba:	7fbb      	ldrb	r3, [r7, #30]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d116      	bne.n	80061ee <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006204 <USB_CoreInit+0xe0>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f043 0206 	orr.w	r2, r3, #6
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f043 0220 	orr.w	r2, r3, #32
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061fa:	b004      	add	sp, #16
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	ffbdffbf 	.word	0xffbdffbf
 8006204:	03ee0000 	.word	0x03ee0000

08006208 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f023 0201 	bic.w	r2, r3, #1
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	460b      	mov	r3, r1
 8006234:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d115      	bne.n	8006278 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006258:	200a      	movs	r0, #10
 800625a:	f7fa ff8f 	bl	800117c <HAL_Delay>
      ms += 10U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	330a      	adds	r3, #10
 8006262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fa25 	bl	80066b4 <USB_GetMode>
 800626a:	4603      	mov	r3, r0
 800626c:	2b01      	cmp	r3, #1
 800626e:	d01e      	beq.n	80062ae <USB_SetCurrentMode+0x84>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2bc7      	cmp	r3, #199	@ 0xc7
 8006274:	d9f0      	bls.n	8006258 <USB_SetCurrentMode+0x2e>
 8006276:	e01a      	b.n	80062ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d115      	bne.n	80062aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800628a:	200a      	movs	r0, #10
 800628c:	f7fa ff76 	bl	800117c <HAL_Delay>
      ms += 10U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	330a      	adds	r3, #10
 8006294:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fa0c 	bl	80066b4 <USB_GetMode>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d005      	beq.n	80062ae <USB_SetCurrentMode+0x84>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80062a6:	d9f0      	bls.n	800628a <USB_SetCurrentMode+0x60>
 80062a8:	e001      	b.n	80062ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e005      	b.n	80062ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80062b2:	d101      	bne.n	80062b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062c4:	b084      	sub	sp, #16
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	e009      	b.n	80062f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3340      	adds	r3, #64	@ 0x40
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	2200      	movs	r2, #0
 80062f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	3301      	adds	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	2b0e      	cmp	r3, #14
 80062fc:	d9f2      	bls.n	80062e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006302:	2b00      	cmp	r3, #0
 8006304:	d11c      	bne.n	8006340 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	e005      	b.n	800634c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006344:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006352:	461a      	mov	r2, r3
 8006354:	2300      	movs	r3, #0
 8006356:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006358:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800635c:	2b01      	cmp	r3, #1
 800635e:	d10d      	bne.n	800637c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006360:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006364:	2b00      	cmp	r3, #0
 8006366:	d104      	bne.n	8006372 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006368:	2100      	movs	r1, #0
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f968 	bl	8006640 <USB_SetDevSpeed>
 8006370:	e008      	b.n	8006384 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006372:	2101      	movs	r1, #1
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f963 	bl	8006640 <USB_SetDevSpeed>
 800637a:	e003      	b.n	8006384 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800637c:	2103      	movs	r1, #3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f95e 	bl	8006640 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006384:	2110      	movs	r1, #16
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8fa 	bl	8006580 <USB_FlushTxFifo>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f924 	bl	80065e4 <USB_FlushRxFifo>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ac:	461a      	mov	r2, r3
 80063ae:	2300      	movs	r3, #0
 80063b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063b8:	461a      	mov	r2, r3
 80063ba:	2300      	movs	r3, #0
 80063bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063ca:	2300      	movs	r3, #0
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	e043      	b.n	8006458 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e6:	d118      	bne.n	800641a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	015a      	lsls	r2, r3, #5
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fa:	461a      	mov	r2, r3
 80063fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e013      	b.n	800642c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006410:	461a      	mov	r2, r3
 8006412:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	e008      	b.n	800642c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006438:	461a      	mov	r2, r3
 800643a:	2300      	movs	r3, #0
 800643c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644a:	461a      	mov	r2, r3
 800644c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006450:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3301      	adds	r3, #1
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800645c:	461a      	mov	r2, r3
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	4293      	cmp	r3, r2
 8006462:	d3b5      	bcc.n	80063d0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006464:	2300      	movs	r3, #0
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	e043      	b.n	80064f2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006480:	d118      	bne.n	80064b4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006494:	461a      	mov	r2, r3
 8006496:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	e013      	b.n	80064c6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064aa:	461a      	mov	r2, r3
 80064ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	e008      	b.n	80064c6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	2300      	movs	r3, #0
 80064c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d2:	461a      	mov	r2, r3
 80064d4:	2300      	movs	r3, #0
 80064d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e4:	461a      	mov	r2, r3
 80064e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	3301      	adds	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064f6:	461a      	mov	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d3b5      	bcc.n	800646a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800650c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006510:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800651e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	f043 0210 	orr.w	r2, r3, #16
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699a      	ldr	r2, [r3, #24]
 8006538:	4b0f      	ldr	r3, [pc, #60]	@ (8006578 <USB_DevInit+0x2b4>)
 800653a:	4313      	orrs	r3, r2
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006540:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f043 0208 	orr.w	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006554:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699a      	ldr	r2, [r3, #24]
 8006560:	4b06      	ldr	r3, [pc, #24]	@ (800657c <USB_DevInit+0x2b8>)
 8006562:	4313      	orrs	r3, r2
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006574:	b004      	add	sp, #16
 8006576:	4770      	bx	lr
 8006578:	803c3800 	.word	0x803c3800
 800657c:	40000004 	.word	0x40000004

08006580 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800659a:	d901      	bls.n	80065a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800659c:	2303      	movs	r3, #3
 800659e:	e01b      	b.n	80065d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	daf2      	bge.n	800658e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	019b      	lsls	r3, r3, #6
 80065b0:	f043 0220 	orr.w	r2, r3, #32
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065c4:	d901      	bls.n	80065ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e006      	b.n	80065d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d0f0      	beq.n	80065b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065fc:	d901      	bls.n	8006602 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e018      	b.n	8006634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	daf2      	bge.n	80065f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2210      	movs	r2, #16
 8006612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	3301      	adds	r3, #1
 8006618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006620:	d901      	bls.n	8006626 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e006      	b.n	8006634 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0310 	and.w	r3, r3, #16
 800662e:	2b10      	cmp	r3, #16
 8006630:	d0f0      	beq.n	8006614 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	78fb      	ldrb	r3, [r7, #3]
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006660:	4313      	orrs	r3, r2
 8006662:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800668c:	f023 0303 	bic.w	r3, r3, #3
 8006690:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a0:	f043 0302 	orr.w	r3, r3, #2
 80066a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	f003 0301 	and.w	r3, r3, #1
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066e8:	d901      	bls.n	80066ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e01b      	b.n	8006726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	daf2      	bge.n	80066dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f043 0201 	orr.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006712:	d901      	bls.n	8006718 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e006      	b.n	8006726 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b01      	cmp	r3, #1
 8006722:	d0f0      	beq.n	8006706 <USB_CoreReset+0x36>

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <memset>:
 8006732:	4402      	add	r2, r0
 8006734:	4603      	mov	r3, r0
 8006736:	4293      	cmp	r3, r2
 8006738:	d100      	bne.n	800673c <memset+0xa>
 800673a:	4770      	bx	lr
 800673c:	f803 1b01 	strb.w	r1, [r3], #1
 8006740:	e7f9      	b.n	8006736 <memset+0x4>
	...

08006744 <__libc_init_array>:
 8006744:	b570      	push	{r4, r5, r6, lr}
 8006746:	4d0d      	ldr	r5, [pc, #52]	@ (800677c <__libc_init_array+0x38>)
 8006748:	4c0d      	ldr	r4, [pc, #52]	@ (8006780 <__libc_init_array+0x3c>)
 800674a:	1b64      	subs	r4, r4, r5
 800674c:	10a4      	asrs	r4, r4, #2
 800674e:	2600      	movs	r6, #0
 8006750:	42a6      	cmp	r6, r4
 8006752:	d109      	bne.n	8006768 <__libc_init_array+0x24>
 8006754:	4d0b      	ldr	r5, [pc, #44]	@ (8006784 <__libc_init_array+0x40>)
 8006756:	4c0c      	ldr	r4, [pc, #48]	@ (8006788 <__libc_init_array+0x44>)
 8006758:	f000 f818 	bl	800678c <_init>
 800675c:	1b64      	subs	r4, r4, r5
 800675e:	10a4      	asrs	r4, r4, #2
 8006760:	2600      	movs	r6, #0
 8006762:	42a6      	cmp	r6, r4
 8006764:	d105      	bne.n	8006772 <__libc_init_array+0x2e>
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	f855 3b04 	ldr.w	r3, [r5], #4
 800676c:	4798      	blx	r3
 800676e:	3601      	adds	r6, #1
 8006770:	e7ee      	b.n	8006750 <__libc_init_array+0xc>
 8006772:	f855 3b04 	ldr.w	r3, [r5], #4
 8006776:	4798      	blx	r3
 8006778:	3601      	adds	r6, #1
 800677a:	e7f2      	b.n	8006762 <__libc_init_array+0x1e>
 800677c:	080067e4 	.word	0x080067e4
 8006780:	080067e4 	.word	0x080067e4
 8006784:	080067e4 	.word	0x080067e4
 8006788:	080067e8 	.word	0x080067e8

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr
